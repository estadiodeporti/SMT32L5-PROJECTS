
Dia 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002d94  08002d94  00003d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002de8  08002de8  00003de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002df8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002df8  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bda9  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  0000fdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00011a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a7  00000000  00000000  000126b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028448  00000000  00000000  0001305f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d05d  00000000  00000000  0003b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104760  00000000  00000000  00048504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cc64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  0014cca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001500d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08002d7c 	.word	0x08002d7c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08002d7c 	.word	0x08002d7c

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fcf1 	bl	8000c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f83c 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8ec 	bl	800041c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000244:	f000 f889 	bl	800035a <MX_ICACHE_Init>
  MX_TIM2_Init();
 8000248:	f000 f89a 	bl	8000380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800024c:	4805      	ldr	r0, [pc, #20]	@ (8000264 <main+0x30>)
 800024e:	f002 f919 	bl	8002484 <HAL_TIM_Base_Start_IT>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <main+0x2a>
    Error_Handler();
 8000258:	f000 fb68 	bl	800092c <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	e7fd      	b.n	800025e <main+0x2a>
 8000262:	bf00      	nop
 8000264:	20000028 	.word	0x20000028

08000268 <HAL_GPIO_EXTI_Falling_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_BUTTON_Pin) {
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000278:	d103      	bne.n	8000282 <HAL_GPIO_EXTI_Falling_Callback+0x1a>
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // LED2 enciende/apaga
 800027a:	2108      	movs	r1, #8
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 800027e:	f000 ffed 	bl	800125c <HAL_GPIO_TogglePin>
    }
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	42020c00 	.word	0x42020c00

08000290 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80002a0:	d104      	bne.n	80002ac <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80002a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002a6:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002a8:	f000 ffd8 	bl	800125c <HAL_GPIO_TogglePin>
	}
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	42021800 	.word	0x42021800

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b098      	sub	sp, #96	@ 0x60
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2248      	movs	r2, #72	@ 0x48
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fd2c 	bl	8002d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80002da:	2000      	movs	r0, #0
 80002dc:	f001 f848 	bl	8001370 <HAL_PWREx_ControlVoltageScaling>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002e6:	f000 fb21 	bl	800092c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ea:	2310      	movs	r3, #16
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002f2:	2300      	movs	r3, #0
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80002f6:	23b0      	movs	r3, #176	@ 0xb0
 80002f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002fe:	2301      	movs	r3, #1
 8000300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000302:	230c      	movs	r3, #12
 8000304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000306:	2337      	movs	r3, #55	@ 0x37
 8000308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030a:	2307      	movs	r3, #7
 800030c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f001 f8c8 	bl	80014b0 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000326:	f000 fb01 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2105      	movs	r1, #5
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fd8a 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 faed 	bl	800092c <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3760      	adds	r7, #96	@ 0x60
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800035e:	2000      	movs	r0, #0
 8000360:	f000 ffc8 	bl	80012f4 <HAL_ICACHE_ConfigAssociativityMode>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800036a:	f000 fadf 	bl	800092c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800036e:	f000 ffe1 	bl	8001334 <HAL_ICACHE_Enable>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000378:	f000 fad8 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039e:	4b1e      	ldr	r3, [pc, #120]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80003a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21999;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003b6:	f245 52ef 	movw	r2, #21999	@ 0x55ef
 80003ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c8:	4813      	ldr	r0, [pc, #76]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003ca:	f002 f803 	bl	80023d4 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80003d4:	f000 faaa 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	480c      	ldr	r0, [pc, #48]	@ (8000418 <MX_TIM2_Init+0x98>)
 80003e6:	f002 f9c4 	bl	8002772 <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003f0:	f000 fa9c 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_TIM2_Init+0x98>)
 8000402:	f002 fbe9 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 fa8e 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000028 	.word	0x20000028

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08e      	sub	sp, #56	@ 0x38
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000432:	4bb3      	ldr	r3, [pc, #716]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	4ab2      	ldr	r2, [pc, #712]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800043e:	4bb0      	ldr	r3, [pc, #704]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000442:	f003 0310 	and.w	r3, r3, #16
 8000446:	623b      	str	r3, [r7, #32]
 8000448:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4bad      	ldr	r3, [pc, #692]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	4aac      	ldr	r2, [pc, #688]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000456:	4baa      	ldr	r3, [pc, #680]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000462:	4ba7      	ldr	r3, [pc, #668]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	4aa6      	ldr	r2, [pc, #664]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800046e:	4ba4      	ldr	r3, [pc, #656]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800047a:	f000 ffd5 	bl	8001428 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047e:	4ba0      	ldr	r3, [pc, #640]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a9f      	ldr	r2, [pc, #636]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048a:	4b9d      	ldr	r3, [pc, #628]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	f003 0308 	and.w	r3, r3, #8
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000496:	4b9a      	ldr	r3, [pc, #616]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	4a99      	ldr	r2, [pc, #612]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a2:	4b97      	ldr	r3, [pc, #604]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	f003 0304 	and.w	r3, r3, #4
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b94      	ldr	r3, [pc, #592]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	4a93      	ldr	r2, [pc, #588]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ba:	4b91      	ldr	r3, [pc, #580]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b8e      	ldr	r3, [pc, #568]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ca:	4a8d      	ldr	r2, [pc, #564]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004cc:	f043 0320 	orr.w	r3, r3, #32
 80004d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d2:	4b8b      	ldr	r3, [pc, #556]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	4b88      	ldr	r3, [pc, #544]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e2:	4a87      	ldr	r2, [pc, #540]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ea:	4b85      	ldr	r3, [pc, #532]	@ (8000700 <MX_GPIO_Init+0x2e4>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f241 1102 	movw	r1, #4354	@ 0x1102
 80004fc:	4881      	ldr	r0, [pc, #516]	@ (8000704 <MX_GPIO_Init+0x2e8>)
 80004fe:	f000 fe95 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2108      	movs	r1, #8
 8000506:	4880      	ldr	r0, [pc, #512]	@ (8000708 <MX_GPIO_Init+0x2ec>)
 8000508:	f000 fe90 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	487e      	ldr	r0, [pc, #504]	@ (800070c <MX_GPIO_Init+0x2f0>)
 8000512:	f000 fe8b 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051c:	487c      	ldr	r0, [pc, #496]	@ (8000710 <MX_GPIO_Init+0x2f4>)
 800051e:	f000 fe85 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	487b      	ldr	r0, [pc, #492]	@ (8000714 <MX_GPIO_Init+0x2f8>)
 8000528:	f000 fe80 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 4158 	mov.w	r1, #55296	@ 0xd800
 8000532:	4879      	ldr	r0, [pc, #484]	@ (8000718 <MX_GPIO_Init+0x2fc>)
 8000534:	f000 fe7a 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE3 PE4 PE2
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8000538:	237c      	movs	r3, #124	@ 0x7c
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000548:	230d      	movs	r3, #13
 800054a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000550:	4619      	mov	r1, r3
 8000552:	4872      	ldr	r0, [pc, #456]	@ (800071c <MX_GPIO_Init+0x300>)
 8000554:	f000 fcea 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_PWM_Pin */
  GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8000558:	2302      	movs	r3, #2
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000568:	230e      	movs	r3, #14
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000570:	4619      	mov	r1, r3
 8000572:	486a      	ldr	r0, [pc, #424]	@ (800071c <MX_GPIO_Init+0x300>)
 8000574:	f000 fcda 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000578:	23c0      	movs	r3, #192	@ 0xc0
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057c:	2312      	movs	r3, #18
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000588:	2304      	movs	r3, #4
 800058a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000590:	4619      	mov	r1, r3
 8000592:	485e      	ldr	r0, [pc, #376]	@ (800070c <MX_GPIO_Init+0x2f0>)
 8000594:	f000 fcca 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 8000598:	f241 1302 	movw	r3, #4354	@ 0x1102
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ae:	4619      	mov	r1, r3
 80005b0:	4854      	ldr	r0, [pc, #336]	@ (8000704 <MX_GPIO_Init+0x2e8>)
 80005b2:	f000 fcbb 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD1 PD0
                           PD7 PD14 PD15 PD9
                           PD8 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 80005b6:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005c8:	230c      	movs	r3, #12
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d0:	4619      	mov	r1, r3
 80005d2:	484d      	ldr	r0, [pc, #308]	@ (8000708 <MX_GPIO_Init+0x2ec>)
 80005d4:	f000 fcaa 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005d8:	2304      	movs	r3, #4
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005e8:	230c      	movs	r3, #12
 80005ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	4845      	ldr	r0, [pc, #276]	@ (8000708 <MX_GPIO_Init+0x2ec>)
 80005f4:	f000 fc9a 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 80005f8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000606:	2303      	movs	r3, #3
 8000608:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800060a:	230c      	movs	r3, #12
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000612:	4619      	mov	r1, r3
 8000614:	4842      	ldr	r0, [pc, #264]	@ (8000720 <MX_GPIO_Init+0x304>)
 8000616:	f000 fc89 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|VBUS_SENSE_Pin;
 800061a:	f248 0310 	movw	r3, #32784	@ 0x8010
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062c:	4619      	mov	r1, r3
 800062e:	4838      	ldr	r0, [pc, #224]	@ (8000710 <MX_GPIO_Init+0x2f4>)
 8000630:	f000 fc7c 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000634:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000646:	230a      	movs	r3, #10
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064e:	4619      	mov	r1, r3
 8000650:	482f      	ldr	r0, [pc, #188]	@ (8000710 <MX_GPIO_Init+0x2f4>)
 8000652:	f000 fc6b 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	4619      	mov	r1, r3
 800066c:	482c      	ldr	r0, [pc, #176]	@ (8000720 <MX_GPIO_Init+0x304>)
 800066e:	f000 fc5d 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000672:	2308      	movs	r3, #8
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000686:	4619      	mov	r1, r3
 8000688:	481f      	ldr	r0, [pc, #124]	@ (8000708 <MX_GPIO_Init+0x2ec>)
 800068a:	f000 fc4f 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068e:	2301      	movs	r3, #1
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069e:	230c      	movs	r3, #12
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	4619      	mov	r1, r3
 80006a8:	481b      	ldr	r0, [pc, #108]	@ (8000718 <MX_GPIO_Init+0x2fc>)
 80006aa:	f000 fc3f 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 80006ae:	230e      	movs	r3, #14
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <MX_GPIO_Init+0x2fc>)
 80006c4:	f000 fc32 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_GPIO_Init+0x2f0>)
 80006e0:	f000 fc24 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_TX_Pin USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80006e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006f6:	2307      	movs	r3, #7
 80006f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	e011      	b.n	8000724 <MX_GPIO_Init+0x308>
 8000700:	40021000 	.word	0x40021000
 8000704:	42021800 	.word	0x42021800
 8000708:	42020c00 	.word	0x42020c00
 800070c:	42020400 	.word	0x42020400
 8000710:	42020000 	.word	0x42020000
 8000714:	42021c00 	.word	0x42021c00
 8000718:	42021400 	.word	0x42021400
 800071c:	42021000 	.word	0x42021000
 8000720:	42020800 	.word	0x42020800
 8000724:	4619      	mov	r1, r3
 8000726:	487a      	ldr	r0, [pc, #488]	@ (8000910 <MX_GPIO_Init+0x4f4>)
 8000728:	f000 fc00 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800072c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4872      	ldr	r0, [pc, #456]	@ (8000910 <MX_GPIO_Init+0x4f4>)
 8000746:	f000 fbf1 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 800074a:	2301      	movs	r3, #1
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	486c      	ldr	r0, [pc, #432]	@ (8000914 <MX_GPIO_Init+0x4f8>)
 8000762:	f000 fbe3 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8000766:	230e      	movs	r3, #14
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000776:	230a      	movs	r3, #10
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	4865      	ldr	r0, [pc, #404]	@ (8000918 <MX_GPIO_Init+0x4fc>)
 8000782:	f000 fbd3 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	4860      	ldr	r0, [pc, #384]	@ (800091c <MX_GPIO_Init+0x500>)
 800079c:	f000 fbc6 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007b0:	2306      	movs	r3, #6
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4858      	ldr	r0, [pc, #352]	@ (800091c <MX_GPIO_Init+0x500>)
 80007bc:	f000 fbb6 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG2 PG3 BLE_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80007c0:	233c      	movs	r3, #60	@ 0x3c
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d0:	2305      	movs	r3, #5
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4850      	ldr	r0, [pc, #320]	@ (800091c <MX_GPIO_Init+0x500>)
 80007dc:	f000 fba6 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e0:	2301      	movs	r3, #1
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80007f0:	2303      	movs	r3, #3
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4847      	ldr	r0, [pc, #284]	@ (8000918 <MX_GPIO_Init+0x4fc>)
 80007fc:	f000 fb96 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8000800:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4841      	ldr	r0, [pc, #260]	@ (8000920 <MX_GPIO_Init+0x504>)
 800081a:	f000 fb87 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 PE7
                           PE14 PE11 PE15 PE9
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 800081e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000830:	230c      	movs	r3, #12
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	483a      	ldr	r0, [pc, #232]	@ (8000924 <MX_GPIO_Init+0x508>)
 800083c:	f000 fb76 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8000840:	23cc      	movs	r3, #204	@ 0xcc
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000850:	230a      	movs	r3, #10
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	482d      	ldr	r0, [pc, #180]	@ (8000910 <MX_GPIO_Init+0x4f4>)
 800085c:	f000 fb66 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000860:	2307      	movs	r3, #7
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000870:	230a      	movs	r3, #10
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	482b      	ldr	r0, [pc, #172]	@ (8000928 <MX_GPIO_Init+0x50c>)
 800087c:	f000 fb56 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000880:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000892:	2308      	movs	r3, #8
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4822      	ldr	r0, [pc, #136]	@ (8000928 <MX_GPIO_Init+0x50c>)
 800089e:	f000 fb45 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80008a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_GPIO_Init+0x50c>)
 80008b8:	f000 fb38 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4815      	ldr	r0, [pc, #84]	@ (8000928 <MX_GPIO_Init+0x50c>)
 80008d2:	f000 fb2b 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008e8:	2306      	movs	r3, #6
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_GPIO_Init+0x50c>)
 80008f4:	f000 fb1a 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2018      	movs	r0, #24
 80008fe:	f000 fae0 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000902:	2018      	movs	r0, #24
 8000904:	f000 faf7 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3738      	adds	r7, #56	@ 0x38
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	42020000 	.word	0x42020000
 8000914:	42021c00 	.word	0x42021c00
 8000918:	42020800 	.word	0x42020800
 800091c:	42021800 	.word	0x42021800
 8000920:	42021400 	.word	0x42021400
 8000924:	42021000 	.word	0x42021000
 8000928:	42020400 	.word	0x42020400

0800092c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	@ 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800096e:	f000 fd6b 	bl	8001448 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000990:	d113      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_TIM_Base_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <HAL_TIM_Base_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_TIM_Base_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	202d      	movs	r0, #45	@ 0x2d
 80009b0:	f000 fa87 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009b4:	202d      	movs	r0, #45	@ 0x2d
 80009b6:	f000 fa9e 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 f955 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000a2a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a2e:	f000 fc2f 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <TIM2_IRQHandler+0x10>)
 8000a3e:	f001 fd91 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000028 	.word	0x20000028

08000a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000a76:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d107      	bne.n	8000a92 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000a82:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e005      	b.n	8000a9e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000a92:	4b48      	ldr	r3, [pc, #288]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000a9e:	4a46      	ldr	r2, [pc, #280]	@ (8000bb8 <SystemCoreClockUpdate+0x148>)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aa8:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 030c 	and.w	r3, r3, #12
 8000ab0:	2b0c      	cmp	r3, #12
 8000ab2:	d866      	bhi.n	8000b82 <SystemCoreClockUpdate+0x112>
 8000ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8000abc <SystemCoreClockUpdate+0x4c>)
 8000ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aba:	bf00      	nop
 8000abc:	08000af1 	.word	0x08000af1
 8000ac0:	08000b83 	.word	0x08000b83
 8000ac4:	08000b83 	.word	0x08000b83
 8000ac8:	08000b83 	.word	0x08000b83
 8000acc:	08000af9 	.word	0x08000af9
 8000ad0:	08000b83 	.word	0x08000b83
 8000ad4:	08000b83 	.word	0x08000b83
 8000ad8:	08000b83 	.word	0x08000b83
 8000adc:	08000b01 	.word	0x08000b01
 8000ae0:	08000b83 	.word	0x08000b83
 8000ae4:	08000b83 	.word	0x08000b83
 8000ae8:	08000b83 	.word	0x08000b83
 8000aec:	08000b09 	.word	0x08000b09
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000af0:	4a32      	ldr	r2, [pc, #200]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	6013      	str	r3, [r2, #0]
      break;
 8000af6:	e048      	b.n	8000b8a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000af8:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000afa:	4a31      	ldr	r2, [pc, #196]	@ (8000bc0 <SystemCoreClockUpdate+0x150>)
 8000afc:	601a      	str	r2, [r3, #0]
      break;
 8000afe:	e044      	b.n	8000b8a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000b02:	4a30      	ldr	r2, [pc, #192]	@ (8000bc4 <SystemCoreClockUpdate+0x154>)
 8000b04:	601a      	str	r2, [r3, #0]
      break;
 8000b06:	e040      	b.n	8000b8a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000b12:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d003      	beq.n	8000b2e <SystemCoreClockUpdate+0xbe>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d006      	beq.n	8000b3a <SystemCoreClockUpdate+0xca>
 8000b2c:	e00b      	b.n	8000b46 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000b2e:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <SystemCoreClockUpdate+0x150>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	613b      	str	r3, [r7, #16]
          break;
 8000b38:	e00b      	b.n	8000b52 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000b3a:	4a22      	ldr	r2, [pc, #136]	@ (8000bc4 <SystemCoreClockUpdate+0x154>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	613b      	str	r3, [r7, #16]
          break;
 8000b44:	e005      	b.n	8000b52 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	613b      	str	r3, [r7, #16]
          break;
 8000b50:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0e5b      	lsrs	r3, r3, #25
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	3301      	adds	r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000b7e:	6013      	str	r3, [r2, #0]
      break;
 8000b80:	e003      	b.n	8000b8a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	6013      	str	r3, [r2, #0]
      break;
 8000b88:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <SystemCoreClockUpdate+0x144>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <SystemCoreClockUpdate+0x158>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemCoreClockUpdate+0x14c>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	08002da4 	.word	0x08002da4
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	00f42400 	.word	0x00f42400
 8000bc4:	007a1200 	.word	0x007a1200
 8000bc8:	08002d94 	.word	0x08002d94

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff ff3c 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bd6:	e003      	b.n	8000be0 <LoopCopyDataInit>

08000bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bde:	3104      	adds	r1, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be0:	480a      	ldr	r0, [pc, #40]	@ (8000c0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000be8:	d3f6      	bcc.n	8000bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bec:	e002      	b.n	8000bf4 <LoopFillZerobss>

08000bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf0:	f842 3b04 	str.w	r3, [r2], #4

08000bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <LoopForever+0x16>)
	cmp	r2, r3
 8000bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bf8:	d3f9      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfa:	f002 f89b 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fb19 	bl	8000234 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c04:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000c08:	08002dec 	.word	0x08002dec
	ldr	r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c10:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c18:	20000078 	.word	0x20000078

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>

08000c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f000 f93f 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000c2e:	f7ff ff1f 	bl	8000a70 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fe78 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_InitTick+0x70>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f947 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10f      	bne.n	8000caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d809      	bhi.n	8000ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f913 	bl	8000ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_InitTick+0x74>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e001      	b.n	8000cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000074 	.word	0x20000074

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000074 	.word	0x20000074

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	@ (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0152      	lsls	r2, r2, #5
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	@ (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0152      	lsls	r2, r2, #5
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	bf28      	it	cs
 8000e1e:	2303      	movcs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3303      	adds	r3, #3
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b04      	subs	r3, #4
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	@ 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	2107      	movs	r1, #7
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff40 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff90 	bl	8000e00 <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5f 	bl	8000dac <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff33 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa4 	bl	8000e68 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f3a:	e158      	b.n	80011ee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 814a 	beq.w	80011e8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d017      	beq.n	800100a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d123      	bne.n	800105e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	6939      	ldr	r1, [r7, #16]
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0203 	and.w	r2, r3, #3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80a4 	beq.w	80011e8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80010a0:	4a5a      	ldr	r2, [pc, #360]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3318      	adds	r3, #24
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a52      	ldr	r2, [pc, #328]	@ (8001210 <HAL_GPIO_Init+0x2e4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d025      	beq.n	8001118 <HAL_GPIO_Init+0x1ec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a51      	ldr	r2, [pc, #324]	@ (8001214 <HAL_GPIO_Init+0x2e8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d01f      	beq.n	8001114 <HAL_GPIO_Init+0x1e8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a50      	ldr	r2, [pc, #320]	@ (8001218 <HAL_GPIO_Init+0x2ec>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d019      	beq.n	8001110 <HAL_GPIO_Init+0x1e4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x2f0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x1e0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x2f4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1dc>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x2f8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1d8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x2fc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1d4>
 80010fc:	2306      	movs	r3, #6
 80010fe:	e00c      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001100:	2307      	movs	r3, #7
 8001102:	e00a      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001104:	2305      	movs	r3, #5
 8001106:	e008      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001108:	2304      	movs	r3, #4
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 800110c:	2303      	movs	r3, #3
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001110:	2302      	movs	r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001118:	2300      	movs	r3, #0
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	4093      	lsls	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800112a:	4938      	ldr	r1, [pc, #224]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3318      	adds	r3, #24
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001138:	4b34      	ldr	r3, [pc, #208]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001186:	4a21      	ldr	r2, [pc, #132]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 800118e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b2:	4a16      	ldr	r2, [pc, #88]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 80011bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_GPIO_Init+0x2e0>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f ae9f 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4002f400 	.word	0x4002f400
 8001210:	42020000 	.word	0x42020000
 8001214:	42020400 	.word	0x42020400
 8001218:	42020800 	.word	0x42020800
 800121c:	42020c00 	.word	0x42020c00
 8001220:	42021000 	.word	0x42021000
 8001224:	42021400 	.word	0x42021400
 8001228:	42021800 	.word	0x42021800

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43d9      	mvns	r1, r3
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	400b      	ands	r3, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80012a6:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f814 	bl	80012dc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80012c0:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ffcd 	bl	8000268 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	4002f400 	.word	0x4002f400

080012dc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e007      	b.n	8001322 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 0204 	bic.w	r2, r3, #4
 800131a:	4905      	ldr	r1, [pc, #20]	@ (8001330 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40030400 	.word	0x40030400

08001334 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_ICACHE_Enable+0x1c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_ICACHE_Enable+0x1c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40030400 	.word	0x40030400

08001354 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <HAL_PWREx_GetVoltageRange+0x18>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001380:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001382:	f000 f871 	bl	8001468 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001386:	4603      	mov	r3, r0
 8001388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800138c:	d101      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e03e      	b.n	8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800139a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800139e:	d101      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e035      	b.n	8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d101      	bne.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e02f      	b.n	8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80013b8:	4917      	ldr	r1, [pc, #92]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	4a16      	ldr	r2, [pc, #88]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	09db      	lsrs	r3, r3, #7
 80013ce:	2232      	movs	r2, #50	@ 0x32
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e0:	e002      	b.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f4:	d102      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f2      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001408:	d101      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e000      	b.n	8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40007000 	.word	0x40007000
 800141c:	20000000 	.word	0x20000000
 8001420:	0a7c5ac5 	.word	0x0a7c5ac5
 8001424:	cccccccd 	.word	0xcccccccd

08001428 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_PWREx_EnableVddIO2+0x1c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001436:	6053      	str	r3, [r2, #4]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40007000 	.word	0x40007000

08001468 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800147e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	e00a      	b.n	800149c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e001      	b.n	800149c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 bcc2 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c4:	4b99      	ldr	r3, [pc, #612]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ce:	4b97      	ldr	r3, [pc, #604]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80e9 	beq.w	80016b8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_RCC_OscConfig+0x4a>
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	f040 8083 	bne.w	80015fa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d17f      	bne.n	80015fa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014fa:	4b8c      	ldr	r3, [pc, #560]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_RCC_OscConfig+0x64>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f000 bc9a 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001518:	4b84      	ldr	r3, [pc, #528]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_RCC_OscConfig+0x7e>
 8001524:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800152c:	e005      	b.n	800153a <HAL_RCC_OscConfig+0x8a>
 800152e:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153a:	4293      	cmp	r3, r2
 800153c:	d224      	bcs.n	8001588 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fe74 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bc7a 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b75      	ldr	r3, [pc, #468]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a74      	ldr	r2, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b72      	ldr	r3, [pc, #456]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	496f      	ldr	r1, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b6e      	ldr	r3, [pc, #440]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	496a      	ldr	r1, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e026      	b.n	80015d6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4b68      	ldr	r3, [pc, #416]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a67      	ldr	r2, [pc, #412]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	4962      	ldr	r1, [pc, #392]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b61      	ldr	r3, [pc, #388]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	495d      	ldr	r1, [pc, #372]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10a      	bne.n	80015d6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fe33 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f000 bc39 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80015d6:	f000 fe17 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a54      	ldr	r2, [pc, #336]	@ (8001730 <HAL_RCC_OscConfig+0x280>)
 80015de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e0:	4b54      	ldr	r3, [pc, #336]	@ (8001734 <HAL_RCC_OscConfig+0x284>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fb35 	bl	8000c54 <HAL_InitTick>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d060      	beq.n	80016b6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	f000 bc27 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d039      	beq.n	8001676 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a49      	ldr	r2, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb71 	bl	8000cf4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001614:	e00f      	b.n	8001636 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001616:	f7ff fb6d 	bl	8000cf4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d908      	bls.n	8001636 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001624:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	f000 bc09 	b.w	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001636:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0e9      	beq.n	8001616 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a39      	ldr	r2, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	4934      	ldr	r1, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	492f      	ldr	r1, [pc, #188]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e020      	b.n	80016b8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2c      	ldr	r2, [pc, #176]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb37 	bl	8000cf4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001688:	e00e      	b.n	80016a8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168a:	f7ff fb33 	bl	8000cf4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d907      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e3cf      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ea      	bne.n	800168a <HAL_RCC_OscConfig+0x1da>
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d07e      	beq.n	80017c2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x226>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d10e      	bne.n	80016ee <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06e      	beq.n	80017c0 <HAL_RCC_OscConfig+0x310>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d16a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e3ac      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x256>
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e024      	b.n	8001750 <HAL_RCC_OscConfig+0x2a0>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800170e:	d113      	bne.n	8001738 <HAL_RCC_OscConfig+0x288>
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a02      	ldr	r2, [pc, #8]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e012      	b.n	8001750 <HAL_RCC_OscConfig+0x2a0>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	4b8b      	ldr	r3, [pc, #556]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a8a      	ldr	r2, [pc, #552]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a87      	ldr	r2, [pc, #540]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d019      	beq.n	800178c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff facc 	bl	8000cf4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175e:	e00e      	b.n	800177e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fac8 	bl	8000cf4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d907      	bls.n	800177e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	4b7e      	ldr	r3, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e364      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b7a      	ldr	r3, [pc, #488]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ea      	beq.n	8001760 <HAL_RCC_OscConfig+0x2b0>
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fab2 	bl	8000cf4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	e00e      	b.n	80017b2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff faae 	bl	8000cf4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d907      	bls.n	80017b2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4b71      	ldr	r3, [pc, #452]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e34a      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ea      	bne.n	8001794 <HAL_RCC_OscConfig+0x2e4>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d06c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x330>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d119      	bne.n	800180e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d116      	bne.n	800180e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e0:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x348>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e327      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4958      	ldr	r1, [pc, #352]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800180c:	e04c      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d029      	beq.n	800186a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001816:	4b54      	ldr	r3, [pc, #336]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a53      	ldr	r2, [pc, #332]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fa67 	bl	8000cf4 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	e00e      	b.n	8001848 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff fa63 	bl	8000cf4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d907      	bls.n	8001848 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e2ff      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001848:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ea      	beq.n	800182a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4941      	ldr	r1, [pc, #260]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	e01e      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a3e      	ldr	r2, [pc, #248]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fa3d 	bl	8000cf4 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800187c:	e00e      	b.n	800189c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fa39 	bl	8000cf4 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d907      	bls.n	800189c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e2d5      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800189c:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ea      	bne.n	800187e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d062      	beq.n	800197a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d038      	beq.n	800192e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ca:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f023 0310 	bic.w	r3, r3, #16
 80018d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018d4:	e007      	b.n	80018e6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f9fd 	bl	8000cf4 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fc:	e00f      	b.n	800191e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff f9f9 	bl	8000cf4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b07      	cmp	r3, #7
 800190a:	d908      	bls.n	800191e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e294      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0e8      	beq.n	80018fe <HAL_RCC_OscConfig+0x44e>
 800192c:	e025      	b.n	800197a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001934:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff f9d9 	bl	8000cf4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001944:	e012      	b.n	800196c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff f9d5 	bl	8000cf4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b07      	cmp	r3, #7
 8001952:	d90b      	bls.n	800196c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e270      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800196c:	4ba8      	ldr	r3, [pc, #672]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e5      	bne.n	8001946 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 812d 	beq.w	8001be2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800198c:	4ba0      	ldr	r3, [pc, #640]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	4b9d      	ldr	r3, [pc, #628]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a9c      	ldr	r2, [pc, #624]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b4:	4b97      	ldr	r3, [pc, #604]	@ (8001c14 <HAL_RCC_OscConfig+0x764>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11e      	bne.n	80019fe <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b94      	ldr	r3, [pc, #592]	@ (8001c14 <HAL_RCC_OscConfig+0x764>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a93      	ldr	r2, [pc, #588]	@ (8001c14 <HAL_RCC_OscConfig+0x764>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f992 	bl	8000cf4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d2:	e00e      	b.n	80019f2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff f98e 	bl	8000cf4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d907      	bls.n	80019f2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001c14 <HAL_RCC_OscConfig+0x764>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e22a      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	4b88      	ldr	r3, [pc, #544]	@ (8001c14 <HAL_RCC_OscConfig+0x764>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0ea      	beq.n	80019d4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a16:	4b7e      	ldr	r3, [pc, #504]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a26:	4b7a      	ldr	r3, [pc, #488]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2c:	4a78      	ldr	r2, [pc, #480]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a36:	e018      	b.n	8001a6a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a38:	4b75      	ldr	r3, [pc, #468]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3e:	4a74      	ldr	r2, [pc, #464]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a48:	e00f      	b.n	8001a6a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a4a:	4b71      	ldr	r3, [pc, #452]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a50:	4a6f      	ldr	r2, [pc, #444]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a60:	4a6b      	ldr	r2, [pc, #428]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d068      	beq.n	8001b44 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f93f 	bl	8000cf4 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a78:	e011      	b.n	8001a9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f93b 	bl	8000cf4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d908      	bls.n	8001a9e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8c:	4b60      	ldr	r3, [pc, #384]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1d4      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0e6      	beq.n	8001a7a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d022      	beq.n	8001afe <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001abe:	4a54      	ldr	r2, [pc, #336]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ac8:	e011      	b.n	8001aee <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f913 	bl	8000cf4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d908      	bls.n	8001aee <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001adc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1ac      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001aee:	4b48      	ldr	r3, [pc, #288]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e6      	beq.n	8001aca <HAL_RCC_OscConfig+0x61a>
 8001afc:	e068      	b.n	8001bd0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001afe:	4b44      	ldr	r3, [pc, #272]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b04:	4a42      	ldr	r2, [pc, #264]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b0e:	e011      	b.n	8001b34 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f8f0 	bl	8000cf4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d908      	bls.n	8001b34 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e189      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b34:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e6      	bne.n	8001b10 <HAL_RCC_OscConfig+0x660>
 8001b42:	e045      	b.n	8001bd0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f8d6 	bl	8000cf4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4a:	e011      	b.n	8001b70 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f8d2 	bl	8000cf4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e16b      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e6      	bne.n	8001b4c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b8c:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b9c:	e011      	b.n	8001bc2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f8a9 	bl	8000cf4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e142      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e6      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd0:	7ffb      	ldrb	r3, [r7, #31]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04f      	beq.n	8001c8e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d028      	beq.n	8001c48 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_RCC_OscConfig+0x760>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7ff f875 	bl	8000cf4 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x788>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c18:	f7ff f86c 	bl	8000cf4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c26:	4b8a      	ldr	r3, [pc, #552]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e107      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c38:	4b85      	ldr	r3, [pc, #532]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0e8      	beq.n	8001c18 <HAL_RCC_OscConfig+0x768>
 8001c46:	e022      	b.n	8001c8e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c48:	4b81      	ldr	r3, [pc, #516]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c4e:	4a80      	ldr	r2, [pc, #512]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f84c 	bl	8000cf4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c60:	f7ff f848 	bl	8000cf4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c6e:	4b78      	ldr	r3, [pc, #480]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0e3      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c80:	4b73      	ldr	r3, [pc, #460]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e8      	bne.n	8001c60 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80d7 	beq.w	8001e46 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	f000 8091 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d166      	bne.n	8001d7c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b68      	ldr	r3, [pc, #416]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a67      	ldr	r2, [pc, #412]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f81b 	bl	8000cf4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	e00e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f817 	bl	8000cf4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d907      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e0b3      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ea      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b58      	ldr	r3, [pc, #352]	@ (8001e54 <HAL_RCC_OscConfig+0x9a4>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cfc:	3a01      	subs	r2, #1
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d06:	0212      	lsls	r2, r2, #8
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d0e:	0852      	lsrs	r2, r2, #1
 8001d10:	3a01      	subs	r2, #1
 8001d12:	0552      	lsls	r2, r2, #21
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d1a:	0852      	lsrs	r2, r2, #1
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	0652      	lsls	r2, r2, #25
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d26:	06d2      	lsls	r2, r2, #27
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	4949      	ldr	r1, [pc, #292]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a46      	ldr	r2, [pc, #280]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d3c:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a43      	ldr	r2, [pc, #268]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7fe ffd4 	bl	8000cf4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	e00e      	b.n	8001d6e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ffd0 	bl	8000cf4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d907      	bls.n	8001d6e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e06c      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0ea      	beq.n	8001d50 <HAL_RCC_OscConfig+0x8a0>
 8001d7a:	e064      	b.n	8001e46 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a33      	ldr	r2, [pc, #204]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe ffb4 	bl	8000cf4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	e00e      	b.n	8001dae <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7fe ffb0 	bl	8000cf4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d907      	bls.n	8001dae <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e04c      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ea      	bne.n	8001d90 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dba:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4924      	ldr	r1, [pc, #144]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001dc0:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_RCC_OscConfig+0x9a8>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
 8001dc6:	e03e      	b.n	8001e46 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e039      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <HAL_RCC_OscConfig+0x9a0>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d12c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df2:	3b01      	subs	r3, #1
 8001df4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d123      	bne.n	8001e42 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d11b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e14:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d113      	bne.n	8001e42 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	019f800c 	.word	0x019f800c
 8001e58:	feeefffc 	.word	0xfeeefffc

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e11c      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b90      	ldr	r3, [pc, #576]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 020f 	bic.w	r2, r3, #15
 8001e8a:	498b      	ldr	r1, [pc, #556]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b89      	ldr	r3, [pc, #548]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e104      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b81      	ldr	r3, [pc, #516]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d908      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	497b      	ldr	r1, [pc, #492]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8085 	beq.w	8001fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d11f      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee8:	4b74      	ldr	r3, [pc, #464]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0da      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ef8:	f000 f9fe 	bl	80022f8 <RCC_GetSysClockFreqFromPLLSource>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4a6f      	ldr	r2, [pc, #444]	@ (80020c0 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d947      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f06:	4b6d      	ldr	r3, [pc, #436]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d141      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f12:	4b6a      	ldr	r3, [pc, #424]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f1a:	4a68      	ldr	r2, [pc, #416]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e036      	b.n	8001f96 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f30:	4b62      	ldr	r3, [pc, #392]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d115      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0b6      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f48:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0aa      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0a2      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f68:	f000 f8b0 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a53      	ldr	r2, [pc, #332]	@ (80020c0 <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d90f      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f76:	4b51      	ldr	r3, [pc, #324]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f82:	4b4e      	ldr	r3, [pc, #312]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f8a:	4a4c      	ldr	r2, [pc, #304]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b49      	ldr	r3, [pc, #292]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4946      	ldr	r1, [pc, #280]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fea4 	bl	8000cf4 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e013      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe fea0 	bl	8000cf4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d90a      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e06a      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 020c 	and.w	r2, r3, #12
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d1e2      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b80      	cmp	r3, #128	@ 0x80
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ff0:	4b32      	ldr	r3, [pc, #200]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a31      	ldr	r2, [pc, #196]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ffa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d208      	bcs.n	800202a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4925      	ldr	r1, [pc, #148]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d210      	bcs.n	800205a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	491d      	ldr	r1, [pc, #116]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e029      	b.n	80020ae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4912      	ldr	r1, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002084:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	490a      	ldr	r1, [pc, #40]	@ (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002098:	f000 f8b6 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800209c:	4603      	mov	r3, r0
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x268>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_ClockConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fdd4 	bl	8000c54 <HAL_InitTick>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	04c4b400 	.word	0x04c4b400
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d121      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11e      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002100:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800210c:	4b3a      	ldr	r3, [pc, #232]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002128:	4a34      	ldr	r2, [pc, #208]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x130>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d102      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002144:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x134>)
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e004      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d101      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002150:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x138>)
 8002152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d146      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800215a:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xb4>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d00d      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0xce>
 800217e:	e019      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002180:	4a1f      	ldr	r2, [pc, #124]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x134>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800218a:	68d2      	ldr	r2, [r2, #12]
 800218c:	0a12      	lsrs	r2, r2, #8
 800218e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
        break;
 8002198:	e019      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800219a:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x138>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	0a12      	lsrs	r2, r2, #8
 80021a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
        break;
 80021b2:	e00c      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021be:	68d2      	ldr	r2, [r2, #12]
 80021c0:	0a12      	lsrs	r2, r2, #8
 80021c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
        break;
 80021cc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0e5b      	lsrs	r3, r3, #25
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08002da4 	.word	0x08002da4
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800220c:	f7ff ff5e 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetHCLKFreq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	4903      	ldr	r1, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08002d94 	.word	0x08002d94

08002230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800223c:	4b2c      	ldr	r3, [pc, #176]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff f884 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 800224c:	6138      	str	r0, [r7, #16]
 800224e:	e014      	b.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002268:	f7ff f874 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 800226c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002286:	d10b      	bne.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b80      	cmp	r3, #128	@ 0x80
 800228c:	d919      	bls.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2ba0      	cmp	r3, #160	@ 0xa0
 8002292:	d902      	bls.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002294:	2302      	movs	r3, #2
 8002296:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002298:	e013      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800229a:	2301      	movs	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800229e:	e010      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b80      	cmp	r3, #128	@ 0x80
 80022a4:	d902      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022a6:	2303      	movs	r3, #3
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e00a      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b80      	cmp	r3, #128	@ 0x80
 80022b0:	d102      	bne.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b2:	2302      	movs	r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e004      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b70      	cmp	r3, #112	@ 0x70
 80022bc:	d101      	bne.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c2:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 020f 	bic.w	r2, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022000 	.word	0x40022000

080022f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fe:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002308:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d015      	beq.n	8002348 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d839      	bhi.n	8002396 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d01c      	beq.n	8002362 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d133      	bne.n	8002396 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800232e:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a23      	ldr	r2, [pc, #140]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	0a12      	lsrs	r2, r2, #8
 800233c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	613b      	str	r3, [r7, #16]
      break;
 8002346:	e029      	b.n	800239c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002348:	4a20      	ldr	r2, [pc, #128]	@ (80023cc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a1c      	ldr	r2, [pc, #112]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	0a12      	lsrs	r2, r2, #8
 8002356:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	613b      	str	r3, [r7, #16]
      break;
 8002360:	e01c      	b.n	800239c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e005      	b.n	800238a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800238a:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        break;
 8002394:	e002      	b.n	800239c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
      break;
 800239a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0e5b      	lsrs	r3, r3, #25
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023b6:	683b      	ldr	r3, [r7, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200
 80023d0:	08002da4 	.word	0x08002da4

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e049      	b.n	800247a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fac0 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fa9e 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d001      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e04f      	b.n	800253c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <HAL_TIM_Base_Start_IT+0xc4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01d      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c6:	d018      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <HAL_TIM_Base_Start_IT+0xc8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <HAL_TIM_Base_Start_IT+0xcc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00e      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_TIM_Base_Start_IT+0xd0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_TIM_Base_Start_IT+0xd4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d004      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x76>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	@ (800255c <HAL_TIM_Base_Start_IT+0xd8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d115      	bne.n	8002526 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_TIM_Base_Start_IT+0xdc>)
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b06      	cmp	r3, #6
 800250a:	d015      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0xb4>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002512:	d011      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	e008      	b.n	8002538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e000      	b.n	800253a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800
 8002554:	40000c00 	.word	0x40000c00
 8002558:	40013400 	.word	0x40013400
 800255c:	40014000 	.word	0x40014000
 8002560:	00010007 	.word	0x00010007

08002564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9b2 	bl	8002918 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9a4 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f9b5 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0204 	mvn.w	r2, #4
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f98c 	bl	8002918 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f97e 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f98f 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0208 	mvn.w	r2, #8
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f966 	bl	8002918 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f958 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f969 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0210 	mvn.w	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2208      	movs	r2, #8
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f940 	bl	8002918 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f932 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f943 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fd fde0 	bl	8000290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00c      	beq.n	80026fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80026f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 faff 	bl	8002cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800271a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 faf7 	bl	8002d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800273e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8fd 	bl	8002940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0220 	mvn.w	r2, #32
 8002762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fabf 	bl	8002ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_TIM_ConfigClockSource+0x1c>
 800278a:	2302      	movs	r3, #2
 800278c:	e0b6      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x18a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80027ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ca:	d03e      	beq.n	800284a <HAL_TIM_ConfigClockSource+0xd8>
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d0:	f200 8087 	bhi.w	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d8:	f000 8086 	beq.w	80028e8 <HAL_TIM_ConfigClockSource+0x176>
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d87f      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 80027e2:	2b70      	cmp	r3, #112	@ 0x70
 80027e4:	d01a      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xaa>
 80027e6:	2b70      	cmp	r3, #112	@ 0x70
 80027e8:	d87b      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 80027ea:	2b60      	cmp	r3, #96	@ 0x60
 80027ec:	d050      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0x11e>
 80027ee:	2b60      	cmp	r3, #96	@ 0x60
 80027f0:	d877      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 80027f2:	2b50      	cmp	r3, #80	@ 0x50
 80027f4:	d03c      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0xfe>
 80027f6:	2b50      	cmp	r3, #80	@ 0x50
 80027f8:	d873      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 80027fa:	2b40      	cmp	r3, #64	@ 0x40
 80027fc:	d058      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0x13e>
 80027fe:	2b40      	cmp	r3, #64	@ 0x40
 8002800:	d86f      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 8002802:	2b30      	cmp	r3, #48	@ 0x30
 8002804:	d064      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x15e>
 8002806:	2b30      	cmp	r3, #48	@ 0x30
 8002808:	d86b      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d060      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x15e>
 800280e:	2b20      	cmp	r3, #32
 8002810:	d867      	bhi.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d05c      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x15e>
 8002816:	2b10      	cmp	r3, #16
 8002818:	d05a      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x15e>
 800281a:	e062      	b.n	80028e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	f000 f9b4 	bl	8002b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800283e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
      break;
 8002848:	e04f      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	f000 f99d 	bl	8002b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800286c:	609a      	str	r2, [r3, #8]
      break;
 800286e:	e03c      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287c:	461a      	mov	r2, r3
 800287e:	f000 f90f 	bl	8002aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2150      	movs	r1, #80	@ 0x50
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f968 	bl	8002b5e <TIM_ITRx_SetConfig>
      break;
 800288e:	e02c      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800289c:	461a      	mov	r2, r3
 800289e:	f000 f92e 	bl	8002afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2160      	movs	r1, #96	@ 0x60
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f958 	bl	8002b5e <TIM_ITRx_SetConfig>
      break;
 80028ae:	e01c      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028bc:	461a      	mov	r2, r3
 80028be:	f000 f8ef 	bl	8002aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2140      	movs	r1, #64	@ 0x40
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f948 	bl	8002b5e <TIM_ITRx_SetConfig>
      break;
 80028ce:	e00c      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 f93f 	bl	8002b5e <TIM_ITRx_SetConfig>
      break;
 80028e0:	e003      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80028e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a46      	ldr	r2, [pc, #280]	@ (8002a80 <TIM_Base_SetConfig+0x12c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <TIM_Base_SetConfig+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a43      	ldr	r2, [pc, #268]	@ (8002a84 <TIM_Base_SetConfig+0x130>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a42      	ldr	r2, [pc, #264]	@ (8002a88 <TIM_Base_SetConfig+0x134>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a41      	ldr	r2, [pc, #260]	@ (8002a8c <TIM_Base_SetConfig+0x138>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a40      	ldr	r2, [pc, #256]	@ (8002a90 <TIM_Base_SetConfig+0x13c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a35      	ldr	r2, [pc, #212]	@ (8002a80 <TIM_Base_SetConfig+0x12c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b4:	d01b      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <TIM_Base_SetConfig+0x130>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d017      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a31      	ldr	r2, [pc, #196]	@ (8002a88 <TIM_Base_SetConfig+0x134>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <TIM_Base_SetConfig+0x138>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00f      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <TIM_Base_SetConfig+0x13c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00b      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002a94 <TIM_Base_SetConfig+0x140>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <TIM_Base_SetConfig+0x144>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <TIM_Base_SetConfig+0x9a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <TIM_Base_SetConfig+0x148>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <TIM_Base_SetConfig+0x12c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00f      	beq.n	8002a4c <TIM_Base_SetConfig+0xf8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	@ (8002a90 <TIM_Base_SetConfig+0x13c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_Base_SetConfig+0xf8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a17      	ldr	r2, [pc, #92]	@ (8002a94 <TIM_Base_SetConfig+0x140>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_Base_SetConfig+0xf8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <TIM_Base_SetConfig+0x144>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_Base_SetConfig+0xf8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a15      	ldr	r2, [pc, #84]	@ (8002a9c <TIM_Base_SetConfig+0x148>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]
  }
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40013400 	.word	0x40013400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f023 0201 	bic.w	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 030a 	bic.w	r3, r3, #10
 8002adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	621a      	str	r2, [r3, #32]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f023 0210 	bic.w	r2, r3, #16
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f043 0307 	orr.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e068      	b.n	8002cc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002c2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01d      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c62:	d018      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	@ (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10c      	bne.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00
 8002cd4:	40013400 	.word	0x40013400
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	40014000 	.word	0x40014000

08002ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <memset>:
 8002d24:	4402      	add	r2, r0
 8002d26:	4603      	mov	r3, r0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <memset+0xa>
 8002d2c:	4770      	bx	lr
 8002d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d32:	e7f9      	b.n	8002d28 <memset+0x4>

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4d0d      	ldr	r5, [pc, #52]	@ (8002d6c <__libc_init_array+0x38>)
 8002d38:	2600      	movs	r6, #0
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002d70 <__libc_init_array+0x3c>)
 8002d3c:	1b64      	subs	r4, r4, r5
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	42a6      	cmp	r6, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	4d0b      	ldr	r5, [pc, #44]	@ (8002d74 <__libc_init_array+0x40>)
 8002d46:	2600      	movs	r6, #0
 8002d48:	4c0b      	ldr	r4, [pc, #44]	@ (8002d78 <__libc_init_array+0x44>)
 8002d4a:	f000 f817 	bl	8002d7c <_init>
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	42a6      	cmp	r6, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	4798      	blx	r3
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d66:	3601      	adds	r6, #1
 8002d68:	4798      	blx	r3
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08002de4 	.word	0x08002de4
 8002d70:	08002de4 	.word	0x08002de4
 8002d74:	08002de4 	.word	0x08002de4
 8002d78:	08002de8 	.word	0x08002de8

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
