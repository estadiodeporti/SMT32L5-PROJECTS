
Dia 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006310  08006310  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006310  08006310  00007310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006318  08006318  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006318  08006318  00007318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800631c  0800631c  0000731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006320  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  0800637c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800637c  000082c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121e5  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002582  00000000  00000000  0001a277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9b  00000000  00000000  0001d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad27  00000000  00000000  0001e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121c2  00000000  00000000  00048fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011654d  00000000  00000000  0005b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001716f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  00171734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00175c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000005c 	.word	0x2000005c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800622c 	.word	0x0800622c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000060 	.word	0x20000060
 8000230:	0800622c 	.word	0x0800622c

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b97e 	b.w	8000558 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xa8>
 8000280:	428a      	cmp	r2, r1
 8000282:	460f      	mov	r7, r1
 8000284:	4684      	mov	ip, r0
 8000286:	4696      	mov	lr, r2
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	d960      	bls.n	8000350 <__udivmoddi4+0xdc>
 800028e:	b14b      	cbz	r3, 80002a4 <__udivmoddi4+0x30>
 8000290:	fa02 fe03 	lsl.w	lr, r2, r3
 8000294:	f1c3 0220 	rsb	r2, r3, #32
 8000298:	409f      	lsls	r7, r3
 800029a:	fa00 fc03 	lsl.w	ip, r0, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002a8:	fa1f f48e 	uxth.w	r4, lr
 80002ac:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002b0:	fbb7 f1f6 	udiv	r1, r7, r6
 80002b4:	fb06 7711 	mls	r7, r6, r1, r7
 80002b8:	fb01 f004 	mul.w	r0, r1, r4
 80002bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x62>
 80002c4:	eb1e 0202 	adds.w	r2, lr, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x60>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f200 812d 	bhi.w	800052e <__udivmoddi4+0x2ba>
 80002d4:	4639      	mov	r1, r7
 80002d6:	1a12      	subs	r2, r2, r0
 80002d8:	fa1f fc8c 	uxth.w	ip, ip
 80002dc:	fbb2 f0f6 	udiv	r0, r2, r6
 80002e0:	fb06 2210 	mls	r2, r6, r0, r2
 80002e4:	fb00 f404 	mul.w	r4, r0, r4
 80002e8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002ec:	4564      	cmp	r4, ip
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002f0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x8c>
 80002fa:	4564      	cmp	r4, ip
 80002fc:	f200 811a 	bhi.w	8000534 <__udivmoddi4+0x2c0>
 8000300:	4610      	mov	r0, r2
 8000302:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000306:	ebac 0c04 	sub.w	ip, ip, r4
 800030a:	2100      	movs	r1, #0
 800030c:	b125      	cbz	r5, 8000318 <__udivmoddi4+0xa4>
 800030e:	fa2c f303 	lsr.w	r3, ip, r3
 8000312:	2200      	movs	r2, #0
 8000314:	e9c5 3200 	strd	r3, r2, [r5]
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d905      	bls.n	800032c <__udivmoddi4+0xb8>
 8000320:	b10d      	cbz	r5, 8000326 <__udivmoddi4+0xb2>
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	2100      	movs	r1, #0
 8000328:	4608      	mov	r0, r1
 800032a:	e7f5      	b.n	8000318 <__udivmoddi4+0xa4>
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d14d      	bne.n	80003d0 <__udivmoddi4+0x15c>
 8000334:	42a3      	cmp	r3, r4
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4290      	cmp	r0, r2
 800033c:	f080 80ef 	bcs.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4606      	mov	r6, r0
 8000342:	4623      	mov	r3, r4
 8000344:	4608      	mov	r0, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e6      	beq.n	8000318 <__udivmoddi4+0xa4>
 800034a:	e9c5 6300 	strd	r6, r3, [r5]
 800034e:	e7e3      	b.n	8000318 <__udivmoddi4+0xa4>
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 80a2 	bne.w	800049a <__udivmoddi4+0x226>
 8000356:	1a8a      	subs	r2, r1, r2
 8000358:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800035c:	fa1f f68e 	uxth.w	r6, lr
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 f4f7 	udiv	r4, r2, r7
 8000366:	fb07 2014 	mls	r0, r7, r4, r2
 800036a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb06 f004 	mul.w	r0, r6, r4
 8000376:	4290      	cmp	r0, r2
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1e 0202 	adds.w	r2, lr, r2
 800037e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4290      	cmp	r0, r2
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80c8 	beq.w	8000528 <__udivmoddi4+0x2b4>
 8000398:	4644      	mov	r4, r8
 800039a:	1a12      	subs	r2, r2, r0
 800039c:	fa1f fc8c 	uxth.w	ip, ip
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	fb00 f606 	mul.w	r6, r0, r6
 80003ac:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003b0:	4566      	cmp	r6, ip
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x152>
 80003b4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x150>
 80003be:	4566      	cmp	r6, ip
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c6>
 80003c4:	4610      	mov	r0, r2
 80003c6:	ebac 0c06 	sub.w	ip, ip, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	e79d      	b.n	800030c <__udivmoddi4+0x98>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa04 fe01 	lsl.w	lr, r4, r1
 80003da:	fa22 f706 	lsr.w	r7, r2, r6
 80003de:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e2:	40f4      	lsrs	r4, r6
 80003e4:	408a      	lsls	r2, r1
 80003e6:	431f      	orrs	r7, r3
 80003e8:	ea4e 030c 	orr.w	r3, lr, ip
 80003ec:	fa00 fe01 	lsl.w	lr, r0, r1
 80003f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000400:	fb08 4410 	mls	r4, r8, r0, r4
 8000404:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000408:	fb00 f90c 	mul.w	r9, r0, ip
 800040c:	45a1      	cmp	r9, r4
 800040e:	d90e      	bls.n	800042e <__udivmoddi4+0x1ba>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f100 3aff 	add.w	sl, r0, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	f04f 0b01 	movcs.w	fp, #1
 800041c:	f04f 0b00 	movcc.w	fp, #0
 8000420:	45a1      	cmp	r9, r4
 8000422:	d903      	bls.n	800042c <__udivmoddi4+0x1b8>
 8000424:	f1bb 0f00 	cmp.w	fp, #0
 8000428:	f000 8093 	beq.w	8000552 <__udivmoddi4+0x2de>
 800042c:	4650      	mov	r0, sl
 800042e:	eba4 0409 	sub.w	r4, r4, r9
 8000432:	fa1f f983 	uxth.w	r9, r3
 8000436:	fbb4 f3f8 	udiv	r3, r4, r8
 800043a:	fb08 4413 	mls	r4, r8, r3, r4
 800043e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	45a4      	cmp	ip, r4
 8000448:	d906      	bls.n	8000458 <__udivmoddi4+0x1e4>
 800044a:	193c      	adds	r4, r7, r4
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d201      	bcs.n	8000456 <__udivmoddi4+0x1e2>
 8000452:	45a4      	cmp	ip, r4
 8000454:	d87a      	bhi.n	800054c <__udivmoddi4+0x2d8>
 8000456:	4643      	mov	r3, r8
 8000458:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800045c:	eba4 040c 	sub.w	r4, r4, ip
 8000460:	fba0 9802 	umull	r9, r8, r0, r2
 8000464:	4544      	cmp	r4, r8
 8000466:	46cc      	mov	ip, r9
 8000468:	4643      	mov	r3, r8
 800046a:	d302      	bcc.n	8000472 <__udivmoddi4+0x1fe>
 800046c:	d106      	bne.n	800047c <__udivmoddi4+0x208>
 800046e:	45ce      	cmp	lr, r9
 8000470:	d204      	bcs.n	800047c <__udivmoddi4+0x208>
 8000472:	3801      	subs	r0, #1
 8000474:	ebb9 0c02 	subs.w	ip, r9, r2
 8000478:	eb68 0307 	sbc.w	r3, r8, r7
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x222>
 800047e:	ebbe 020c 	subs.w	r2, lr, ip
 8000482:	eb64 0403 	sbc.w	r4, r4, r3
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	fa22 f301 	lsr.w	r3, r2, r1
 800048e:	40cc      	lsrs	r4, r1
 8000490:	431e      	orrs	r6, r3
 8000492:	e9c5 6400 	strd	r6, r4, [r5]
 8000496:	2100      	movs	r1, #0
 8000498:	e73e      	b.n	8000318 <__udivmoddi4+0xa4>
 800049a:	fa02 fe03 	lsl.w	lr, r2, r3
 800049e:	f1c3 0120 	rsb	r1, r3, #32
 80004a2:	fa04 f203 	lsl.w	r2, r4, r3
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004b0:	fa20 f101 	lsr.w	r1, r0, r1
 80004b4:	fa1f f68e 	uxth.w	r6, lr
 80004b8:	fbb4 f0f7 	udiv	r0, r4, r7
 80004bc:	430a      	orrs	r2, r1
 80004be:	fb07 4410 	mls	r4, r7, r0, r4
 80004c2:	0c11      	lsrs	r1, r2, #16
 80004c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004c8:	fb00 f406 	mul.w	r4, r0, r6
 80004cc:	428c      	cmp	r4, r1
 80004ce:	d90e      	bls.n	80004ee <__udivmoddi4+0x27a>
 80004d0:	eb1e 0101 	adds.w	r1, lr, r1
 80004d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d8:	bf2c      	ite	cs
 80004da:	f04f 0901 	movcs.w	r9, #1
 80004de:	f04f 0900 	movcc.w	r9, #0
 80004e2:	428c      	cmp	r4, r1
 80004e4:	d902      	bls.n	80004ec <__udivmoddi4+0x278>
 80004e6:	f1b9 0f00 	cmp.w	r9, #0
 80004ea:	d02c      	beq.n	8000546 <__udivmoddi4+0x2d2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	1b09      	subs	r1, r1, r4
 80004f0:	b292      	uxth	r2, r2
 80004f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80004f6:	fb07 1114 	mls	r1, r7, r4, r1
 80004fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fe:	fb04 f106 	mul.w	r1, r4, r6
 8000502:	4291      	cmp	r1, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x2a2>
 8000506:	eb1e 0202 	adds.w	r2, lr, r2
 800050a:	f104 38ff 	add.w	r8, r4, #4294967295
 800050e:	d201      	bcs.n	8000514 <__udivmoddi4+0x2a0>
 8000510:	4291      	cmp	r1, r2
 8000512:	d815      	bhi.n	8000540 <__udivmoddi4+0x2cc>
 8000514:	4644      	mov	r4, r8
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800051c:	e721      	b.n	8000362 <__udivmoddi4+0xee>
 800051e:	1a86      	subs	r6, r0, r2
 8000520:	eb64 0303 	sbc.w	r3, r4, r3
 8000524:	2001      	movs	r0, #1
 8000526:	e70e      	b.n	8000346 <__udivmoddi4+0xd2>
 8000528:	3c02      	subs	r4, #2
 800052a:	4472      	add	r2, lr
 800052c:	e735      	b.n	800039a <__udivmoddi4+0x126>
 800052e:	3902      	subs	r1, #2
 8000530:	4472      	add	r2, lr
 8000532:	e6d0      	b.n	80002d6 <__udivmoddi4+0x62>
 8000534:	44f4      	add	ip, lr
 8000536:	3802      	subs	r0, #2
 8000538:	e6e3      	b.n	8000302 <__udivmoddi4+0x8e>
 800053a:	44f4      	add	ip, lr
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x152>
 8000540:	3c02      	subs	r4, #2
 8000542:	4472      	add	r2, lr
 8000544:	e7e7      	b.n	8000516 <__udivmoddi4+0x2a2>
 8000546:	3802      	subs	r0, #2
 8000548:	4471      	add	r1, lr
 800054a:	e7d0      	b.n	80004ee <__udivmoddi4+0x27a>
 800054c:	3b02      	subs	r3, #2
 800054e:	443c      	add	r4, r7
 8000550:	e782      	b.n	8000458 <__udivmoddi4+0x1e4>
 8000552:	3802      	subs	r0, #2
 8000554:	443c      	add	r4, r7
 8000556:	e76a      	b.n	800042e <__udivmoddi4+0x1ba>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fe32 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f853 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f97d 	bl	8000868 <MX_GPIO_Init>
  MX_ADC1_Init();
 800056e:	f000 f8a5 	bl	80006bc <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000572:	f000 f919 	bl	80007a8 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8000576:	f000 f92b 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t valor_del_adc = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	83fb      	strh	r3, [r7, #30]
  char msg[30];
  //float voltaje = 0.0f;

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	481e      	ldr	r0, [pc, #120]	@ (80005fc <main+0xa0>)
 8000584:	f002 fcda 	bl	8002f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058e:	481c      	ldr	r0, [pc, #112]	@ (8000600 <main+0xa4>)
 8000590:	f002 fcd4 	bl	8002f3c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


		  HAL_ADC_Start(&hadc1);
 8000594:	481b      	ldr	r0, [pc, #108]	@ (8000604 <main+0xa8>)
 8000596:	f001 fa43 	bl	8001a20 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800059a:	f04f 31ff 	mov.w	r1, #4294967295
 800059e:	4819      	ldr	r0, [pc, #100]	@ (8000604 <main+0xa8>)
 80005a0:	f001 fb2c 	bl	8001bfc <HAL_ADC_PollForConversion>
		  valor_del_adc = HAL_ADC_GetValue(&hadc1);
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <main+0xa8>)
 80005a6:	f001 fc01 	bl	8001dac <HAL_ADC_GetValue>
 80005aa:	4603      	mov	r3, r0
 80005ac:	83fb      	strh	r3, [r7, #30]
		  HAL_ADC_Stop(&hadc1);
 80005ae:	4815      	ldr	r0, [pc, #84]	@ (8000604 <main+0xa8>)
 80005b0:	f001 faf0 	bl	8001b94 <HAL_ADC_Stop>

		  //voltaje = (valor_del_adc/4095.f)*3.3f;

		  sprintf(msg, "Valor del adc: %u \r \n", valor_del_adc);
 80005b4:	8bfa      	ldrh	r2, [r7, #30]
 80005b6:	463b      	mov	r3, r7
 80005b8:	4913      	ldr	r1, [pc, #76]	@ (8000608 <main+0xac>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 f984 	bl	80058c8 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe36 	bl	8000234 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4639      	mov	r1, r7
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	480e      	ldr	r0, [pc, #56]	@ (800060c <main+0xb0>)
 80005d4:	f004 fac8 	bl	8004b68 <HAL_UART_Transmit>

		  HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005dc:	f000 fe6c 	bl	80012b8 <HAL_Delay>

		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2108      	movs	r1, #8
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <main+0xa0>)
 80005e6:	f002 fca9 	bl	8002f3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <main+0xa4>)
 80005f2:	f002 fca3 	bl	8002f3c <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 80005f6:	bf00      	nop
 80005f8:	e7cc      	b.n	8000594 <main+0x38>
 80005fa:	bf00      	nop
 80005fc:	42020c00 	.word	0x42020c00
 8000600:	42021800 	.word	0x42021800
 8000604:	20000078 	.word	0x20000078
 8000608:	08006244 	.word	0x08006244
 800060c:	200000e0 	.word	0x200000e0

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b098      	sub	sp, #96	@ 0x60
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2248      	movs	r2, #72	@ 0x48
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 f972 	bl	8005908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f002 fcd8 	bl	8002fe8 <HAL_PWREx_ControlVoltageScaling>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800063e:	f000 fb83 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000642:	2312      	movs	r3, #18
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000658:	23b0      	movs	r3, #176	@ 0xb0
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	2301      	movs	r3, #1
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000664:	230c      	movs	r3, #12
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000668:	2337      	movs	r3, #55	@ 0x37
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fd53 	bl	8003128 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000688:	f000 fb5e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fa15 	bl	8003ad4 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006b0:	f000 fb4a 	bl	8000d48 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3760      	adds	r7, #96	@ 0x60
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006de:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006e0:	4a2f      	ldr	r2, [pc, #188]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_ADC1_Init+0xe0>)
 80006fe:	2204      	movs	r2, #4
 8000700:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000708:	4b24      	ldr	r3, [pc, #144]	@ (800079c <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000710:	2201      	movs	r2, #1
 8000712:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b21      	ldr	r3, [pc, #132]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_ADC1_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000722:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000732:	2200      	movs	r2, #0
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073e:	4817      	ldr	r0, [pc, #92]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000740:	f001 f822 	bl	8001788 <HAL_ADC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800074a:	f000 fafd 	bl	8000d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4810      	ldr	r0, [pc, #64]	@ (800079c <MX_ADC1_Init+0xe0>)
 800075a:	f002 f8e7 	bl	800292c <HAL_ADCEx_MultiModeConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000764:	f000 faf0 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_ADC1_Init+0xe8>)
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076c:	2306      	movs	r3, #6
 800076e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000774:	237f      	movs	r3, #127	@ 0x7f
 8000776:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000778:	2304      	movs	r3, #4
 800077a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC1_Init+0xe0>)
 8000786:	f001 fb1f 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000790:	f000 fada 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000078 	.word	0x20000078
 80007a0:	42028000 	.word	0x42028000
 80007a4:	14f00020 	.word	0x14f00020

080007a8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007ac:	2000      	movs	r0, #0
 80007ae:	f002 fbdd 	bl	8002f6c <HAL_ICACHE_ConfigAssociativityMode>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007b8:	f000 fac6 	bl	8000d48 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007bc:	f002 fbf6 	bl	8002fac <HAL_ICACHE_Enable>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007c6:	f000 fabf 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <MX_USART1_UART_Init+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 800081a:	f004 f955 	bl	8004ac8 <HAL_UART_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 fa90 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 800082c:	f004 ff82 	bl	8005734 <HAL_UARTEx_SetTxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 fa87 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 800083e:	f004 ffb7 	bl	80057b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 fa7e 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_USART1_UART_Init+0x90>)
 800084e:	f004 ff38 	bl	80056c2 <HAL_UARTEx_DisableFifoMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 fa76 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000e0 	.word	0x200000e0
 8000864:	40013800 	.word	0x40013800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	@ 0x38
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	4bb3      	ldr	r3, [pc, #716]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4ab2      	ldr	r2, [pc, #712]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4bb0      	ldr	r3, [pc, #704]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4bad      	ldr	r3, [pc, #692]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4aac      	ldr	r2, [pc, #688]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4baa      	ldr	r3, [pc, #680]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4ba7      	ldr	r3, [pc, #668]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4aa6      	ldr	r2, [pc, #664]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4ba4      	ldr	r3, [pc, #656]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 80008c6:	f002 fbeb 	bl	80030a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4ba0      	ldr	r3, [pc, #640]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a9f      	ldr	r2, [pc, #636]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b9d      	ldr	r3, [pc, #628]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b9a      	ldr	r3, [pc, #616]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a99      	ldr	r2, [pc, #612]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b97      	ldr	r3, [pc, #604]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b94      	ldr	r3, [pc, #592]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a93      	ldr	r2, [pc, #588]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b91      	ldr	r3, [pc, #580]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b8e      	ldr	r3, [pc, #568]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a8d      	ldr	r2, [pc, #564]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b8b      	ldr	r3, [pc, #556]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b88      	ldr	r3, [pc, #544]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a87      	ldr	r2, [pc, #540]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b85      	ldr	r3, [pc, #532]	@ (8000b4c <MX_GPIO_Init+0x2e4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f241 1102 	movw	r1, #4354	@ 0x1102
 8000948:	4881      	ldr	r0, [pc, #516]	@ (8000b50 <MX_GPIO_Init+0x2e8>)
 800094a:	f002 faf7 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4880      	ldr	r0, [pc, #512]	@ (8000b54 <MX_GPIO_Init+0x2ec>)
 8000954:	f002 faf2 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2120      	movs	r1, #32
 800095c:	487e      	ldr	r0, [pc, #504]	@ (8000b58 <MX_GPIO_Init+0x2f0>)
 800095e:	f002 faed 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000968:	487c      	ldr	r0, [pc, #496]	@ (8000b5c <MX_GPIO_Init+0x2f4>)
 800096a:	f002 fae7 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	487b      	ldr	r0, [pc, #492]	@ (8000b60 <MX_GPIO_Init+0x2f8>)
 8000974:	f002 fae2 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 4158 	mov.w	r1, #55296	@ 0xd800
 800097e:	4879      	ldr	r0, [pc, #484]	@ (8000b64 <MX_GPIO_Init+0x2fc>)
 8000980:	f002 fadc 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE3 PE4 PE2
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8000984:	237c      	movs	r3, #124	@ 0x7c
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000994:	230d      	movs	r3, #13
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4872      	ldr	r0, [pc, #456]	@ (8000b68 <MX_GPIO_Init+0x300>)
 80009a0:	f002 f94c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_PWM_Pin */
  GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80009b4:	230e      	movs	r3, #14
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	486a      	ldr	r0, [pc, #424]	@ (8000b68 <MX_GPIO_Init+0x300>)
 80009c0:	f002 f93c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c4:	23c0      	movs	r3, #192	@ 0xc0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	485e      	ldr	r0, [pc, #376]	@ (8000b58 <MX_GPIO_Init+0x2f0>)
 80009e0:	f002 f92c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 80009e4:	f241 1302 	movw	r3, #4354	@ 0x1102
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4854      	ldr	r0, [pc, #336]	@ (8000b50 <MX_GPIO_Init+0x2e8>)
 80009fe:	f002 f91d 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD1 PD0
                           PD7 PD14 PD15 PD9
                           PD8 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8000a02:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a14:	230c      	movs	r3, #12
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	484d      	ldr	r0, [pc, #308]	@ (8000b54 <MX_GPIO_Init+0x2ec>)
 8000a20:	f002 f90c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a34:	230c      	movs	r3, #12
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4845      	ldr	r0, [pc, #276]	@ (8000b54 <MX_GPIO_Init+0x2ec>)
 8000a40:	f002 f8fc 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 8000a44:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a56:	230c      	movs	r3, #12
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4842      	ldr	r0, [pc, #264]	@ (8000b6c <MX_GPIO_Init+0x304>)
 8000a62:	f002 f8eb 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4838      	ldr	r0, [pc, #224]	@ (8000b5c <MX_GPIO_Init+0x2f4>)
 8000a7c:	f002 f8de 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000a80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a92:	230a      	movs	r3, #10
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	482f      	ldr	r0, [pc, #188]	@ (8000b5c <MX_GPIO_Init+0x2f4>)
 8000a9e:	f002 f8cd 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482c      	ldr	r0, [pc, #176]	@ (8000b6c <MX_GPIO_Init+0x304>)
 8000aba:	f002 f8bf 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481f      	ldr	r0, [pc, #124]	@ (8000b54 <MX_GPIO_Init+0x2ec>)
 8000ad6:	f002 f8b1 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ada:	2301      	movs	r3, #1
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aea:	230c      	movs	r3, #12
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	481b      	ldr	r0, [pc, #108]	@ (8000b64 <MX_GPIO_Init+0x2fc>)
 8000af6:	f002 f8a1 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8000afa:	230e      	movs	r3, #14
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4815      	ldr	r0, [pc, #84]	@ (8000b64 <MX_GPIO_Init+0x2fc>)
 8000b10:	f002 f894 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <MX_GPIO_Init+0x2f0>)
 8000b2c:	f002 f886 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8000b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	e012      	b.n	8000b70 <MX_GPIO_Init+0x308>
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	42021800 	.word	0x42021800
 8000b54:	42020c00 	.word	0x42020c00
 8000b58:	42020400 	.word	0x42020400
 8000b5c:	42020000 	.word	0x42020000
 8000b60:	42021c00 	.word	0x42021c00
 8000b64:	42021400 	.word	0x42021400
 8000b68:	42021000 	.word	0x42021000
 8000b6c:	42020800 	.word	0x42020800
 8000b70:	486e      	ldr	r0, [pc, #440]	@ (8000d2c <MX_GPIO_Init+0x4c4>)
 8000b72:	f002 f863 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4868      	ldr	r0, [pc, #416]	@ (8000d30 <MX_GPIO_Init+0x4c8>)
 8000b8e:	f002 f855 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8000b92:	230e      	movs	r3, #14
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4861      	ldr	r0, [pc, #388]	@ (8000d34 <MX_GPIO_Init+0x4cc>)
 8000bae:	f002 f845 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000bb2:	2340      	movs	r3, #64	@ 0x40
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	485c      	ldr	r0, [pc, #368]	@ (8000d38 <MX_GPIO_Init+0x4d0>)
 8000bc8:	f002 f838 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4854      	ldr	r0, [pc, #336]	@ (8000d38 <MX_GPIO_Init+0x4d0>)
 8000be8:	f002 f828 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG2 PG3 BLE_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 8000bec:	233c      	movs	r3, #60	@ 0x3c
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	484c      	ldr	r0, [pc, #304]	@ (8000d38 <MX_GPIO_Init+0x4d0>)
 8000c08:	f002 f818 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4843      	ldr	r0, [pc, #268]	@ (8000d34 <MX_GPIO_Init+0x4cc>)
 8000c28:	f002 f808 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8000c2c:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	483d      	ldr	r0, [pc, #244]	@ (8000d3c <MX_GPIO_Init+0x4d4>)
 8000c46:	f001 fff9 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 PE7
                           PE14 PE11 PE15 PE9
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8000c4a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4836      	ldr	r0, [pc, #216]	@ (8000d40 <MX_GPIO_Init+0x4d8>)
 8000c68:	f001 ffe8 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8000c6c:	23cc      	movs	r3, #204	@ 0xcc
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4829      	ldr	r0, [pc, #164]	@ (8000d2c <MX_GPIO_Init+0x4c4>)
 8000c88:	f001 ffd8 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4827      	ldr	r0, [pc, #156]	@ (8000d44 <MX_GPIO_Init+0x4dc>)
 8000ca8:	f001 ffc8 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481e      	ldr	r0, [pc, #120]	@ (8000d44 <MX_GPIO_Init+0x4dc>)
 8000cca:	f001 ffb7 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000cce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4818      	ldr	r0, [pc, #96]	@ (8000d44 <MX_GPIO_Init+0x4dc>)
 8000ce4:	f001 ffaa 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_GPIO_Init+0x4dc>)
 8000cfe:	f001 ff9d 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <MX_GPIO_Init+0x4dc>)
 8000d20:	f001 ff8c 	bl	8002c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	42020000 	.word	0x42020000
 8000d30:	42021c00 	.word	0x42021c00
 8000d34:	42020800 	.word	0x42020800
 8000d38:	42021800 	.word	0x42021800
 8000d3c:	42021400 	.word	0x42021400
 8000d40:	42021000 	.word	0x42021000
 8000d44:	42020400 	.word	0x42020400

08000d48 <Error_Handler>:

}


void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d8a:	f002 f999 	bl	80030c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2294      	movs	r2, #148	@ 0x94
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 fda3 	bl	8005908 <memset>
  if(hadc->Instance==ADC1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <HAL_ADC_MspInit+0xc8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d146      	bne.n	8000e5a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000dde:	2304      	movs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000de2:	2330      	movs	r3, #48	@ 0x30
 8000de4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000de6:	2311      	movs	r3, #17
 8000de8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000df2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 f94d 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e08:	f7ff ff9e 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a15      	ldr	r2, [pc, #84]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e30:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_ADC_MspInit+0xcc>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|VBUS_SENSE_Pin;
 8000e3c:	2311      	movs	r3, #17
 8000e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <HAL_ADC_MspInit+0xd0>)
 8000e56:	f001 fef1 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e5a:	bf00      	nop
 8000e5c:	37b8      	adds	r7, #184	@ 0xb8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	42028000 	.word	0x42028000
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	42020000 	.word	0x42020000

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ae      	sub	sp, #184	@ 0xb8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2294      	movs	r2, #148	@ 0x94
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fd39 	bl	8005908 <memset>
  if(huart->Instance==USART1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <HAL_UART_MspInit+0xb0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13b      	bne.n	8000f18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f8f5 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff ff46 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec0:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000eec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f06:	2307      	movs	r3, #7
 8000f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000f14:	f001 fe92 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	37b8      	adds	r7, #184	@ 0xb8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42020000 	.word	0x42020000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f979 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f004 fcac 	bl	8005918 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20030000 	.word	0x20030000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000174 	.word	0x20000174
 8000ff4:	200002c8 	.word	0x200002c8

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001022:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d107      	bne.n	800103e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800102e:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e005      	b.n	800104a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800104a:	4a46      	ldr	r2, [pc, #280]	@ (8001164 <SystemCoreClockUpdate+0x148>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d866      	bhi.n	800112e <SystemCoreClockUpdate+0x112>
 8001060:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <SystemCoreClockUpdate+0x4c>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800109d 	.word	0x0800109d
 800106c:	0800112f 	.word	0x0800112f
 8001070:	0800112f 	.word	0x0800112f
 8001074:	0800112f 	.word	0x0800112f
 8001078:	080010a5 	.word	0x080010a5
 800107c:	0800112f 	.word	0x0800112f
 8001080:	0800112f 	.word	0x0800112f
 8001084:	0800112f 	.word	0x0800112f
 8001088:	080010ad 	.word	0x080010ad
 800108c:	0800112f 	.word	0x0800112f
 8001090:	0800112f 	.word	0x0800112f
 8001094:	0800112f 	.word	0x0800112f
 8001098:	080010b5 	.word	0x080010b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800109c:	4a32      	ldr	r2, [pc, #200]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	6013      	str	r3, [r2, #0]
      break;
 80010a2:	e048      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 80010a6:	4a31      	ldr	r2, [pc, #196]	@ (800116c <SystemCoreClockUpdate+0x150>)
 80010a8:	601a      	str	r2, [r3, #0]
      break;
 80010aa:	e044      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 80010ae:	4a30      	ldr	r2, [pc, #192]	@ (8001170 <SystemCoreClockUpdate+0x154>)
 80010b0:	601a      	str	r2, [r3, #0]
      break;
 80010b2:	e040      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80010be:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	3301      	adds	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d003      	beq.n	80010da <SystemCoreClockUpdate+0xbe>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d006      	beq.n	80010e6 <SystemCoreClockUpdate+0xca>
 80010d8:	e00b      	b.n	80010f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80010da:	4a24      	ldr	r2, [pc, #144]	@ (800116c <SystemCoreClockUpdate+0x150>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	613b      	str	r3, [r7, #16]
          break;
 80010e4:	e00b      	b.n	80010fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80010e6:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <SystemCoreClockUpdate+0x154>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	613b      	str	r3, [r7, #16]
          break;
 80010f0:	e005      	b.n	80010fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	613b      	str	r3, [r7, #16]
          break;
 80010fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0e5b      	lsrs	r3, r3, #25
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	3301      	adds	r3, #1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 800112a:	6013      	str	r3, [r2, #0]
      break;
 800112c:	e003      	b.n	8001136 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	6013      	str	r3, [r2, #0]
      break;
 8001134:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <SystemCoreClockUpdate+0x144>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <SystemCoreClockUpdate+0x158>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemCoreClockUpdate+0x14c>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000
 8001164:	08006274 	.word	0x08006274
 8001168:	20000000 	.word	0x20000000
 800116c:	00f42400 	.word	0x00f42400
 8001170:	007a1200 	.word	0x007a1200
 8001174:	0800625c 	.word	0x0800625c

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800117c:	f7ff ff3c 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001180:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001182:	e003      	b.n	800118c <LoopCopyDataInit>

08001184 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001186:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001188:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800118a:	3104      	adds	r1, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001190:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001192:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001194:	d3f6      	bcc.n	8001184 <CopyDataInit>
	ldr	r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001198:	e002      	b.n	80011a0 <LoopFillZerobss>

0800119a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800119a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800119c:	f842 3b04 	str.w	r3, [r2], #4

080011a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <LoopForever+0x16>)
	cmp	r2, r3
 80011a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a4:	d3f9      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011a6:	f004 fbbd 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff f9d7 	bl	800055c <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80011b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80011b4:	08006320 	.word	0x08006320
	ldr	r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011bc:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80011c0:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80011c4:	200002c4 	.word	0x200002c4

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>

080011ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f001 fcff 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80011da:	f7ff ff1f 	bl	800101c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f80e 	bl	8001200 <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f0:	f7ff fdb0 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HAL_InitTick+0x70>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fcf9 	bl	8002c22 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b07      	cmp	r3, #7
 800123a:	d809      	bhi.n	8001250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f001 fcd3 	bl	8002bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <HAL_InitTick+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e007      	b.n	8001260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e001      	b.n	8001260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000178 	.word	0x20000178

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000178 	.word	0x20000178

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	@ 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <LL_ADC_SetOffset+0x44>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	03fff000 	.word	0x03fff000

080013b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3360      	adds	r3, #96	@ 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	@ 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	615a      	str	r2, [r3, #20]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3330      	adds	r3, #48	@ 0x30
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	211f      	movs	r1, #31
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0e9b      	lsrs	r3, r3, #26
 8001496:	f003 011f 	and.w	r1, r3, #31
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3314      	adds	r3, #20
 80014c6:	461a      	mov	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	0e5b      	lsrs	r3, r3, #25
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	0d1b      	lsrs	r3, r3, #20
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2107      	movs	r1, #7
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	0d1b      	lsrs	r3, r3, #20
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001500:	bf00      	nop
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0318 	and.w	r3, r3, #24
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001530:	40d9      	lsrs	r1, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	400b      	ands	r3, r1
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	0007ffff 	.word	0x0007ffff

08001554 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6093      	str	r3, [r2, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001660:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <LL_ADC_IsEnabled+0x18>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <LL_ADC_IsEnabled+0x1a>
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_IsDisableOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_IsDisableOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016d8:	f043 0204 	orr.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001700:	f043 0210 	orr.w	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b04      	cmp	r3, #4
 8001726:	d101      	bne.n	800172c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800174a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d101      	bne.n	800177a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e12e      	b.n	8001a00 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff faf3 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fef1 	bl	80015b0 <LL_ADC_IsDeepPowerDownEnabled>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fed7 	bl	800158c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff0c 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fef0 	bl	80015d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f8:	4b83      	ldr	r3, [pc, #524]	@ (8001a08 <HAL_ADC_Init+0x280>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	4a83      	ldr	r2, [pc, #524]	@ (8001a0c <HAL_ADC_Init+0x284>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800180c:	e002      	b.n	8001814 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3b01      	subs	r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f9      	bne.n	800180e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff feee 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	f043 0210 	orr.w	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff62 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 8001850:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 80c7 	bne.w	80019ee <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80c3 	bne.w	80019ee <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fefb 	bl	8001678 <LL_ADC_IsEnabled>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d110      	bne.n	80018aa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001888:	4861      	ldr	r0, [pc, #388]	@ (8001a10 <HAL_ADC_Init+0x288>)
 800188a:	f7ff fef5 	bl	8001678 <LL_ADC_IsEnabled>
 800188e:	4604      	mov	r4, r0
 8001890:	4860      	ldr	r0, [pc, #384]	@ (8001a14 <HAL_ADC_Init+0x28c>)
 8001892:	f7ff fef1 	bl	8001678 <LL_ADC_IsEnabled>
 8001896:	4603      	mov	r3, r0
 8001898:	4323      	orrs	r3, r4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	485c      	ldr	r0, [pc, #368]	@ (8001a18 <HAL_ADC_Init+0x290>)
 80018a6:	f7ff fd2b 	bl	8001300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7e5b      	ldrb	r3, [r3, #25]
 80018ae:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018ba:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018c0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	3b01      	subs	r3, #1
 80018de:	045b      	lsls	r3, r3, #17
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f2:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <HAL_ADC_Init+0x294>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	430b      	orrs	r3, r1
 8001914:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff21 	bl	8001762 <LL_ADC_INJ_IsConversionOngoing>
 8001920:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d140      	bne.n	80019aa <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d13d      	bne.n	80019aa <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e1b      	ldrb	r3, [r3, #24]
 8001936:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001938:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001940:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001950:	f023 0306 	bic.w	r3, r3, #6
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	69b9      	ldr	r1, [r7, #24]
 800195a:	430b      	orrs	r3, r1
 800195c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001964:	2b01      	cmp	r3, #1
 8001966:	d118      	bne.n	800199a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800198a:	430a      	orrs	r2, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	e007      	b.n	80019aa <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10c      	bne.n	80019cc <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	f023 010f 	bic.w	r1, r3, #15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ca:	e007      	b.n	80019dc <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020f 	bic.w	r2, r2, #15
 80019da:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3724      	adds	r7, #36	@ 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	053e2d63 	.word	0x053e2d63
 8001a10:	42028000 	.word	0x42028000
 8001a14:	42028100 	.word	0x42028100
 8001a18:	42028300 	.word	0x42028300
 8001a1c:	fff0c007 	.word	0xfff0c007

08001a20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a28:	4857      	ldr	r0, [pc, #348]	@ (8001b88 <HAL_ADC_Start+0x168>)
 8001a2a:	f7ff fd93 	bl	8001554 <LL_ADC_GetMultimode>
 8001a2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe6d 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 809c 	bne.w	8001b7a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Start+0x30>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e097      	b.n	8001b80 <HAL_ADC_Start+0x160>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fe5b 	bl	8002714 <ADC_Enable>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8083 	bne.w	8001b70 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a42      	ldr	r2, [pc, #264]	@ (8001b8c <HAL_ADC_Start+0x16c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d002      	beq.n	8001a8e <HAL_ADC_Start+0x6e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e000      	b.n	8001a90 <HAL_ADC_Start+0x70>
 8001a8e:	4b40      	ldr	r3, [pc, #256]	@ (8001b90 <HAL_ADC_Start+0x170>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d002      	beq.n	8001a9e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	f023 0206 	bic.w	r2, r3, #6
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	221c      	movs	r2, #28
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b8c <HAL_ADC_Start+0x16c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d002      	beq.n	8001aec <HAL_ADC_Start+0xcc>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e000      	b.n	8001aee <HAL_ADC_Start+0xce>
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_ADC_Start+0x170>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d008      	beq.n	8001b08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d002      	beq.n	8001b08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d114      	bne.n	8001b32 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fdca 	bl	80016c4 <LL_ADC_REG_StartConversion>
 8001b30:	e025      	b.n	8001b7e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <HAL_ADC_Start+0x16c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Start+0x12e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_Start+0x130>
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_ADC_Start+0x170>)
 8001b50:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00f      	beq.n	8001b7e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b6e:	e006      	b.n	8001b7e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001b78:	e001      	b.n	8001b7e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	42028300 	.word	0x42028300
 8001b8c:	42028100 	.word	0x42028100
 8001b90:	42028000 	.word	0x42028000

08001b94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Stop+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e023      	b.n	8001bf2 <HAL_ADC_Stop+0x5e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fcf1 	bl	800259c <ADC_ConversionStop>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fe2b 	bl	8002820 <ADC_Disable>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c06:	4866      	ldr	r0, [pc, #408]	@ (8001da0 <HAL_ADC_PollForConversion+0x1a4>)
 8001c08:	f7ff fca4 	bl	8001554 <LL_ADC_GetMultimode>
 8001c0c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d102      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c16:	2308      	movs	r3, #8
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e02a      	b.n	8001c72 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d002      	beq.n	8001c2e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	d111      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0a4      	b.n	8001d96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c50:	e00f      	b.n	8001c72 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c52:	4853      	ldr	r0, [pc, #332]	@ (8001da0 <HAL_ADC_PollForConversion+0x1a4>)
 8001c54:	f7ff fc8c 	bl	8001570 <LL_ADC_GetMultiDMATransfer>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f043 0220 	orr.w	r2, r3, #32
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e093      	b.n	8001d96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c6e:	2304      	movs	r3, #4
 8001c70:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c72:	f7ff fb15 	bl	80012a0 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c78:	e021      	b.n	8001cbe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d01d      	beq.n	8001cbe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c82:	f7ff fb0d 	bl	80012a0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <HAL_ADC_PollForConversion+0x9c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d112      	bne.n	8001cbe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10b      	bne.n	8001cbe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f043 0204 	orr.w	r2, r3, #4
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e06b      	b.n	8001d96 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0d6      	beq.n	8001c7a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fbab 	bl	8001438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e5b      	ldrb	r3, [r3, #25]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d111      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_ADC_PollForConversion+0x1a8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x136>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_PollForConversion+0x138>
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_ADC_PollForConversion+0x1ac>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d008      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d002      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	d104      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	e00c      	b.n	8001d72 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a11      	ldr	r2, [pc, #68]	@ (8001da4 <HAL_ADC_PollForConversion+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d002      	beq.n	8001d68 <HAL_ADC_PollForConversion+0x16c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e000      	b.n	8001d6a <HAL_ADC_PollForConversion+0x16e>
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_ADC_PollForConversion+0x1ac>)
 8001d6a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e008      	b.n	8001d94 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	220c      	movs	r2, #12
 8001d92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	42028300 	.word	0x42028300
 8001da4:	42028100 	.word	0x42028100
 8001da8:	42028000 	.word	0x42028000

08001dac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b0b7      	sub	sp, #220	@ 0xdc
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x22>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e3c1      	b.n	800256e <HAL_ADC_ConfigChannel+0x7a6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fc8c 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 83a6 	bne.w	8002550 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	f7ff fb24 	bl	800145e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc7a 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 8001e20:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc9a 	bl	8001762 <LL_ADC_INJ_IsConversionOngoing>
 8001e2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 81c1 	bne.w	80021be <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 81bc 	bne.w	80021be <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e4e:	d10f      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7ff fb2b 	bl	80014b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fad2 	bl	8001412 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e6e:	e00e      	b.n	8001e8e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6819      	ldr	r1, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f7ff fb1a 	bl	80014b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fac2 	bl	8001412 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00a      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6919      	ldr	r1, [r3, #16]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ec0:	f7ff fa52 	bl	8001368 <LL_ADC_SetOffset>
 8001ec4:	e17b      	b.n	80021be <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fa6f 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x12a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa64 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	e01e      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x168>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fa59 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x180>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	e018      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x1b2>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e004      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa28 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fa0c 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1f0>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fa01 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e01e      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x22e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f9f6 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x246>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e018      	b.n	8002040 <HAL_ADC_ConfigChannel+0x278>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800202a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e004      	b.n	8002040 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002036:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	2101      	movs	r1, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f9c5 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2102      	movs	r1, #2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f9a9 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x2b6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f99e 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	e01e      	b.n	80020bc <HAL_ADC_ConfigChannel+0x2f4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f993 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80020a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e004      	b.n	80020ba <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80020b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x30c>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	e016      	b.n	8002102 <HAL_ADC_ConfigChannel+0x33a>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e004      	b.n	8002102 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80020f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002102:	429a      	cmp	r2, r3
 8002104:	d106      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f964 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2103      	movs	r1, #3
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f948 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x378>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2103      	movs	r1, #3
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f93d 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 021f 	and.w	r2, r3, #31
 800213e:	e017      	b.n	8002170 <HAL_ADC_ConfigChannel+0x3a8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2103      	movs	r1, #3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f932 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800215c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x3c0>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	e011      	b.n	80021ac <HAL_ADC_ConfigChannel+0x3e4>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002198:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800219a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e003      	b.n	80021ac <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80021a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2103      	movs	r1, #3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f90f 	bl	80013dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa58 	bl	8001678 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 81c9 	bne.w	8002562 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff f995 	bl	800150c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002424 <HAL_ADC_ConfigChannel+0x65c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	f040 8131 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x44e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	3301      	adds	r3, #1
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2b09      	cmp	r3, #9
 800220c:	bf94      	ite	ls
 800220e:	2301      	movls	r3, #1
 8002210:	2300      	movhi	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e019      	b.n	800224a <HAL_ADC_ConfigChannel+0x482>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002226:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800222e:	2320      	movs	r3, #32
 8002230:	e003      	b.n	800223a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2b09      	cmp	r3, #9
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224a:	2b00      	cmp	r3, #0
 800224c:	d079      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_ADC_ConfigChannel+0x4a2>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0e9b      	lsrs	r3, r3, #26
 8002260:	3301      	adds	r3, #1
 8002262:	069b      	lsls	r3, r3, #26
 8002264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002268:	e015      	b.n	8002296 <HAL_ADC_ConfigChannel+0x4ce>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800227a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800227c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e003      	b.n	800228e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3301      	adds	r3, #1
 8002290:	069b      	lsls	r3, r3, #26
 8002292:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x4ee>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	3301      	adds	r3, #1
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	e017      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x51e>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80022c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e003      	b.n	80022da <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80022d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	ea42 0103 	orr.w	r1, r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <HAL_ADC_ConfigChannel+0x544>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 021f 	and.w	r2, r3, #31
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	e018      	b.n	800233e <HAL_ADC_ConfigChannel+0x576>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800231e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	430b      	orrs	r3, r1
 8002340:	e081      	b.n	8002446 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_ADC_ConfigChannel+0x596>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235c:	e015      	b.n	800238a <HAL_ADC_ConfigChannel+0x5c2>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e003      	b.n	8002382 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x5e2>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	e017      	b.n	80023da <HAL_ADC_ConfigChannel+0x612>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	61fb      	str	r3, [r7, #28]
  return result;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e003      	b.n	80023ce <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x63e>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002404:	e01e      	b.n	8002444 <HAL_ADC_ConfigChannel+0x67c>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	613b      	str	r3, [r7, #16]
  return result;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d104      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e006      	b.n	8002430 <HAL_ADC_ConfigChannel+0x668>
 8002422:	bf00      	nop
 8002424:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	3b1e      	subs	r3, #30
 800243e:	051b      	lsls	r3, r3, #20
 8002440:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002444:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244a:	4619      	mov	r1, r3
 800244c:	f7ff f833 	bl	80014b6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b48      	ldr	r3, [pc, #288]	@ (8002578 <HAL_ADC_ConfigChannel+0x7b0>)
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8082 	beq.w	8002562 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245e:	4847      	ldr	r0, [pc, #284]	@ (800257c <HAL_ADC_ConfigChannel+0x7b4>)
 8002460:	f7fe ff74 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 8002464:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002468:	4845      	ldr	r0, [pc, #276]	@ (8002580 <HAL_ADC_ConfigChannel+0x7b8>)
 800246a:	f7ff f905 	bl	8001678 <LL_ADC_IsEnabled>
 800246e:	4604      	mov	r4, r0
 8002470:	4844      	ldr	r0, [pc, #272]	@ (8002584 <HAL_ADC_ConfigChannel+0x7bc>)
 8002472:	f7ff f901 	bl	8001678 <LL_ADC_IsEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	4323      	orrs	r3, r4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d15e      	bne.n	800253c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a41      	ldr	r2, [pc, #260]	@ (8002588 <HAL_ADC_ConfigChannel+0x7c0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d127      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800248c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d121      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a39      	ldr	r2, [pc, #228]	@ (8002580 <HAL_ADC_ConfigChannel+0x7b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d161      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024a6:	4619      	mov	r1, r3
 80024a8:	4834      	ldr	r0, [pc, #208]	@ (800257c <HAL_ADC_ConfigChannel+0x7b4>)
 80024aa:	f7fe ff3c 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_ADC_ConfigChannel+0x7c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	4a36      	ldr	r2, [pc, #216]	@ (8002590 <HAL_ADC_ConfigChannel+0x7c8>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80024c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d6:	e044      	b.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_ADC_ConfigChannel+0x7cc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a23      	ldr	r2, [pc, #140]	@ (8002580 <HAL_ADC_ConfigChannel+0x7b8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d134      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002500:	4619      	mov	r1, r3
 8002502:	481e      	ldr	r0, [pc, #120]	@ (800257c <HAL_ADC_ConfigChannel+0x7b4>)
 8002504:	f7fe ff0f 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002508:	e02b      	b.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <HAL_ADC_ConfigChannel+0x7d0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d126      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d120      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	@ (8002580 <HAL_ADC_ConfigChannel+0x7b8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d11b      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800252e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002532:	4619      	mov	r1, r3
 8002534:	4811      	ldr	r0, [pc, #68]	@ (800257c <HAL_ADC_ConfigChannel+0x7b4>)
 8002536:	f7fe fef6 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
 800253a:	e012      	b.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800254e:	e008      	b.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800256a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800256e:	4618      	mov	r0, r3
 8002570:	37dc      	adds	r7, #220	@ 0xdc
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	80080000 	.word	0x80080000
 800257c:	42028300 	.word	0x42028300
 8002580:	42028000 	.word	0x42028000
 8002584:	42028100 	.word	0x42028100
 8002588:	c7520000 	.word	0xc7520000
 800258c:	20000000 	.word	0x20000000
 8002590:	053e2d63 	.word	0x053e2d63
 8002594:	cb840000 	.word	0xcb840000
 8002598:	80000001 	.word	0x80000001

0800259c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f8ae 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f8cf 	bl	8001762 <LL_ADC_INJ_IsConversionOngoing>
 80025c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8098 	beq.w	8002704 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02a      	beq.n	8002638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e5b      	ldrb	r3, [r3, #25]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d126      	bne.n	8002638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7e1b      	ldrb	r3, [r3, #24]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d122      	bne.n	8002638 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025f6:	e014      	b.n	8002622 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4a45      	ldr	r2, [pc, #276]	@ (8002710 <ADC_ConversionStop+0x174>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d90d      	bls.n	800261c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f043 0210 	orr.w	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e074      	b.n	8002706 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b40      	cmp	r3, #64	@ 0x40
 800262e:	d1e3      	bne.n	80025f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2240      	movs	r2, #64	@ 0x40
 8002636:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d014      	beq.n	8002668 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f866 	bl	8001714 <LL_ADC_REG_IsConversionOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f823 	bl	800169e <LL_ADC_IsDisableOngoing>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f842 	bl	80016ec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d014      	beq.n	8002698 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f875 	bl	8001762 <LL_ADC_INJ_IsConversionOngoing>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f80b 	bl	800169e <LL_ADC_IsDisableOngoing>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f851 	bl	800173a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d005      	beq.n	80026aa <ADC_ConversionStop+0x10e>
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d105      	bne.n	80026b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026a4:	230c      	movs	r3, #12
 80026a6:	617b      	str	r3, [r7, #20]
        break;
 80026a8:	e005      	b.n	80026b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026aa:	2308      	movs	r3, #8
 80026ac:	617b      	str	r3, [r7, #20]
        break;
 80026ae:	e002      	b.n	80026b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026b0:	2304      	movs	r3, #4
 80026b2:	617b      	str	r3, [r7, #20]
        break;
 80026b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fdf3 	bl	80012a0 <HAL_GetTick>
 80026ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026bc:	e01b      	b.n	80026f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026be:	f7fe fdef 	bl	80012a0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d914      	bls.n	80026f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1dc      	bne.n	80026be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	a33fffff 	.word	0xa33fffff

08002714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe ffa7 	bl	8001678 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d169      	bne.n	8002804 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <ADC_Enable+0xfc>)
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e055      	b.n	8002806 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe ff62 	bl	8001628 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002764:	482b      	ldr	r0, [pc, #172]	@ (8002814 <ADC_Enable+0x100>)
 8002766:	f7fe fdf1 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 800276a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800276c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <ADC_Enable+0x104>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	4a28      	ldr	r2, [pc, #160]	@ (800281c <ADC_Enable+0x108>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800278e:	e002      	b.n	8002796 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	3b01      	subs	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800279c:	f7fe fd80 	bl	80012a0 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a2:	e028      	b.n	80027f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe ff65 	bl	8001678 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe ff35 	bl	8001628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027be:	f7fe fd6f 	bl	80012a0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d914      	bls.n	80027f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d00d      	beq.n	80027f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e007      	b.n	8002806 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d1cf      	bne.n	80027a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	8000003f 	.word	0x8000003f
 8002814:	42028300 	.word	0x42028300
 8002818:	20000000 	.word	0x20000000
 800281c:	053e2d63 	.word	0x053e2d63

08002820 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe ff36 	bl	800169e <LL_ADC_IsDisableOngoing>
 8002832:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe ff1d 	bl	8001678 <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d047      	beq.n	80028d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d144      	bne.n	80028d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030d 	and.w	r3, r3, #13
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10c      	bne.n	8002872 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fef7 	bl	8001650 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2203      	movs	r2, #3
 8002868:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800286a:	f7fe fd19 	bl	80012a0 <HAL_GetTick>
 800286e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002870:	e029      	b.n	80028c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e023      	b.n	80028d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800288e:	f7fe fd07 	bl	80012a0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d914      	bls.n	80028c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1dc      	bne.n	800288e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LL_ADC_IsEnabled>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_IsEnabled+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_IsEnabled+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsConversionOngoing>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b0a1      	sub	sp, #132	@ 0x84
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002946:	2302      	movs	r3, #2
 8002948:	e089      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002952:	2300      	movs	r3, #0
 8002954:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002956:	2300      	movs	r3, #0
 8002958:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a42      	ldr	r2, [pc, #264]	@ (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002964:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e001      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e068      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ffb8 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002994:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ffb2 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d14a      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d147      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029ac:	4b30      	ldr	r3, [pc, #192]	@ (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80029ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d027      	beq.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ca:	035b      	lsls	r3, r3, #13
 80029cc:	430b      	orrs	r3, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d4:	4824      	ldr	r0, [pc, #144]	@ (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80029d6:	f7ff ff82 	bl	80028de <LL_ADC_IsEnabled>
 80029da:	4604      	mov	r4, r0
 80029dc:	4823      	ldr	r0, [pc, #140]	@ (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029de:	f7ff ff7e 	bl	80028de <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4323      	orrs	r3, r4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d132      	bne.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029f2:	f023 030f 	bic.w	r3, r3, #15
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	6892      	ldr	r2, [r2, #8]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a06:	e023      	b.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a14:	4814      	ldr	r0, [pc, #80]	@ (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a16:	f7ff ff62 	bl	80028de <LL_ADC_IsEnabled>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a1e:	f7ff ff5e 	bl	80028de <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4323      	orrs	r3, r4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d112      	bne.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a32:	f023 030f 	bic.w	r3, r3, #15
 8002a36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3a:	e009      	b.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a4e:	e000      	b.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3784      	adds	r7, #132	@ 0x84
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	42028000 	.word	0x42028000
 8002a6c:	42028100 	.word	0x42028100
 8002a70:	42028300 	.word	0x42028300

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0152      	lsls	r2, r2, #5
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0152      	lsls	r2, r2, #5
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	bf28      	it	cs
 8002b4a:	2303      	movcs	r3, #3
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3303      	adds	r3, #3
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b04      	subs	r3, #4
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	2107      	movs	r1, #7
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff8e 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff47 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff5e 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff90 	bl	8002b2c <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5f 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffb2 	bl	8002b94 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c4a:	e158      	b.n	8002efe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 814a 	beq.w	8002ef8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d005      	beq.n	8002c7c <HAL_GPIO_Init+0x40>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d130      	bne.n	8002cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 0201 	and.w	r2, r3, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d017      	beq.n	8002d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d123      	bne.n	8002d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	6939      	ldr	r1, [r7, #16]
 8002d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a4 	beq.w	8002ef8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002db0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3318      	adds	r3, #24
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_GPIO_Init+0x2e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d025      	beq.n	8002e28 <HAL_GPIO_Init+0x1ec>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a51      	ldr	r2, [pc, #324]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01f      	beq.n	8002e24 <HAL_GPIO_Init+0x1e8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a50      	ldr	r2, [pc, #320]	@ (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d019      	beq.n	8002e20 <HAL_GPIO_Init+0x1e4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a4f      	ldr	r2, [pc, #316]	@ (8002f2c <HAL_GPIO_Init+0x2f0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_GPIO_Init+0x1e0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a4e      	ldr	r2, [pc, #312]	@ (8002f30 <HAL_GPIO_Init+0x2f4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00d      	beq.n	8002e18 <HAL_GPIO_Init+0x1dc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8002f34 <HAL_GPIO_Init+0x2f8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <HAL_GPIO_Init+0x1d8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a4c      	ldr	r2, [pc, #304]	@ (8002f38 <HAL_GPIO_Init+0x2fc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_GPIO_Init+0x1d4>
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	e00c      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e10:	2307      	movs	r3, #7
 8002e12:	e00a      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e14:	2305      	movs	r3, #5
 8002e16:	e008      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	00d2      	lsls	r2, r2, #3
 8002e32:	4093      	lsls	r3, r2
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002e3a:	4938      	ldr	r1, [pc, #224]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3318      	adds	r3, #24
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e72:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e96:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <HAL_GPIO_Init+0x2e0>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae9f 	bne.w	8002c4c <HAL_GPIO_Init+0x10>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	4002f400 	.word	0x4002f400
 8002f20:	42020000 	.word	0x42020000
 8002f24:	42020400 	.word	0x42020400
 8002f28:	42020800 	.word	0x42020800
 8002f2c:	42020c00 	.word	0x42020c00
 8002f30:	42021000 	.word	0x42021000
 8002f34:	42021400 	.word	0x42021400
 8002f38:	42021800 	.word	0x42021800

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e007      	b.n	8002f9a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f8a:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0204 	bic.w	r2, r3, #4
 8002f92:	4905      	ldr	r1, [pc, #20]	@ (8002fa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40030400 	.word	0x40030400

08002fac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_ICACHE_Enable+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_ICACHE_Enable+0x1c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40030400 	.word	0x40030400

08002fcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002ff0:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002ffa:	f000 f871 	bl	80030e0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003004:	d101      	bne.n	800300a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03e      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800300a:	4b21      	ldr	r3, [pc, #132]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003016:	d101      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e035      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d101      	bne.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e02f      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003030:	4917      	ldr	r1, [pc, #92]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003038:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	09db      	lsrs	r3, r3, #7
 8003046:	2232      	movs	r2, #50	@ 0x32
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	08db      	lsrs	r3, r3, #3
 8003054:	3301      	adds	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003058:	e002      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3b01      	subs	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306c:	d102      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f2      	bne.n	800305a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003080:	d101      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e000      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40007000 	.word	0x40007000
 8003094:	20000000 	.word	0x20000000
 8003098:	0a7c5ac5 	.word	0x0a7c5ac5
 800309c:	cccccccd 	.word	0xcccccccd

080030a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ae:	6053      	str	r3, [r2, #4]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ce:	6093      	str	r3, [r2, #8]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40007000 	.word	0x40007000

080030e0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80030e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80030f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	e00a      	b.n	8003114 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	e001      	b.n	8003114 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40007000 	.word	0x40007000

08003128 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f000 bcc2 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313c:	4b99      	ldr	r3, [pc, #612]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003146:	4b97      	ldr	r3, [pc, #604]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80e9 	beq.w	8003330 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_RCC_OscConfig+0x4a>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	f040 8083 	bne.w	8003272 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d17f      	bne.n	8003272 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003172:	4b8c      	ldr	r3, [pc, #560]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_RCC_OscConfig+0x64>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f000 bc9a 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003190:	4b84      	ldr	r3, [pc, #528]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <HAL_RCC_OscConfig+0x7e>
 800319c:	4b81      	ldr	r3, [pc, #516]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a4:	e005      	b.n	80031b2 <HAL_RCC_OscConfig+0x8a>
 80031a6:	4b7f      	ldr	r3, [pc, #508]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d224      	bcs.n	8003200 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fe9c 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f000 bc7a 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031cc:	4b75      	ldr	r3, [pc, #468]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a74      	ldr	r2, [pc, #464]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b72      	ldr	r3, [pc, #456]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	496f      	ldr	r1, [pc, #444]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ea:	4b6e      	ldr	r3, [pc, #440]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	496a      	ldr	r1, [pc, #424]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
 80031fe:	e026      	b.n	800324e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003200:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a67      	ldr	r2, [pc, #412]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b65      	ldr	r3, [pc, #404]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	4962      	ldr	r1, [pc, #392]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321e:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	495d      	ldr	r1, [pc, #372]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fe5b 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f000 bc39 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800324e:	f000 fe17 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003252:	4603      	mov	r3, r0
 8003254:	4a54      	ldr	r2, [pc, #336]	@ (80033a8 <HAL_RCC_OscConfig+0x280>)
 8003256:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003258:	4b54      	ldr	r3, [pc, #336]	@ (80033ac <HAL_RCC_OscConfig+0x284>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd ffcf 	bl	8001200 <HAL_InitTick>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d060      	beq.n	800332e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	f000 bc27 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d039      	beq.n	80032ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800327a:	4b4a      	ldr	r3, [pc, #296]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a49      	ldr	r2, [pc, #292]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003286:	f7fe f80b 	bl	80012a0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328c:	e00f      	b.n	80032ae <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800328e:	f7fe f807 	bl	80012a0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d908      	bls.n	80032ae <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329c:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	f000 bc09 	b.w	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ae:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0e9      	beq.n	800328e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ba:	4b3a      	ldr	r3, [pc, #232]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a39      	ldr	r2, [pc, #228]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	f043 0308 	orr.w	r3, r3, #8
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b37      	ldr	r3, [pc, #220]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	4934      	ldr	r1, [pc, #208]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d8:	4b32      	ldr	r3, [pc, #200]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	492f      	ldr	r1, [pc, #188]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	e020      	b.n	8003330 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ee:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032fa:	f7fd ffd1 	bl	80012a0 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003302:	f7fd ffcd 	bl	80012a0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003310:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e3cf      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003320:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x1da>
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800332e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d07e      	beq.n	800343a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x226>
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d10e      	bne.n	8003366 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d10b      	bne.n	8003366 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06e      	beq.n	8003438 <HAL_RCC_OscConfig+0x310>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d16a      	bne.n	8003438 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e3ac      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x256>
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0b      	ldr	r2, [pc, #44]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e024      	b.n	80033c8 <HAL_RCC_OscConfig+0x2a0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003386:	d113      	bne.n	80033b0 <HAL_RCC_OscConfig+0x288>
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800338e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a02      	ldr	r2, [pc, #8]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e012      	b.n	80033c8 <HAL_RCC_OscConfig+0x2a0>
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004
 80033b0:	4b8b      	ldr	r3, [pc, #556]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a8a      	ldr	r2, [pc, #552]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b88      	ldr	r3, [pc, #544]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a87      	ldr	r2, [pc, #540]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d019      	beq.n	8003404 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd ff66 	bl	80012a0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d6:	e00e      	b.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd ff62 	bl	80012a0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d907      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e364      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f6:	4b7a      	ldr	r3, [pc, #488]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ea      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2b0>
 8003402:	e01a      	b.n	800343a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd ff4c 	bl	80012a0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340a:	e00e      	b.n	800342a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd ff48 	bl	80012a0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d907      	bls.n	800342a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341a:	4b71      	ldr	r3, [pc, #452]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e34a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342a:	4b6d      	ldr	r3, [pc, #436]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ea      	bne.n	800340c <HAL_RCC_OscConfig+0x2e4>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d06c      	beq.n	8003520 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d005      	beq.n	8003458 <HAL_RCC_OscConfig+0x330>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d119      	bne.n	8003486 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d116      	bne.n	8003486 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003458:	4b61      	ldr	r3, [pc, #388]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_OscConfig+0x348>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e327      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b5b      	ldr	r3, [pc, #364]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	4958      	ldr	r1, [pc, #352]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	e04c      	b.n	8003520 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d029      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348e:	4b54      	ldr	r3, [pc, #336]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a53      	ldr	r2, [pc, #332]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd ff01 	bl	80012a0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a0:	e00e      	b.n	80034c0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fd fefd 	bl	80012a0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d907      	bls.n	80034c0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	4b4b      	ldr	r3, [pc, #300]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e2ff      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ea      	beq.n	80034a2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	4941      	ldr	r1, [pc, #260]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
 80034e0:	e01e      	b.n	8003520 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e2:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3e      	ldr	r2, [pc, #248]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fd fed7 	bl	80012a0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f4:	e00e      	b.n	8003514 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fd fed3 	bl	80012a0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d907      	bls.n	8003514 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003504:	4b36      	ldr	r3, [pc, #216]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e2d5      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	4b32      	ldr	r3, [pc, #200]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ea      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d062      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d038      	beq.n	80035a6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800353c:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f023 0310 	bic.w	r3, r3, #16
 8003548:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800354c:	e007      	b.n	800355e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800354e:	4b24      	ldr	r3, [pc, #144]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003554:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fd fe97 	bl	80012a0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003574:	e00f      	b.n	8003596 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fd fe93 	bl	80012a0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b07      	cmp	r3, #7
 8003582:	d908      	bls.n	8003596 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003584:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e294      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0e8      	beq.n	8003576 <HAL_RCC_OscConfig+0x44e>
 80035a4:	e025      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ac:	4a0c      	ldr	r2, [pc, #48]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fd fe73 	bl	80012a0 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035bc:	e012      	b.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035be:	f7fd fe6f 	bl	80012a0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	d90b      	bls.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e270      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e5      	bne.n	80035be <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 812d 	beq.w	800385a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003604:	4ba0      	ldr	r3, [pc, #640]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10d      	bne.n	800362c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b9d      	ldr	r3, [pc, #628]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	4a9c      	ldr	r2, [pc, #624]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	@ 0x58
 800361c:	4b9a      	ldr	r3, [pc, #616]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003628:	2301      	movs	r3, #1
 800362a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	4b97      	ldr	r3, [pc, #604]	@ (800388c <HAL_RCC_OscConfig+0x764>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11e      	bne.n	8003676 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003638:	4b94      	ldr	r3, [pc, #592]	@ (800388c <HAL_RCC_OscConfig+0x764>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a93      	ldr	r2, [pc, #588]	@ (800388c <HAL_RCC_OscConfig+0x764>)
 800363e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003644:	f7fd fe2c 	bl	80012a0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364a:	e00e      	b.n	800366a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fd fe28 	bl	80012a0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d907      	bls.n	800366a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365a:	4b8c      	ldr	r3, [pc, #560]	@ (800388c <HAL_RCC_OscConfig+0x764>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e22a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366a:	4b88      	ldr	r3, [pc, #544]	@ (800388c <HAL_RCC_OscConfig+0x764>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ea      	beq.n	800364c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01f      	beq.n	80036c2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800368e:	4b7e      	ldr	r3, [pc, #504]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	4a7c      	ldr	r2, [pc, #496]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	4a78      	ldr	r2, [pc, #480]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ae:	e018      	b.n	80036e2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036b0:	4b75      	ldr	r3, [pc, #468]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	4a74      	ldr	r2, [pc, #464]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c0:	e00f      	b.n	80036e2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036c2:	4b71      	ldr	r3, [pc, #452]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d068      	beq.n	80037bc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fdd9 	bl	80012a0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f0:	e011      	b.n	8003716 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fd fdd5 	bl	80012a0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d908      	bls.n	8003716 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003704:	4b60      	ldr	r3, [pc, #384]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1d4      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003716:	4b5c      	ldr	r3, [pc, #368]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0e6      	beq.n	80036f2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003730:	4b55      	ldr	r3, [pc, #340]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	4a54      	ldr	r2, [pc, #336]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003740:	e011      	b.n	8003766 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fd fdad 	bl	80012a0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d908      	bls.n	8003766 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003754:	4b4c      	ldr	r3, [pc, #304]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1ac      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003766:	4b48      	ldr	r3, [pc, #288]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0e6      	beq.n	8003742 <HAL_RCC_OscConfig+0x61a>
 8003774:	e068      	b.n	8003848 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003776:	4b44      	ldr	r3, [pc, #272]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377c:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800377e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003786:	e011      	b.n	80037ac <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fd8a 	bl	80012a0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d908      	bls.n	80037ac <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800379a:	4b3b      	ldr	r3, [pc, #236]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e189      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037ac:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <HAL_RCC_OscConfig+0x660>
 80037ba:	e045      	b.n	8003848 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fd fd70 	bl	80012a0 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c2:	e011      	b.n	80037e8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fd fd6c 	bl	80012a0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e16b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e8:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d021      	beq.n	8003848 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003804:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800380c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003814:	e011      	b.n	800383a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fd fd43 	bl	80012a0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d908      	bls.n	800383a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003828:	4b17      	ldr	r3, [pc, #92]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e142      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e6      	bne.n	8003816 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003848:	7ffb      	ldrb	r3, [r7, #31]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04f      	beq.n	8003906 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_RCC_OscConfig+0x760>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387e:	f7fd fd0f 	bl	80012a0 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x788>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003890:	f7fd fd06 	bl	80012a0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d908      	bls.n	80038b0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800389e:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e107      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b0:	4b85      	ldr	r3, [pc, #532]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0e8      	beq.n	8003890 <HAL_RCC_OscConfig+0x768>
 80038be:	e022      	b.n	8003906 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c0:	4b81      	ldr	r3, [pc, #516]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c6:	4a80      	ldr	r2, [pc, #512]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fd fce6 	bl	80012a0 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d6:	e00f      	b.n	80038f8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d8:	f7fd fce2 	bl	80012a0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d908      	bls.n	80038f8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e6:	4b78      	ldr	r3, [pc, #480]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0e3      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f8:	4b73      	ldr	r3, [pc, #460]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80038fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e8      	bne.n	80038d8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80d7 	beq.w	8003abe <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b0c      	cmp	r3, #12
 800391a:	f000 8091 	beq.w	8003a40 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2b02      	cmp	r3, #2
 8003924:	d166      	bne.n	80039f4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b68      	ldr	r3, [pc, #416]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a67      	ldr	r2, [pc, #412]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 800392c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fcb5 	bl	80012a0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fcb1 	bl	80012a0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0b3      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003958:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003964:	4b58      	ldr	r3, [pc, #352]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	4b58      	ldr	r3, [pc, #352]	@ (8003acc <HAL_RCC_OscConfig+0x9a4>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003974:	3a01      	subs	r2, #1
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800397e:	0212      	lsls	r2, r2, #8
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003986:	0852      	lsrs	r2, r2, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	0552      	lsls	r2, r2, #21
 800398c:	4311      	orrs	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003992:	0852      	lsrs	r2, r2, #1
 8003994:	3a01      	subs	r2, #1
 8003996:	0652      	lsls	r2, r2, #25
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800399e:	06d2      	lsls	r2, r2, #27
 80039a0:	430a      	orrs	r2, r1
 80039a2:	4949      	ldr	r1, [pc, #292]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a46      	ldr	r2, [pc, #280]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b4:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a43      	ldr	r2, [pc, #268]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fc6e 	bl	80012a0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	e00e      	b.n	80039e6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fc6a 	bl	80012a0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d907      	bls.n	80039e6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e06c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ea      	beq.n	80039c8 <HAL_RCC_OscConfig+0x8a0>
 80039f2:	e064      	b.n	8003abe <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b34      	ldr	r3, [pc, #208]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a33      	ldr	r2, [pc, #204]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fc4e 	bl	80012a0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a06:	e00e      	b.n	8003a26 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd fc4a 	bl	80012a0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d907      	bls.n	8003a26 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e04c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ea      	bne.n	8003a08 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a32:	4b25      	ldr	r3, [pc, #148]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4924      	ldr	r1, [pc, #144]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003a38:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <HAL_RCC_OscConfig+0x9a8>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60cb      	str	r3, [r1, #12]
 8003a3e:	e03e      	b.n	8003abe <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e039      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <HAL_RCC_OscConfig+0x9a0>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0203 	and.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d12c      	bne.n	8003aba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d123      	bne.n	8003aba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11b      	bne.n	8003aba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d113      	bne.n	8003aba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	019f800c 	.word	0x019f800c
 8003ad0:	feeefffc 	.word	0xfeeefffc

08003ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e11c      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b90      	ldr	r3, [pc, #576]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d910      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b8d      	ldr	r3, [pc, #564]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 020f 	bic.w	r2, r3, #15
 8003b02:	498b      	ldr	r1, [pc, #556]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b89      	ldr	r3, [pc, #548]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e104      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b81      	ldr	r3, [pc, #516]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d908      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b7e      	ldr	r3, [pc, #504]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	497b      	ldr	r1, [pc, #492]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8085 	beq.w	8003c62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b60:	4b74      	ldr	r3, [pc, #464]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0da      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b70:	f000 fa26 	bl	8003fc0 <RCC_GetSysClockFreqFromPLLSource>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4a6f      	ldr	r2, [pc, #444]	@ (8003d38 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d947      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d141      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b92:	4a68      	ldr	r2, [pc, #416]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e036      	b.n	8003c0e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba8:	4b62      	ldr	r3, [pc, #392]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b6      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0aa      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd0:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0a2      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003be0:	f000 f8b0 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a53      	ldr	r2, [pc, #332]	@ (8003d38 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d90f      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bee:	4b51      	ldr	r3, [pc, #324]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c02:	4a4c      	ldr	r2, [pc, #304]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b49      	ldr	r3, [pc, #292]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4946      	ldr	r1, [pc, #280]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fd fb3e 	bl	80012a0 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fd fb3a 	bl	80012a0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d90a      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e06a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c50:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 020c 	and.w	r2, r3, #12
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d1e2      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b80      	cmp	r3, #128	@ 0x80
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a31      	ldr	r2, [pc, #196]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c72:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d208      	bcs.n	8003ca2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4925      	ldr	r1, [pc, #148]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca2:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d210      	bcs.n	8003cd2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 020f 	bic.w	r2, r3, #15
 8003cb8:	491d      	ldr	r1, [pc, #116]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_RCC_ClockConfig+0x25c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e029      	b.n	8003d26 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4912      	ldr	r1, [pc, #72]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	490a      	ldr	r1, [pc, #40]	@ (8003d34 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d10:	f000 f8b6 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a09      	ldr	r2, [pc, #36]	@ (8003d3c <HAL_RCC_ClockConfig+0x268>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_ClockConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fa6e 	bl	8001200 <HAL_InitTick>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40022000 	.word	0x40022000
 8003d34:	40021000 	.word	0x40021000
 8003d38:	04c4b400 	.word	0x04c4b400
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5c:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d121      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d11e      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d78:	4b3d      	ldr	r3, [pc, #244]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d84:	4b3a      	ldr	r3, [pc, #232]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e005      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003da0:	4a34      	ldr	r2, [pc, #208]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x130>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e004      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8003dca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d146      	bne.n	8003e60 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003dd2:	4b27      	ldr	r3, [pc, #156]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ddc:	4b24      	ldr	r3, [pc, #144]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d003      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0xb4>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d00d      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0xce>
 8003df6:	e019      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003df8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003e02:	68d2      	ldr	r2, [r2, #12]
 8003e04:	0a12      	lsrs	r2, r2, #8
 8003e06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	617b      	str	r3, [r7, #20]
        break;
 8003e10:	e019      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e12:	4a1a      	ldr	r2, [pc, #104]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	4a15      	ldr	r2, [pc, #84]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	0a12      	lsrs	r2, r2, #8
 8003e20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]
        break;
 8003e2a:	e00c      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a0e      	ldr	r2, [pc, #56]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003e36:	68d2      	ldr	r2, [r2, #12]
 8003e38:	0a12      	lsrs	r2, r2, #8
 8003e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	617b      	str	r3, [r7, #20]
        break;
 8003e44:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	0e5b      	lsrs	r3, r3, #25
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	3301      	adds	r3, #1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e60:	69bb      	ldr	r3, [r7, #24]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	@ 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	08006274 	.word	0x08006274
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200

08003e80 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003e84:	f7ff ff5e 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_GetHCLKFreq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	4903      	ldr	r1, [pc, #12]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	0800625c 	.word	0x0800625c

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff ffe8 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	0800626c 	.word	0x0800626c

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	f7ff ffd4 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0adb      	lsrs	r3, r3, #11
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	0800626c 	.word	0x0800626c

08003ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f04:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f10:	f7ff f85c 	bl	8002fcc <HAL_PWREx_GetVoltageRange>
 8003f14:	6138      	str	r0, [r7, #16]
 8003f16:	e014      	b.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b27      	ldr	r3, [pc, #156]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1c:	4a26      	ldr	r2, [pc, #152]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f24:	4b24      	ldr	r3, [pc, #144]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f30:	f7ff f84c 	bl	8002fcc <HAL_PWREx_GetVoltageRange>
 8003f34:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4e:	d10b      	bne.n	8003f68 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d919      	bls.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f5a:	d902      	bls.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003f60:	e013      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003f66:	e010      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b80      	cmp	r3, #128	@ 0x80
 8003f6c:	d902      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f6e:	2303      	movs	r3, #3
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e00a      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d102      	bne.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e004      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b70      	cmp	r3, #112	@ 0x70
 8003f84:	d101      	bne.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f86:	2301      	movs	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 020f 	bic.w	r2, r3, #15
 8003f92:	490a      	ldr	r1, [pc, #40]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003f9a:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40022000 	.word	0x40022000

08003fc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fc6:	4b31      	ldr	r3, [pc, #196]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d015      	beq.n	8004010 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d839      	bhi.n	800405e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d01c      	beq.n	800402a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d133      	bne.n	800405e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ff6:	4a26      	ldr	r2, [pc, #152]	@ (8004090 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4a23      	ldr	r2, [pc, #140]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	0a12      	lsrs	r2, r2, #8
 8004004:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	613b      	str	r3, [r7, #16]
      break;
 800400e:	e029      	b.n	8004064 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a1c      	ldr	r2, [pc, #112]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	613b      	str	r3, [r7, #16]
      break;
 8004028:	e01c      	b.n	8004064 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004036:	4b15      	ldr	r3, [pc, #84]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e005      	b.n	8004052 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004052:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	613b      	str	r3, [r7, #16]
        break;
 800405c:	e002      	b.n	8004064 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
      break;
 8004062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	0e5b      	lsrs	r3, r3, #25
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	3301      	adds	r3, #1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800407e:	683b      	ldr	r3, [r7, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40021000 	.word	0x40021000
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200
 8004098:	08006274 	.word	0x08006274

0800409c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d040      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040bc:	2b80      	cmp	r3, #128	@ 0x80
 80040be:	d02a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d825      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040c4:	2b60      	cmp	r3, #96	@ 0x60
 80040c6:	d026      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040c8:	2b60      	cmp	r3, #96	@ 0x60
 80040ca:	d821      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040cc:	2b40      	cmp	r3, #64	@ 0x40
 80040ce:	d006      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d81d      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d010      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040dc:	e018      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040de:	4b8f      	ldr	r3, [pc, #572]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a8e      	ldr	r2, [pc, #568]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040ea:	e015      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb56 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040fc:	e00c      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3320      	adds	r3, #32
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fc33 	bl	8004970 <RCCEx_PLLSAI2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800410e:	e003      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
        break;
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004118:	7ffb      	ldrb	r3, [r7, #31]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004120:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004124:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800412c:	497b      	ldr	r1, [pc, #492]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004134:	e001      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d047      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414e:	d030      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004154:	d82a      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800415a:	d02a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800415c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004160:	d824      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004166:	d008      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800416c:	d81e      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004176:	d010      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004178:	e018      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800417a:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4a67      	ldr	r2, [pc, #412]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004186:	e015      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fb08 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004198:	e00c      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3320      	adds	r3, #32
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fbe5 	bl	8004970 <RCCEx_PLLSAI2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041aa:	e003      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	77fb      	strb	r3, [r7, #31]
        break;
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ba:	4b58      	ldr	r3, [pc, #352]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4954      	ldr	r1, [pc, #336]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80041d0:	e001      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80ab 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e8:	4b4c      	ldr	r3, [pc, #304]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b49      	ldr	r3, [pc, #292]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	4a48      	ldr	r2, [pc, #288]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004200:	4b46      	ldr	r3, [pc, #280]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004210:	4b43      	ldr	r3, [pc, #268]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a42      	ldr	r2, [pc, #264]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421c:	f7fd f840 	bl	80012a0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004222:	e00f      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fd f83c 	bl	80012a0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d908      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004232:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	4b36      	ldr	r3, [pc, #216]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0e9      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004252:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004254:	7ffb      	ldrb	r3, [r7, #31]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d164      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425a:	4b30      	ldr	r3, [pc, #192]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004264:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d019      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004278:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004282:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a24      	ldr	r2, [pc, #144]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	4b21      	ldr	r3, [pc, #132]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	4a20      	ldr	r2, [pc, #128]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fc fff3 	bl	80012a0 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e012      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fc ffef 	bl	80012a0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d909      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d0:	4b12      	ldr	r3, [pc, #72]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80042e2:	e007      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e4:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0e5      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x222>
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80042f4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10c      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fc:	4b07      	ldr	r3, [pc, #28]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430c:	4903      	ldr	r1, [pc, #12]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	77bb      	strb	r3, [r7, #30]
 800431a:	e005      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7ffb      	ldrb	r3, [r7, #31]
 8004326:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432e:	4b9c      	ldr	r3, [pc, #624]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	4a9b      	ldr	r2, [pc, #620]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004338:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004346:	4b96      	ldr	r3, [pc, #600]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f023 0203 	bic.w	r2, r3, #3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	4992      	ldr	r1, [pc, #584]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004368:	4b8d      	ldr	r3, [pc, #564]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436e:	f023 020c 	bic.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	498a      	ldr	r1, [pc, #552]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438a:	4b85      	ldr	r3, [pc, #532]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	4981      	ldr	r1, [pc, #516]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ac:	4b7c      	ldr	r3, [pc, #496]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4979      	ldr	r1, [pc, #484]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ce:	4b74      	ldr	r3, [pc, #464]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	4970      	ldr	r1, [pc, #448]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043f0:	4b6b      	ldr	r3, [pc, #428]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fe:	4968      	ldr	r1, [pc, #416]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004412:	4b63      	ldr	r3, [pc, #396]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004418:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	495f      	ldr	r1, [pc, #380]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004434:	4b5a      	ldr	r3, [pc, #360]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	4957      	ldr	r1, [pc, #348]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004456:	4b52      	ldr	r3, [pc, #328]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004464:	494e      	ldr	r1, [pc, #312]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d031      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004480:	d00e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004486:	d814      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800448c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004490:	d10f      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004492:	4b43      	ldr	r3, [pc, #268]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4a42      	ldr	r2, [pc, #264]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800449c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f97c 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
        break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044c0:	4b37      	ldr	r3, [pc, #220]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ce:	4934      	ldr	r1, [pc, #208]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7ffb      	ldrb	r3, [r7, #31]
 80044da:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e8:	4b2d      	ldr	r3, [pc, #180]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f6:	492a      	ldr	r1, [pc, #168]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800450a:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	4921      	ldr	r1, [pc, #132]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800452c:	4b1c      	ldr	r3, [pc, #112]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	4919      	ldr	r1, [pc, #100]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800454e:	4b14      	ldr	r3, [pc, #80]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004554:	f023 0203 	bic.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	4910      	ldr	r1, [pc, #64]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004576:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457e:	4908      	ldr	r1, [pc, #32]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800458e:	d109      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a02      	ldr	r2, [pc, #8]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e014      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f8f5 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80045c4:	7ffb      	ldrb	r3, [r7, #31]
 80045c6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d04a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045dc:	d108      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80045de:	4b70      	ldr	r3, [pc, #448]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045e4:	4a6e      	ldr	r2, [pc, #440]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80045ee:	e012      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80045f0:	4b6b      	ldr	r3, [pc, #428]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045fe:	4968      	ldr	r1, [pc, #416]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004606:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800460c:	4a64      	ldr	r2, [pc, #400]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800460e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004612:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800461a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800461e:	d10d      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f8bc 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004630:	7ffb      	ldrb	r3, [r7, #31]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d019      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	77bb      	strb	r3, [r7, #30]
 800463a:	e016      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004644:	d106      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004646:	4b56      	ldr	r3, [pc, #344]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a55      	ldr	r2, [pc, #340]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800464c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004650:	60d3      	str	r3, [r2, #12]
 8004652:	e00a      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800465c:	d105      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800465e:	4b50      	ldr	r3, [pc, #320]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4a4f      	ldr	r2, [pc, #316]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004668:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004676:	4b4a      	ldr	r3, [pc, #296]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004684:	4946      	ldr	r1, [pc, #280]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004694:	d106      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004696:	4b42      	ldr	r3, [pc, #264]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4a41      	ldr	r2, [pc, #260]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800469c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a0:	60d3      	str	r3, [r2, #12]
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f875 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01e      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d4:	4b32      	ldr	r3, [pc, #200]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e4:	492e      	ldr	r1, [pc, #184]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046f6:	d10c      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f850 	bl	80047a4 <RCCEx_PLLSAI1_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004708:	7ffb      	ldrb	r3, [r7, #31]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800471e:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004724:	f023 0204 	bic.w	r2, r3, #4
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800472e:	491c      	ldr	r1, [pc, #112]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004742:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004744:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004748:	f023 0218 	bic.w	r2, r3, #24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	4913      	ldr	r1, [pc, #76]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d017      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004766:	4b0e      	ldr	r3, [pc, #56]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004776:	490a      	ldr	r1, [pc, #40]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004788:	d105      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478a:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004794:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004796:	7fbb      	ldrb	r3, [r7, #30]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000

080047a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d018      	beq.n	80047ec <RCCEx_PLLSAI1_Config+0x48>
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d81f      	bhi.n	80047fe <RCCEx_PLLSAI1_Config+0x5a>
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <RCCEx_PLLSAI1_Config+0x24>
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d009      	beq.n	80047da <RCCEx_PLLSAI1_Config+0x36>
 80047c6:	e01a      	b.n	80047fe <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047c8:	4b65      	ldr	r3, [pc, #404]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d117      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d8:	e014      	b.n	8004804 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047da:	4b61      	ldr	r3, [pc, #388]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d110      	bne.n	8004808 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ea:	e00d      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80047ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fc:	e006      	b.n	800480c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
      break;
 8004802:	e004      	b.n	800480e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800480c:	bf00      	nop
  }

  if (status == HAL_OK)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 809f 	bne.w	8004954 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004816:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a51      	ldr	r2, [pc, #324]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 800481c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004822:	f7fc fd3d 	bl	80012a0 <HAL_GetTick>
 8004826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004828:	e00f      	b.n	800484a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800482a:	f7fc fd39 	bl	80012a0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d908      	bls.n	800484a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004838:	4b49      	ldr	r3, [pc, #292]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004848:	e006      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484a:	4b45      	ldr	r3, [pc, #276]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e9      	bne.n	800482a <RCCEx_PLLSAI1_Config+0x86>
 8004856:	e000      	b.n	800485a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004858:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d179      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004866:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	4b3e      	ldr	r3, [pc, #248]	@ (8004964 <RCCEx_PLLSAI1_Config+0x1c0>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68d2      	ldr	r2, [r2, #12]
 8004878:	06d2      	lsls	r2, r2, #27
 800487a:	4311      	orrs	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	3a01      	subs	r2, #1
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	4311      	orrs	r1, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	4934      	ldr	r1, [pc, #208]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	610b      	str	r3, [r1, #16]
 8004892:	e033      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d118      	bne.n	80048cc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489a:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <RCCEx_PLLSAI1_Config+0x1c4>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	0211      	lsls	r1, r2, #8
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6912      	ldr	r2, [r2, #16]
 80048ac:	0852      	lsrs	r2, r2, #1
 80048ae:	3a01      	subs	r2, #1
 80048b0:	0552      	lsls	r2, r2, #21
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	4926      	ldr	r1, [pc, #152]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	610b      	str	r3, [r1, #16]
 80048ca:	e017      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048cc:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	4b26      	ldr	r3, [pc, #152]	@ (800496c <RCCEx_PLLSAI1_Config+0x1c8>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6892      	ldr	r2, [r2, #8]
 80048d8:	0211      	lsls	r1, r2, #8
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6952      	ldr	r2, [r2, #20]
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6852      	ldr	r2, [r2, #4]
 80048ea:	3a01      	subs	r2, #1
 80048ec:	0112      	lsls	r2, r2, #4
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	491a      	ldr	r1, [pc, #104]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fc fcca 	bl	80012a0 <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800490e:	e00f      	b.n	8004930 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004910:	f7fc fcc6 	bl	80012a0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d908      	bls.n	8004930 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800491e:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800492e:	e006      	b.n	800493e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0e9      	beq.n	8004910 <RCCEx_PLLSAI1_Config+0x16c>
 800493c:	e000      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800493e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4904      	ldr	r1, [pc, #16]	@ (8004960 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	07ff800c 	.word	0x07ff800c
 8004968:	ff9f800c 	.word	0xff9f800c
 800496c:	f9ff800c 	.word	0xf9ff800c

08004970 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b03      	cmp	r3, #3
 8004984:	d018      	beq.n	80049b8 <RCCEx_PLLSAI2_Config+0x48>
 8004986:	2b03      	cmp	r3, #3
 8004988:	d81f      	bhi.n	80049ca <RCCEx_PLLSAI2_Config+0x5a>
 800498a:	2b01      	cmp	r3, #1
 800498c:	d002      	beq.n	8004994 <RCCEx_PLLSAI2_Config+0x24>
 800498e:	2b02      	cmp	r3, #2
 8004990:	d009      	beq.n	80049a6 <RCCEx_PLLSAI2_Config+0x36>
 8004992:	e01a      	b.n	80049ca <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004994:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d117      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a4:	e014      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a6:	4b46      	ldr	r3, [pc, #280]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d110      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b6:	e00d      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80049b8:	4b41      	ldr	r3, [pc, #260]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e006      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      break;
 80049ce:	e004      	b.n	80049da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80049d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d169      	bne.n	8004ab4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049e0:	4b37      	ldr	r3, [pc, #220]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ec:	f7fc fc58 	bl	80012a0 <HAL_GetTick>
 80049f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049f2:	e00f      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f4:	f7fc fc54 	bl	80012a0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d908      	bls.n	8004a14 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e9      	bne.n	80049f4 <RCCEx_PLLSAI2_Config+0x84>
 8004a20:	e000      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004a22:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d144      	bne.n	8004ab4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d115      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a30:	4b23      	ldr	r3, [pc, #140]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	4b23      	ldr	r3, [pc, #140]	@ (8004ac4 <RCCEx_PLLSAI2_Config+0x154>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6892      	ldr	r2, [r2, #8]
 8004a3c:	0211      	lsls	r1, r2, #8
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68d2      	ldr	r2, [r2, #12]
 8004a42:	06d2      	lsls	r2, r2, #27
 8004a44:	4311      	orrs	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6852      	ldr	r2, [r2, #4]
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	491a      	ldr	r1, [pc, #104]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a68:	f7fc fc1a 	bl	80012a0 <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a6e:	e00f      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a70:	f7fc fc16 	bl	80012a0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d908      	bls.n	8004a90 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004a8e:	e006      	b.n	8004a9e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0e9      	beq.n	8004a70 <RCCEx_PLLSAI2_Config+0x100>
 8004a9c:	e000      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004a9e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	4904      	ldr	r1, [pc, #16]	@ (8004ac0 <RCCEx_PLLSAI2_Config+0x150>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	07ff800c 	.word	0x07ff800c

08004ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e042      	b.n	8004b60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc f9bf 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	@ 0x24
 8004af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fbb6 	bl	8005284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8b3 	bl	8004c84 <UART_SetConfig>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e01b      	b.n	8004b60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fc35 	bl	80053c8 <UART_CheckIdleState>
 8004b5e:	4603      	mov	r3, r0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d17b      	bne.n	8004c7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_UART_Transmit+0x26>
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e074      	b.n	8004c7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	@ 0x21
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba2:	f7fc fb7d 	bl	80012a0 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc0:	d108      	bne.n	8004bd4 <HAL_UART_Transmit+0x6c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e003      	b.n	8004bdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bdc:	e030      	b.n	8004c40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2180      	movs	r1, #128	@ 0x80
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fc97 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e03d      	b.n	8004c7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e007      	b.n	8004c2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1c8      	bne.n	8004bde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2140      	movs	r1, #64	@ 0x40
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fc60 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b08c      	sub	sp, #48	@ 0x30
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4baa      	ldr	r3, [pc, #680]	@ (8004f5c <UART_SetConfig+0x2d8>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a9f      	ldr	r2, [pc, #636]	@ (8004f60 <UART_SetConfig+0x2dc>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cec:	4313      	orrs	r3, r2
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004cfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	f023 010f 	bic.w	r1, r3, #15
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a90      	ldr	r2, [pc, #576]	@ (8004f64 <UART_SetConfig+0x2e0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d125      	bne.n	8004d74 <UART_SetConfig+0xf0>
 8004d28:	4b8f      	ldr	r3, [pc, #572]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d81a      	bhi.n	8004d6c <UART_SetConfig+0xe8>
 8004d36:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <UART_SetConfig+0xb8>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d52:	e116      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5a:	e112      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d62:	e10e      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	e10a      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d72:	e106      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7c      	ldr	r2, [pc, #496]	@ (8004f6c <UART_SetConfig+0x2e8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d138      	bne.n	8004df0 <UART_SetConfig+0x16c>
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d82d      	bhi.n	8004de8 <UART_SetConfig+0x164>
 8004d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0x110>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dce:	e0d8      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd6:	e0d4      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dde:	e0d0      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de6:	e0cc      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dee:	e0c8      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <UART_SetConfig+0x2ec>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d125      	bne.n	8004e46 <UART_SetConfig+0x1c2>
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e04:	2b30      	cmp	r3, #48	@ 0x30
 8004e06:	d016      	beq.n	8004e36 <UART_SetConfig+0x1b2>
 8004e08:	2b30      	cmp	r3, #48	@ 0x30
 8004e0a:	d818      	bhi.n	8004e3e <UART_SetConfig+0x1ba>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d00a      	beq.n	8004e26 <UART_SetConfig+0x1a2>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d814      	bhi.n	8004e3e <UART_SetConfig+0x1ba>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <UART_SetConfig+0x19a>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d008      	beq.n	8004e2e <UART_SetConfig+0x1aa>
 8004e1c:	e00f      	b.n	8004e3e <UART_SetConfig+0x1ba>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e24:	e0ad      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e26:	2302      	movs	r3, #2
 8004e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e34:	e0a5      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e36:	2308      	movs	r3, #8
 8004e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3c:	e0a1      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e3e:	2310      	movs	r3, #16
 8004e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e44:	e09d      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f74 <UART_SetConfig+0x2f0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x218>
 8004e50:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e5c:	d016      	beq.n	8004e8c <UART_SetConfig+0x208>
 8004e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e60:	d818      	bhi.n	8004e94 <UART_SetConfig+0x210>
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	d00a      	beq.n	8004e7c <UART_SetConfig+0x1f8>
 8004e66:	2b80      	cmp	r3, #128	@ 0x80
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x210>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <UART_SetConfig+0x1f0>
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d008      	beq.n	8004e84 <UART_SetConfig+0x200>
 8004e72:	e00f      	b.n	8004e94 <UART_SetConfig+0x210>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7a:	e082      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e82:	e07e      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8a:	e07a      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e92:	e076      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e072      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <UART_SetConfig+0x2f4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12a      	bne.n	8004efc <UART_SetConfig+0x278>
 8004ea6:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eb4:	d01a      	beq.n	8004eec <UART_SetConfig+0x268>
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eba:	d81b      	bhi.n	8004ef4 <UART_SetConfig+0x270>
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec0:	d00c      	beq.n	8004edc <UART_SetConfig+0x258>
 8004ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec6:	d815      	bhi.n	8004ef4 <UART_SetConfig+0x270>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <UART_SetConfig+0x250>
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x260>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x270>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eda:	e052      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee2:	e04e      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	e04a      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef2:	e046      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efa:	e042      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	@ (8004f60 <UART_SetConfig+0x2dc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d13a      	bne.n	8004f7c <UART_SetConfig+0x2f8>
 8004f06:	4b18      	ldr	r3, [pc, #96]	@ (8004f68 <UART_SetConfig+0x2e4>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x2c8>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x2d0>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x2b8>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x2d0>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x2b0>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x2c0>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x2d0>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e022      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f42:	e01e      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4a:	e01a      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x2fe>
 8004f5c:	cfff69f3 	.word	0xcfff69f3
 8004f60:	40008000 	.word	0x40008000
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4ab0      	ldr	r2, [pc, #704]	@ (8005248 <UART_SetConfig+0x5c4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f040 809b 	bne.w	80050c4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d827      	bhi.n	8004fe6 <UART_SetConfig+0x362>
 8004f96:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <UART_SetConfig+0x318>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe ff72 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc6:	e014      	b.n	8004ff2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe ff82 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b9e      	ldr	r3, [pc, #632]	@ (800524c <UART_SetConfig+0x5c8>)
 8004fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe feb5 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8004fda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8130 	beq.w	800525a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	4a94      	ldr	r2, [pc, #592]	@ (8005250 <UART_SetConfig+0x5cc>)
 8005000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005004:	461a      	mov	r2, r3
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	fbb3 f3f2 	udiv	r3, r3, r2
 800500c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4413      	add	r3, r2
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	429a      	cmp	r2, r3
 800501c:	d305      	bcc.n	800502a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d903      	bls.n	8005032 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005030:	e113      	b.n	800525a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	2200      	movs	r2, #0
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	60fa      	str	r2, [r7, #12]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	4a84      	ldr	r2, [pc, #528]	@ (8005250 <UART_SetConfig+0x5cc>)
 8005040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005044:	b29b      	uxth	r3, r3
 8005046:	2200      	movs	r2, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005054:	f7fb f8f6 	bl	8000244 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	020b      	lsls	r3, r1, #8
 800506a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800506e:	0202      	lsls	r2, r0, #8
 8005070:	6979      	ldr	r1, [r7, #20]
 8005072:	6849      	ldr	r1, [r1, #4]
 8005074:	0849      	lsrs	r1, r1, #1
 8005076:	2000      	movs	r0, #0
 8005078:	460c      	mov	r4, r1
 800507a:	4605      	mov	r5, r0
 800507c:	eb12 0804 	adds.w	r8, r2, r4
 8005080:	eb43 0905 	adc.w	r9, r3, r5
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	469a      	mov	sl, r3
 800508c:	4693      	mov	fp, r2
 800508e:	4652      	mov	r2, sl
 8005090:	465b      	mov	r3, fp
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f8d5 	bl	8000244 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4613      	mov	r3, r2
 80050a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a8:	d308      	bcc.n	80050bc <UART_SetConfig+0x438>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b0:	d204      	bcs.n	80050bc <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a3a      	ldr	r2, [r7, #32]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	e0ce      	b.n	800525a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050c2:	e0ca      	b.n	800525a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d166      	bne.n	800519c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80050ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d827      	bhi.n	8005126 <UART_SetConfig+0x4a2>
 80050d6:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0x458>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005127 	.word	0x08005127
 80050fc:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fe fed2 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005106:	e014      	b.n	8005132 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe fee2 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510e:	e010      	b.n	8005132 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b4e      	ldr	r3, [pc, #312]	@ (800524c <UART_SetConfig+0x5c8>)
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe fe15 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511c:	e009      	b.n	8005132 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005124:	e005      	b.n	8005132 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8090 	beq.w	800525a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	4a44      	ldr	r2, [pc, #272]	@ (8005250 <UART_SetConfig+0x5cc>)
 8005140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005144:	461a      	mov	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	fbb3 f3f2 	udiv	r3, r3, r2
 800514c:	005a      	lsls	r2, r3, #1
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	441a      	add	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d916      	bls.n	8005194 <UART_SetConfig+0x510>
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d212      	bcs.n	8005194 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f023 030f 	bic.w	r3, r3, #15
 8005176:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	b29a      	uxth	r2, r3
 8005184:	8bfb      	ldrh	r3, [r7, #30]
 8005186:	4313      	orrs	r3, r2
 8005188:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	8bfa      	ldrh	r2, [r7, #30]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e062      	b.n	800525a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800519a:	e05e      	b.n	800525a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800519c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d828      	bhi.n	80051f6 <UART_SetConfig+0x572>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0x528>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fe fe6a 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80051d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051d6:	e014      	b.n	8005202 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fe fe7a 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 80051dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051de:	e010      	b.n	8005202 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b1a      	ldr	r3, [pc, #104]	@ (800524c <UART_SetConfig+0x5c8>)
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051e4:	e00d      	b.n	8005202 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe fdad 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80051ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ec:	e009      	b.n	8005202 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051f4:	e005      	b.n	8005202 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005200:	bf00      	nop
    }

    if (pclk != 0U)
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d028      	beq.n	800525a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	4a10      	ldr	r2, [pc, #64]	@ (8005250 <UART_SetConfig+0x5cc>)
 800520e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005212:	461a      	mov	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	fbb3 f2f2 	udiv	r2, r3, r2
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	441a      	add	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d910      	bls.n	8005254 <UART_SetConfig+0x5d0>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005238:	d20c      	bcs.n	8005254 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	b29a      	uxth	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e009      	b.n	800525a <UART_SetConfig+0x5d6>
 8005246:	bf00      	nop
 8005248:	40008000 	.word	0x40008000
 800524c:	00f42400 	.word	0x00f42400
 8005250:	080062b4 	.word	0x080062b4
      }
      else
      {
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2201      	movs	r2, #1
 800525e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2201      	movs	r2, #1
 8005266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2200      	movs	r2, #0
 8005274:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005276:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800527a:	4618      	mov	r0, r3
 800527c:	3730      	adds	r7, #48	@ 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01a      	beq.n	800539a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005382:	d10a      	bne.n	800539a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b098      	sub	sp, #96	@ 0x60
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d8:	f7fb ff62 	bl	80012a0 <HAL_GetTick>
 80053dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d12f      	bne.n	800544c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f88e 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d022      	beq.n	800544c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
 8005426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800542a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e063      	b.n	8005514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d149      	bne.n	80054ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005462:	2200      	movs	r2, #0
 8005464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f857 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d03c      	beq.n	80054ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005492:	633b      	str	r3, [r7, #48]	@ 0x30
 8005494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c6:	61fa      	str	r2, [r7, #28]
 80054c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	617b      	str	r3, [r7, #20]
   return(result);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e012      	b.n	8005514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3758      	adds	r7, #88	@ 0x58
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552c:	e04f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d04b      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fb feb3 	bl	80012a0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <UART_WaitOnFlagUntilTimeout+0x30>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e04e      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d037      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d034      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d031      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b08      	cmp	r3, #8
 8005576:	d110      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2208      	movs	r2, #8
 800557e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f838 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2208      	movs	r2, #8
 800558a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e029      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a8:	d111      	bne.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f81e 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00f      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d0a0      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b095      	sub	sp, #84	@ 0x54
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
 800561e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800565a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e3      	bne.n	8005630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d118      	bne.n	80056a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	60bb      	str	r3, [r7, #8]
   return(result);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 0310 	bic.w	r3, r3, #16
 8005684:	647b      	str	r3, [r7, #68]	@ 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6979      	ldr	r1, [r7, #20]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	613b      	str	r3, [r7, #16]
   return(result);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056b6:	bf00      	nop
 80056b8:	3754      	adds	r7, #84	@ 0x54
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e027      	b.n	8005728 <HAL_UARTEx_DisableFifoMode+0x66>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2224      	movs	r2, #36	@ 0x24
 80056e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005706:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e02d      	b.n	80057a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	@ 0x24
 8005758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f84f 	bl	800582c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e02d      	b.n	8005824 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	@ 0x24
 80057d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f811 	bl	800582c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005838:	2b00      	cmp	r3, #0
 800583a:	d108      	bne.n	800584e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800584c:	e031      	b.n	80058b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800584e:	2308      	movs	r3, #8
 8005850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005852:	2308      	movs	r3, #8
 8005854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	0e5b      	lsrs	r3, r3, #25
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	0f5b      	lsrs	r3, r3, #29
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	7b3a      	ldrb	r2, [r7, #12]
 800587a:	4911      	ldr	r1, [pc, #68]	@ (80058c0 <UARTEx_SetNbDataToProcess+0x94>)
 800587c:	5c8a      	ldrb	r2, [r1, r2]
 800587e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005882:	7b3a      	ldrb	r2, [r7, #12]
 8005884:	490f      	ldr	r1, [pc, #60]	@ (80058c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005888:	fb93 f3f2 	sdiv	r3, r3, r2
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	7b7a      	ldrb	r2, [r7, #13]
 8005898:	4909      	ldr	r1, [pc, #36]	@ (80058c0 <UARTEx_SetNbDataToProcess+0x94>)
 800589a:	5c8a      	ldrb	r2, [r1, r2]
 800589c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058a0:	7b7a      	ldrb	r2, [r7, #13]
 80058a2:	4908      	ldr	r1, [pc, #32]	@ (80058c4 <UARTEx_SetNbDataToProcess+0x98>)
 80058a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	080062cc 	.word	0x080062cc
 80058c4:	080062d4 	.word	0x080062d4

080058c8 <siprintf>:
 80058c8:	b40e      	push	{r1, r2, r3}
 80058ca:	b500      	push	{lr}
 80058cc:	b09c      	sub	sp, #112	@ 0x70
 80058ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	9107      	str	r1, [sp, #28]
 80058da:	9104      	str	r1, [sp, #16]
 80058dc:	4808      	ldr	r0, [pc, #32]	@ (8005900 <siprintf+0x38>)
 80058de:	4909      	ldr	r1, [pc, #36]	@ (8005904 <siprintf+0x3c>)
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	a902      	add	r1, sp, #8
 80058e8:	6800      	ldr	r0, [r0, #0]
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f000 f994 	bl	8005c18 <_svfiprintf_r>
 80058f0:	9b02      	ldr	r3, [sp, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	b01c      	add	sp, #112	@ 0x70
 80058f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058fc:	b003      	add	sp, #12
 80058fe:	4770      	bx	lr
 8005900:	2000000c 	.word	0x2000000c
 8005904:	ffff0208 	.word	0xffff0208

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	@ (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000000c 	.word	0x2000000c

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	@ (800595c <__libc_init_array+0x38>)
 8005928:	2600      	movs	r6, #0
 800592a:	4c0d      	ldr	r4, [pc, #52]	@ (8005960 <__libc_init_array+0x3c>)
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	@ (8005964 <__libc_init_array+0x40>)
 8005936:	2600      	movs	r6, #0
 8005938:	4c0b      	ldr	r4, [pc, #44]	@ (8005968 <__libc_init_array+0x44>)
 800593a:	f000 fc77 	bl	800622c <_init>
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	3601      	adds	r6, #1
 800594e:	4798      	blx	r3
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	3601      	adds	r6, #1
 8005958:	4798      	blx	r3
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	08006318 	.word	0x08006318
 8005960:	08006318 	.word	0x08006318
 8005964:	08006318 	.word	0x08006318
 8005968:	0800631c 	.word	0x0800631c

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <_free_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	2900      	cmp	r1, #0
 8005976:	d041      	beq.n	80059fc <_free_r+0x8c>
 8005978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597c:	1f0c      	subs	r4, r1, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	18e4      	addlt	r4, r4, r3
 8005984:	f000 f8e0 	bl	8005b48 <__malloc_lock>
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <_free_r+0x90>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	b933      	cbnz	r3, 800599c <_free_r+0x2c>
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	4628      	mov	r0, r5
 8005994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005998:	f000 b8dc 	b.w	8005b54 <__malloc_unlock>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x42>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf01      	itttt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	1809      	addeq	r1, r1, r0
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	e7ed      	b.n	800598e <_free_r+0x1e>
 80059b2:	461a      	mov	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b10b      	cbz	r3, 80059bc <_free_r+0x4c>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d9fa      	bls.n	80059b2 <_free_r+0x42>
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	1850      	adds	r0, r2, r1
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d10b      	bne.n	80059dc <_free_r+0x6c>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	4401      	add	r1, r0
 80059c8:	1850      	adds	r0, r2, r1
 80059ca:	6011      	str	r1, [r2, #0]
 80059cc:	4283      	cmp	r3, r0
 80059ce:	d1e0      	bne.n	8005992 <_free_r+0x22>
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4408      	add	r0, r1
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	6010      	str	r0, [r2, #0]
 80059da:	e7da      	b.n	8005992 <_free_r+0x22>
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x74>
 80059de:	230c      	movs	r3, #12
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	e7d6      	b.n	8005992 <_free_r+0x22>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	1821      	adds	r1, r4, r0
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf02      	ittt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	1809      	addeq	r1, r1, r0
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	bf08      	it	eq
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	e7ca      	b.n	8005992 <_free_r+0x22>
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	200002c0 	.word	0x200002c0

08005a04 <sbrk_aligned>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4e0f      	ldr	r6, [pc, #60]	@ (8005a44 <sbrk_aligned+0x40>)
 8005a08:	460c      	mov	r4, r1
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	6831      	ldr	r1, [r6, #0]
 8005a0e:	b911      	cbnz	r1, 8005a16 <sbrk_aligned+0x12>
 8005a10:	f000 fbaa 	bl	8006168 <_sbrk_r>
 8005a14:	6030      	str	r0, [r6, #0]
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 fba5 	bl	8006168 <_sbrk_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d103      	bne.n	8005a2a <sbrk_aligned+0x26>
 8005a22:	f04f 34ff 	mov.w	r4, #4294967295
 8005a26:	4620      	mov	r0, r4
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	1cc4      	adds	r4, r0, #3
 8005a2c:	f024 0403 	bic.w	r4, r4, #3
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d0f8      	beq.n	8005a26 <sbrk_aligned+0x22>
 8005a34:	1a21      	subs	r1, r4, r0
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 fb96 	bl	8006168 <_sbrk_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1f2      	bne.n	8005a26 <sbrk_aligned+0x22>
 8005a40:	e7ef      	b.n	8005a22 <sbrk_aligned+0x1e>
 8005a42:	bf00      	nop
 8005a44:	200002bc 	.word	0x200002bc

08005a48 <_malloc_r>:
 8005a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a4c:	1ccd      	adds	r5, r1, #3
 8005a4e:	4606      	mov	r6, r0
 8005a50:	f025 0503 	bic.w	r5, r5, #3
 8005a54:	3508      	adds	r5, #8
 8005a56:	2d0c      	cmp	r5, #12
 8005a58:	bf38      	it	cc
 8005a5a:	250c      	movcc	r5, #12
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	db01      	blt.n	8005a64 <_malloc_r+0x1c>
 8005a60:	42a9      	cmp	r1, r5
 8005a62:	d904      	bls.n	8005a6e <_malloc_r+0x26>
 8005a64:	230c      	movs	r3, #12
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b44 <_malloc_r+0xfc>
 8005a72:	f000 f869 	bl	8005b48 <__malloc_lock>
 8005a76:	f8d8 3000 	ldr.w	r3, [r8]
 8005a7a:	461c      	mov	r4, r3
 8005a7c:	bb44      	cbnz	r4, 8005ad0 <_malloc_r+0x88>
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbf 	bl	8005a04 <sbrk_aligned>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	4604      	mov	r4, r0
 8005a8a:	d158      	bne.n	8005b3e <_malloc_r+0xf6>
 8005a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a90:	4627      	mov	r7, r4
 8005a92:	2f00      	cmp	r7, #0
 8005a94:	d143      	bne.n	8005b1e <_malloc_r+0xd6>
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d04b      	beq.n	8005b32 <_malloc_r+0xea>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	eb04 0903 	add.w	r9, r4, r3
 8005aa4:	f000 fb60 	bl	8006168 <_sbrk_r>
 8005aa8:	4581      	cmp	r9, r0
 8005aaa:	d142      	bne.n	8005b32 <_malloc_r+0xea>
 8005aac:	6821      	ldr	r1, [r4, #0]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	1a6d      	subs	r5, r5, r1
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7ff ffa6 	bl	8005a04 <sbrk_aligned>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d03a      	beq.n	8005b32 <_malloc_r+0xea>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	442b      	add	r3, r5
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	bb62      	cbnz	r2, 8005b24 <_malloc_r+0xdc>
 8005aca:	f8c8 7000 	str.w	r7, [r8]
 8005ace:	e00f      	b.n	8005af0 <_malloc_r+0xa8>
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	1b52      	subs	r2, r2, r5
 8005ad4:	d420      	bmi.n	8005b18 <_malloc_r+0xd0>
 8005ad6:	2a0b      	cmp	r2, #11
 8005ad8:	d917      	bls.n	8005b0a <_malloc_r+0xc2>
 8005ada:	1961      	adds	r1, r4, r5
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	bf18      	it	ne
 8005ae2:	6059      	strne	r1, [r3, #4]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	bf08      	it	eq
 8005ae8:	f8c8 1000 	streq.w	r1, [r8]
 8005aec:	5162      	str	r2, [r4, r5]
 8005aee:	604b      	str	r3, [r1, #4]
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f82f 	bl	8005b54 <__malloc_unlock>
 8005af6:	f104 000b 	add.w	r0, r4, #11
 8005afa:	1d23      	adds	r3, r4, #4
 8005afc:	f020 0007 	bic.w	r0, r0, #7
 8005b00:	1ac2      	subs	r2, r0, r3
 8005b02:	bf1c      	itt	ne
 8005b04:	1a1b      	subne	r3, r3, r0
 8005b06:	50a3      	strne	r3, [r4, r2]
 8005b08:	e7af      	b.n	8005a6a <_malloc_r+0x22>
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	bf0c      	ite	eq
 8005b10:	f8c8 2000 	streq.w	r2, [r8]
 8005b14:	605a      	strne	r2, [r3, #4]
 8005b16:	e7eb      	b.n	8005af0 <_malloc_r+0xa8>
 8005b18:	4623      	mov	r3, r4
 8005b1a:	6864      	ldr	r4, [r4, #4]
 8005b1c:	e7ae      	b.n	8005a7c <_malloc_r+0x34>
 8005b1e:	463c      	mov	r4, r7
 8005b20:	687f      	ldr	r7, [r7, #4]
 8005b22:	e7b6      	b.n	8005a92 <_malloc_r+0x4a>
 8005b24:	461a      	mov	r2, r3
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d1fb      	bne.n	8005b24 <_malloc_r+0xdc>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6053      	str	r3, [r2, #4]
 8005b30:	e7de      	b.n	8005af0 <_malloc_r+0xa8>
 8005b32:	230c      	movs	r3, #12
 8005b34:	4630      	mov	r0, r6
 8005b36:	6033      	str	r3, [r6, #0]
 8005b38:	f000 f80c 	bl	8005b54 <__malloc_unlock>
 8005b3c:	e794      	b.n	8005a68 <_malloc_r+0x20>
 8005b3e:	6005      	str	r5, [r0, #0]
 8005b40:	e7d6      	b.n	8005af0 <_malloc_r+0xa8>
 8005b42:	bf00      	nop
 8005b44:	200002c0 	.word	0x200002c0

08005b48 <__malloc_lock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	@ (8005b50 <__malloc_lock+0x8>)
 8005b4a:	f7ff bf0f 	b.w	800596c <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	200002b8 	.word	0x200002b8

08005b54 <__malloc_unlock>:
 8005b54:	4801      	ldr	r0, [pc, #4]	@ (8005b5c <__malloc_unlock+0x8>)
 8005b56:	f7ff bf0a 	b.w	800596e <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200002b8 	.word	0x200002b8

08005b60 <__ssputs_r>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	461f      	mov	r7, r3
 8005b66:	688e      	ldr	r6, [r1, #8]
 8005b68:	4682      	mov	sl, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	42be      	cmp	r6, r7
 8005b6e:	4690      	mov	r8, r2
 8005b70:	680b      	ldr	r3, [r1, #0]
 8005b72:	d82d      	bhi.n	8005bd0 <__ssputs_r+0x70>
 8005b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b7c:	d026      	beq.n	8005bcc <__ssputs_r+0x6c>
 8005b7e:	6965      	ldr	r5, [r4, #20]
 8005b80:	6909      	ldr	r1, [r1, #16]
 8005b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b86:	eba3 0901 	sub.w	r9, r3, r1
 8005b8a:	1c7b      	adds	r3, r7, #1
 8005b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b90:	444b      	add	r3, r9
 8005b92:	106d      	asrs	r5, r5, #1
 8005b94:	429d      	cmp	r5, r3
 8005b96:	bf38      	it	cc
 8005b98:	461d      	movcc	r5, r3
 8005b9a:	0553      	lsls	r3, r2, #21
 8005b9c:	d527      	bpl.n	8005bee <__ssputs_r+0x8e>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7ff ff52 	bl	8005a48 <_malloc_r>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	b360      	cbz	r0, 8005c02 <__ssputs_r+0xa2>
 8005ba8:	464a      	mov	r2, r9
 8005baa:	6921      	ldr	r1, [r4, #16]
 8005bac:	f000 fafa 	bl	80061a4 <memcpy>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6126      	str	r6, [r4, #16]
 8005bbe:	444e      	add	r6, r9
 8005bc0:	6165      	str	r5, [r4, #20]
 8005bc2:	eba5 0509 	sub.w	r5, r5, r9
 8005bc6:	6026      	str	r6, [r4, #0]
 8005bc8:	463e      	mov	r6, r7
 8005bca:	60a5      	str	r5, [r4, #8]
 8005bcc:	42be      	cmp	r6, r7
 8005bce:	d900      	bls.n	8005bd2 <__ssputs_r+0x72>
 8005bd0:	463e      	mov	r6, r7
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	f000 faac 	bl	8006134 <memmove>
 8005bdc:	68a3      	ldr	r3, [r4, #8]
 8005bde:	2000      	movs	r0, #0
 8005be0:	1b9b      	subs	r3, r3, r6
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	4433      	add	r3, r6
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	462a      	mov	r2, r5
 8005bf0:	f000 fae5 	bl	80061be <_realloc_r>
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1e0      	bne.n	8005bbc <__ssputs_r+0x5c>
 8005bfa:	6921      	ldr	r1, [r4, #16]
 8005bfc:	4650      	mov	r0, sl
 8005bfe:	f7ff feb7 	bl	8005970 <_free_r>
 8005c02:	230c      	movs	r3, #12
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	f8ca 3000 	str.w	r3, [sl]
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	e7e9      	b.n	8005bea <__ssputs_r+0x8a>
	...

08005c18 <_svfiprintf_r>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	898b      	ldrh	r3, [r1, #12]
 8005c20:	b09d      	sub	sp, #116	@ 0x74
 8005c22:	4607      	mov	r7, r0
 8005c24:	061b      	lsls	r3, r3, #24
 8005c26:	460d      	mov	r5, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	d510      	bpl.n	8005c4e <_svfiprintf_r+0x36>
 8005c2c:	690b      	ldr	r3, [r1, #16]
 8005c2e:	b973      	cbnz	r3, 8005c4e <_svfiprintf_r+0x36>
 8005c30:	2140      	movs	r1, #64	@ 0x40
 8005c32:	f7ff ff09 	bl	8005a48 <_malloc_r>
 8005c36:	6028      	str	r0, [r5, #0]
 8005c38:	6128      	str	r0, [r5, #16]
 8005c3a:	b930      	cbnz	r0, 8005c4a <_svfiprintf_r+0x32>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b01d      	add	sp, #116	@ 0x74
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	2340      	movs	r3, #64	@ 0x40
 8005c4c:	616b      	str	r3, [r5, #20]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c54:	f04f 0901 	mov.w	r9, #1
 8005c58:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8005dfc <_svfiprintf_r+0x1e4>
 8005c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c5e:	2320      	movs	r3, #32
 8005c60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c64:	2330      	movs	r3, #48	@ 0x30
 8005c66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c72:	b10a      	cbz	r2, 8005c78 <_svfiprintf_r+0x60>
 8005c74:	2a25      	cmp	r2, #37	@ 0x25
 8005c76:	d1f9      	bne.n	8005c6c <_svfiprintf_r+0x54>
 8005c78:	ebba 0b04 	subs.w	fp, sl, r4
 8005c7c:	d00b      	beq.n	8005c96 <_svfiprintf_r+0x7e>
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4622      	mov	r2, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ff6b 	bl	8005b60 <__ssputs_r>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f000 80a7 	beq.w	8005dde <_svfiprintf_r+0x1c6>
 8005c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c92:	445a      	add	r2, fp
 8005c94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c96:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 809f 	beq.w	8005dde <_svfiprintf_r+0x1c6>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	f10a 0a01 	add.w	sl, sl, #1
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	9307      	str	r3, [sp, #28]
 8005cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb8:	4654      	mov	r4, sl
 8005cba:	2205      	movs	r2, #5
 8005cbc:	484f      	ldr	r0, [pc, #316]	@ (8005dfc <_svfiprintf_r+0x1e4>)
 8005cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc2:	f000 fa61 	bl	8006188 <memchr>
 8005cc6:	9a04      	ldr	r2, [sp, #16]
 8005cc8:	b9d8      	cbnz	r0, 8005d02 <_svfiprintf_r+0xea>
 8005cca:	06d0      	lsls	r0, r2, #27
 8005ccc:	bf44      	itt	mi
 8005cce:	2320      	movmi	r3, #32
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cd4:	0711      	lsls	r1, r2, #28
 8005cd6:	bf44      	itt	mi
 8005cd8:	232b      	movmi	r3, #43	@ 0x2b
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce4:	d015      	beq.n	8005d12 <_svfiprintf_r+0xfa>
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	4654      	mov	r4, sl
 8005cea:	2000      	movs	r0, #0
 8005cec:	f04f 0c0a 	mov.w	ip, #10
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf6:	3b30      	subs	r3, #48	@ 0x30
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d94b      	bls.n	8005d94 <_svfiprintf_r+0x17c>
 8005cfc:	b1b0      	cbz	r0, 8005d2c <_svfiprintf_r+0x114>
 8005cfe:	9207      	str	r2, [sp, #28]
 8005d00:	e014      	b.n	8005d2c <_svfiprintf_r+0x114>
 8005d02:	eba0 0308 	sub.w	r3, r0, r8
 8005d06:	46a2      	mov	sl, r4
 8005d08:	fa09 f303 	lsl.w	r3, r9, r3
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	e7d2      	b.n	8005cb8 <_svfiprintf_r+0xa0>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	9103      	str	r1, [sp, #12]
 8005d1c:	bfbb      	ittet	lt
 8005d1e:	425b      	neglt	r3, r3
 8005d20:	f042 0202 	orrlt.w	r2, r2, #2
 8005d24:	9307      	strge	r3, [sp, #28]
 8005d26:	9307      	strlt	r3, [sp, #28]
 8005d28:	bfb8      	it	lt
 8005d2a:	9204      	strlt	r2, [sp, #16]
 8005d2c:	7823      	ldrb	r3, [r4, #0]
 8005d2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d30:	d10a      	bne.n	8005d48 <_svfiprintf_r+0x130>
 8005d32:	7863      	ldrb	r3, [r4, #1]
 8005d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d36:	d132      	bne.n	8005d9e <_svfiprintf_r+0x186>
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	3402      	adds	r4, #2
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d44:	9203      	str	r2, [sp, #12]
 8005d46:	9305      	str	r3, [sp, #20]
 8005d48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e0c <_svfiprintf_r+0x1f4>
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	7821      	ldrb	r1, [r4, #0]
 8005d50:	4650      	mov	r0, sl
 8005d52:	f000 fa19 	bl	8006188 <memchr>
 8005d56:	b138      	cbz	r0, 8005d68 <_svfiprintf_r+0x150>
 8005d58:	eba0 000a 	sub.w	r0, r0, sl
 8005d5c:	2240      	movs	r2, #64	@ 0x40
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	3401      	adds	r4, #1
 8005d62:	4082      	lsls	r2, r0
 8005d64:	4313      	orrs	r3, r2
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	4824      	ldr	r0, [pc, #144]	@ (8005e00 <_svfiprintf_r+0x1e8>)
 8005d70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d74:	f000 fa08 	bl	8006188 <memchr>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d036      	beq.n	8005dea <_svfiprintf_r+0x1d2>
 8005d7c:	4b21      	ldr	r3, [pc, #132]	@ (8005e04 <_svfiprintf_r+0x1ec>)
 8005d7e:	bb1b      	cbnz	r3, 8005dc8 <_svfiprintf_r+0x1b0>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	3307      	adds	r3, #7
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	3308      	adds	r3, #8
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d8e:	4433      	add	r3, r6
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	e76a      	b.n	8005c6a <_svfiprintf_r+0x52>
 8005d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d98:	460c      	mov	r4, r1
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	e7a8      	b.n	8005cf0 <_svfiprintf_r+0xd8>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	3401      	adds	r4, #1
 8005da2:	f04f 0c0a 	mov.w	ip, #10
 8005da6:	4619      	mov	r1, r3
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	4620      	mov	r0, r4
 8005dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db0:	3a30      	subs	r2, #48	@ 0x30
 8005db2:	2a09      	cmp	r2, #9
 8005db4:	d903      	bls.n	8005dbe <_svfiprintf_r+0x1a6>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c6      	beq.n	8005d48 <_svfiprintf_r+0x130>
 8005dba:	9105      	str	r1, [sp, #20]
 8005dbc:	e7c4      	b.n	8005d48 <_svfiprintf_r+0x130>
 8005dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e7f0      	b.n	8005daa <_svfiprintf_r+0x192>
 8005dc8:	ab03      	add	r3, sp, #12
 8005dca:	462a      	mov	r2, r5
 8005dcc:	a904      	add	r1, sp, #16
 8005dce:	4638      	mov	r0, r7
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <_svfiprintf_r+0x1f0>)
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	1c42      	adds	r2, r0, #1
 8005dda:	4606      	mov	r6, r0
 8005ddc:	d1d6      	bne.n	8005d8c <_svfiprintf_r+0x174>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	065b      	lsls	r3, r3, #25
 8005de2:	f53f af2d 	bmi.w	8005c40 <_svfiprintf_r+0x28>
 8005de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005de8:	e72c      	b.n	8005c44 <_svfiprintf_r+0x2c>
 8005dea:	ab03      	add	r3, sp, #12
 8005dec:	462a      	mov	r2, r5
 8005dee:	a904      	add	r1, sp, #16
 8005df0:	4638      	mov	r0, r7
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <_svfiprintf_r+0x1f0>)
 8005df6:	f000 f87d 	bl	8005ef4 <_printf_i>
 8005dfa:	e7ed      	b.n	8005dd8 <_svfiprintf_r+0x1c0>
 8005dfc:	080062dc 	.word	0x080062dc
 8005e00:	080062e6 	.word	0x080062e6
 8005e04:	00000000 	.word	0x00000000
 8005e08:	08005b61 	.word	0x08005b61
 8005e0c:	080062e2 	.word	0x080062e2

08005e10 <_printf_common>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	4616      	mov	r6, r2
 8005e16:	4698      	mov	r8, r3
 8005e18:	688a      	ldr	r2, [r1, #8]
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	690b      	ldr	r3, [r1, #16]
 8005e1e:	460c      	mov	r4, r1
 8005e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	bfb8      	it	lt
 8005e28:	4613      	movlt	r3, r2
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e30:	b10a      	cbz	r2, 8005e36 <_printf_common+0x26>
 8005e32:	3301      	adds	r3, #1
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	0699      	lsls	r1, r3, #26
 8005e3a:	bf42      	ittt	mi
 8005e3c:	6833      	ldrmi	r3, [r6, #0]
 8005e3e:	3302      	addmi	r3, #2
 8005e40:	6033      	strmi	r3, [r6, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d106      	bne.n	8005e58 <_printf_common+0x48>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc2b      	bgt.n	8005eb0 <_printf_common+0xa0>
 8005e58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	3b00      	subs	r3, #0
 8005e60:	bf18      	it	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	0692      	lsls	r2, r2, #26
 8005e66:	d430      	bmi.n	8005eca <_printf_common+0xba>
 8005e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c8      	blx	r9
 8005e72:	3001      	adds	r0, #1
 8005e74:	d023      	beq.n	8005ebe <_printf_common+0xae>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	341a      	adds	r4, #26
 8005e7a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005e7e:	f003 0306 	and.w	r3, r3, #6
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	bf0a      	itet	eq
 8005e86:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005e8a:	2500      	movne	r5, #0
 8005e8c:	6833      	ldreq	r3, [r6, #0]
 8005e8e:	f04f 0600 	mov.w	r6, #0
 8005e92:	bf08      	it	eq
 8005e94:	1aed      	subeq	r5, r5, r3
 8005e96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e9a:	bf08      	it	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bfc4      	itt	gt
 8005ea4:	1a9b      	subgt	r3, r3, r2
 8005ea6:	18ed      	addgt	r5, r5, r3
 8005ea8:	42b5      	cmp	r5, r6
 8005eaa:	d11a      	bne.n	8005ee2 <_printf_common+0xd2>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e008      	b.n	8005ec2 <_printf_common+0xb2>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c8      	blx	r9
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d103      	bne.n	8005ec6 <_printf_common+0xb6>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	e7c1      	b.n	8005e4e <_printf_common+0x3e>
 8005eca:	18e1      	adds	r1, r4, r3
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	2030      	movs	r0, #48	@ 0x30
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	4422      	add	r2, r4
 8005ed4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee0:	e7c2      	b.n	8005e68 <_printf_common+0x58>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	4638      	mov	r0, r7
 8005eea:	47c8      	blx	r9
 8005eec:	3001      	adds	r0, #1
 8005eee:	d0e6      	beq.n	8005ebe <_printf_common+0xae>
 8005ef0:	3601      	adds	r6, #1
 8005ef2:	e7d9      	b.n	8005ea8 <_printf_common+0x98>

08005ef4 <_printf_i>:
 8005ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	7e0f      	ldrb	r7, [r1, #24]
 8005efa:	4691      	mov	r9, r2
 8005efc:	4680      	mov	r8, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	2f78      	cmp	r7, #120	@ 0x78
 8005f02:	469a      	mov	sl, r3
 8005f04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f0a:	d807      	bhi.n	8005f1c <_printf_i+0x28>
 8005f0c:	2f62      	cmp	r7, #98	@ 0x62
 8005f0e:	d80a      	bhi.n	8005f26 <_printf_i+0x32>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	f000 80d2 	beq.w	80060ba <_printf_i+0x1c6>
 8005f16:	2f58      	cmp	r7, #88	@ 0x58
 8005f18:	f000 80b9 	beq.w	800608e <_printf_i+0x19a>
 8005f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f24:	e03a      	b.n	8005f9c <_printf_i+0xa8>
 8005f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f2a:	2b15      	cmp	r3, #21
 8005f2c:	d8f6      	bhi.n	8005f1c <_printf_i+0x28>
 8005f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f34 <_printf_i+0x40>)
 8005f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f34:	08005f8d 	.word	0x08005f8d
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005f1d 	.word	0x08005f1d
 8005f40:	08005f1d 	.word	0x08005f1d
 8005f44:	08005f1d 	.word	0x08005f1d
 8005f48:	08005f1d 	.word	0x08005f1d
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005f1d 	.word	0x08005f1d
 8005f54:	08005f1d 	.word	0x08005f1d
 8005f58:	08005f1d 	.word	0x08005f1d
 8005f5c:	08005f1d 	.word	0x08005f1d
 8005f60:	080060a1 	.word	0x080060a1
 8005f64:	08005fcb 	.word	0x08005fcb
 8005f68:	0800605b 	.word	0x0800605b
 8005f6c:	08005f1d 	.word	0x08005f1d
 8005f70:	08005f1d 	.word	0x08005f1d
 8005f74:	080060c3 	.word	0x080060c3
 8005f78:	08005f1d 	.word	0x08005f1d
 8005f7c:	08005fcb 	.word	0x08005fcb
 8005f80:	08005f1d 	.word	0x08005f1d
 8005f84:	08005f1d 	.word	0x08005f1d
 8005f88:	08006063 	.word	0x08006063
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6032      	str	r2, [r6, #0]
 8005f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e09d      	b.n	80060dc <_printf_i+0x1e8>
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	6820      	ldr	r0, [r4, #0]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	6031      	str	r1, [r6, #0]
 8005fa8:	0606      	lsls	r6, r0, #24
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0xbc>
 8005fac:	681d      	ldr	r5, [r3, #0]
 8005fae:	e003      	b.n	8005fb8 <_printf_i+0xc4>
 8005fb0:	0645      	lsls	r5, r0, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0xb8>
 8005fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	da03      	bge.n	8005fc4 <_printf_i+0xd0>
 8005fbc:	232d      	movs	r3, #45	@ 0x2d
 8005fbe:	426d      	negs	r5, r5
 8005fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fc4:	4859      	ldr	r0, [pc, #356]	@ (800612c <_printf_i+0x238>)
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e011      	b.n	8005fee <_printf_i+0xfa>
 8005fca:	6821      	ldr	r1, [r4, #0]
 8005fcc:	6833      	ldr	r3, [r6, #0]
 8005fce:	0608      	lsls	r0, r1, #24
 8005fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd4:	d402      	bmi.n	8005fdc <_printf_i+0xe8>
 8005fd6:	0649      	lsls	r1, r1, #25
 8005fd8:	bf48      	it	mi
 8005fda:	b2ad      	uxthmi	r5, r5
 8005fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	4852      	ldr	r0, [pc, #328]	@ (800612c <_printf_i+0x238>)
 8005fe2:	bf14      	ite	ne
 8005fe4:	230a      	movne	r3, #10
 8005fe6:	2308      	moveq	r3, #8
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fee:	6866      	ldr	r6, [r4, #4]
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	60a6      	str	r6, [r4, #8]
 8005ff4:	bfa2      	ittt	ge
 8005ff6:	6821      	ldrge	r1, [r4, #0]
 8005ff8:	f021 0104 	bicge.w	r1, r1, #4
 8005ffc:	6021      	strge	r1, [r4, #0]
 8005ffe:	b90d      	cbnz	r5, 8006004 <_printf_i+0x110>
 8006000:	2e00      	cmp	r6, #0
 8006002:	d04b      	beq.n	800609c <_printf_i+0x1a8>
 8006004:	4616      	mov	r6, r2
 8006006:	fbb5 f1f3 	udiv	r1, r5, r3
 800600a:	fb03 5711 	mls	r7, r3, r1, r5
 800600e:	5dc7      	ldrb	r7, [r0, r7]
 8006010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006014:	462f      	mov	r7, r5
 8006016:	460d      	mov	r5, r1
 8006018:	42bb      	cmp	r3, r7
 800601a:	d9f4      	bls.n	8006006 <_printf_i+0x112>
 800601c:	2b08      	cmp	r3, #8
 800601e:	d10b      	bne.n	8006038 <_printf_i+0x144>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07df      	lsls	r7, r3, #31
 8006024:	d508      	bpl.n	8006038 <_printf_i+0x144>
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	6861      	ldr	r1, [r4, #4]
 800602a:	4299      	cmp	r1, r3
 800602c:	bfde      	ittt	le
 800602e:	2330      	movle	r3, #48	@ 0x30
 8006030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006034:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006038:	1b92      	subs	r2, r2, r6
 800603a:	6122      	str	r2, [r4, #16]
 800603c:	464b      	mov	r3, r9
 800603e:	aa03      	add	r2, sp, #12
 8006040:	4621      	mov	r1, r4
 8006042:	4640      	mov	r0, r8
 8006044:	f8cd a000 	str.w	sl, [sp]
 8006048:	f7ff fee2 	bl	8005e10 <_printf_common>
 800604c:	3001      	adds	r0, #1
 800604e:	d14a      	bne.n	80060e6 <_printf_i+0x1f2>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	b004      	add	sp, #16
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2778      	movs	r7, #120	@ 0x78
 8006064:	4832      	ldr	r0, [pc, #200]	@ (8006130 <_printf_i+0x23c>)
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800606c:	061f      	lsls	r7, r3, #24
 800606e:	6831      	ldr	r1, [r6, #0]
 8006070:	f851 5b04 	ldr.w	r5, [r1], #4
 8006074:	d402      	bmi.n	800607c <_printf_i+0x188>
 8006076:	065f      	lsls	r7, r3, #25
 8006078:	bf48      	it	mi
 800607a:	b2ad      	uxthmi	r5, r5
 800607c:	6031      	str	r1, [r6, #0]
 800607e:	07d9      	lsls	r1, r3, #31
 8006080:	bf44      	itt	mi
 8006082:	f043 0320 	orrmi.w	r3, r3, #32
 8006086:	6023      	strmi	r3, [r4, #0]
 8006088:	b11d      	cbz	r5, 8006092 <_printf_i+0x19e>
 800608a:	2310      	movs	r3, #16
 800608c:	e7ac      	b.n	8005fe8 <_printf_i+0xf4>
 800608e:	4827      	ldr	r0, [pc, #156]	@ (800612c <_printf_i+0x238>)
 8006090:	e7e9      	b.n	8006066 <_printf_i+0x172>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f023 0320 	bic.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	e7f6      	b.n	800608a <_printf_i+0x196>
 800609c:	4616      	mov	r6, r2
 800609e:	e7bd      	b.n	800601c <_printf_i+0x128>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	6825      	ldr	r5, [r4, #0]
 80060a4:	1d18      	adds	r0, r3, #4
 80060a6:	6961      	ldr	r1, [r4, #20]
 80060a8:	6030      	str	r0, [r6, #0]
 80060aa:	062e      	lsls	r6, r5, #24
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	d501      	bpl.n	80060b4 <_printf_i+0x1c0>
 80060b0:	6019      	str	r1, [r3, #0]
 80060b2:	e002      	b.n	80060ba <_printf_i+0x1c6>
 80060b4:	0668      	lsls	r0, r5, #25
 80060b6:	d5fb      	bpl.n	80060b0 <_printf_i+0x1bc>
 80060b8:	8019      	strh	r1, [r3, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	4616      	mov	r6, r2
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	e7bc      	b.n	800603c <_printf_i+0x148>
 80060c2:	6833      	ldr	r3, [r6, #0]
 80060c4:	2100      	movs	r1, #0
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	6032      	str	r2, [r6, #0]
 80060ca:	681e      	ldr	r6, [r3, #0]
 80060cc:	6862      	ldr	r2, [r4, #4]
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f85a 	bl	8006188 <memchr>
 80060d4:	b108      	cbz	r0, 80060da <_printf_i+0x1e6>
 80060d6:	1b80      	subs	r0, r0, r6
 80060d8:	6060      	str	r0, [r4, #4]
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	2300      	movs	r3, #0
 80060e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e4:	e7aa      	b.n	800603c <_printf_i+0x148>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	4632      	mov	r2, r6
 80060ea:	4649      	mov	r1, r9
 80060ec:	4640      	mov	r0, r8
 80060ee:	47d0      	blx	sl
 80060f0:	3001      	adds	r0, #1
 80060f2:	d0ad      	beq.n	8006050 <_printf_i+0x15c>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	079b      	lsls	r3, r3, #30
 80060f8:	d413      	bmi.n	8006122 <_printf_i+0x22e>
 80060fa:	68e0      	ldr	r0, [r4, #12]
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	4298      	cmp	r0, r3
 8006100:	bfb8      	it	lt
 8006102:	4618      	movlt	r0, r3
 8006104:	e7a6      	b.n	8006054 <_printf_i+0x160>
 8006106:	2301      	movs	r3, #1
 8006108:	4632      	mov	r2, r6
 800610a:	4649      	mov	r1, r9
 800610c:	4640      	mov	r0, r8
 800610e:	47d0      	blx	sl
 8006110:	3001      	adds	r0, #1
 8006112:	d09d      	beq.n	8006050 <_printf_i+0x15c>
 8006114:	3501      	adds	r5, #1
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	9903      	ldr	r1, [sp, #12]
 800611a:	1a5b      	subs	r3, r3, r1
 800611c:	42ab      	cmp	r3, r5
 800611e:	dcf2      	bgt.n	8006106 <_printf_i+0x212>
 8006120:	e7eb      	b.n	80060fa <_printf_i+0x206>
 8006122:	2500      	movs	r5, #0
 8006124:	f104 0619 	add.w	r6, r4, #25
 8006128:	e7f5      	b.n	8006116 <_printf_i+0x222>
 800612a:	bf00      	nop
 800612c:	080062ed 	.word	0x080062ed
 8006130:	080062fe 	.word	0x080062fe

08006134 <memmove>:
 8006134:	4288      	cmp	r0, r1
 8006136:	b510      	push	{r4, lr}
 8006138:	eb01 0402 	add.w	r4, r1, r2
 800613c:	d902      	bls.n	8006144 <memmove+0x10>
 800613e:	4284      	cmp	r4, r0
 8006140:	4623      	mov	r3, r4
 8006142:	d807      	bhi.n	8006154 <memmove+0x20>
 8006144:	1e43      	subs	r3, r0, #1
 8006146:	42a1      	cmp	r1, r4
 8006148:	d008      	beq.n	800615c <memmove+0x28>
 800614a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800614e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006152:	e7f8      	b.n	8006146 <memmove+0x12>
 8006154:	4402      	add	r2, r0
 8006156:	4601      	mov	r1, r0
 8006158:	428a      	cmp	r2, r1
 800615a:	d100      	bne.n	800615e <memmove+0x2a>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006166:	e7f7      	b.n	8006158 <memmove+0x24>

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	2300      	movs	r3, #0
 800616c:	4d05      	ldr	r5, [pc, #20]	@ (8006184 <_sbrk_r+0x1c>)
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fa ff0a 	bl	8000f8c <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200002b4 	.word	0x200002b4

08006188 <memchr>:
 8006188:	b2c9      	uxtb	r1, r1
 800618a:	4603      	mov	r3, r0
 800618c:	4402      	add	r2, r0
 800618e:	b510      	push	{r4, lr}
 8006190:	4293      	cmp	r3, r2
 8006192:	4618      	mov	r0, r3
 8006194:	d101      	bne.n	800619a <memchr+0x12>
 8006196:	2000      	movs	r0, #0
 8006198:	e003      	b.n	80061a2 <memchr+0x1a>
 800619a:	7804      	ldrb	r4, [r0, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	428c      	cmp	r4, r1
 80061a0:	d1f6      	bne.n	8006190 <memchr+0x8>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <memcpy>:
 80061a4:	440a      	add	r2, r1
 80061a6:	1e43      	subs	r3, r0, #1
 80061a8:	4291      	cmp	r1, r2
 80061aa:	d100      	bne.n	80061ae <memcpy+0xa>
 80061ac:	4770      	bx	lr
 80061ae:	b510      	push	{r4, lr}
 80061b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b4:	4291      	cmp	r1, r2
 80061b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ba:	d1f9      	bne.n	80061b0 <memcpy+0xc>
 80061bc:	bd10      	pop	{r4, pc}

080061be <_realloc_r>:
 80061be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c2:	4680      	mov	r8, r0
 80061c4:	4615      	mov	r5, r2
 80061c6:	460c      	mov	r4, r1
 80061c8:	b921      	cbnz	r1, 80061d4 <_realloc_r+0x16>
 80061ca:	4611      	mov	r1, r2
 80061cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d0:	f7ff bc3a 	b.w	8005a48 <_malloc_r>
 80061d4:	b92a      	cbnz	r2, 80061e2 <_realloc_r+0x24>
 80061d6:	f7ff fbcb 	bl	8005970 <_free_r>
 80061da:	2400      	movs	r4, #0
 80061dc:	4620      	mov	r0, r4
 80061de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e2:	f000 f81a 	bl	800621a <_malloc_usable_size_r>
 80061e6:	4285      	cmp	r5, r0
 80061e8:	4606      	mov	r6, r0
 80061ea:	d802      	bhi.n	80061f2 <_realloc_r+0x34>
 80061ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061f0:	d8f4      	bhi.n	80061dc <_realloc_r+0x1e>
 80061f2:	4629      	mov	r1, r5
 80061f4:	4640      	mov	r0, r8
 80061f6:	f7ff fc27 	bl	8005a48 <_malloc_r>
 80061fa:	4607      	mov	r7, r0
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d0ec      	beq.n	80061da <_realloc_r+0x1c>
 8006200:	42b5      	cmp	r5, r6
 8006202:	462a      	mov	r2, r5
 8006204:	4621      	mov	r1, r4
 8006206:	bf28      	it	cs
 8006208:	4632      	movcs	r2, r6
 800620a:	f7ff ffcb 	bl	80061a4 <memcpy>
 800620e:	4621      	mov	r1, r4
 8006210:	4640      	mov	r0, r8
 8006212:	463c      	mov	r4, r7
 8006214:	f7ff fbac 	bl	8005970 <_free_r>
 8006218:	e7e0      	b.n	80061dc <_realloc_r+0x1e>

0800621a <_malloc_usable_size_r>:
 800621a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621e:	1f18      	subs	r0, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	bfbc      	itt	lt
 8006224:	580b      	ldrlt	r3, [r1, r0]
 8006226:	18c0      	addlt	r0, r0, r3
 8006228:	4770      	bx	lr
	...

0800622c <_init>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr

08006238 <_fini>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr
