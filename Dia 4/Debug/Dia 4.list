
Dia 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008904  08008904  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008904  08008904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800890c  0800890c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800890c  0800890c  0000990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008910  08008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008914  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000005c  08008970  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008970  0000a4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcb3  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000348e  00000000  00000000  00027d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0002b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014db  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bde7  00000000  00000000  0002e123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f928  00000000  00000000  00059f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118166  00000000  00000000  00079832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077dc  00000000  00000000  001919dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001991b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000005c 	.word	0x2000005c
 8000210:	00000000 	.word	0x00000000
 8000214:	08008830 	.word	0x08008830

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000060 	.word	0x20000060
 8000230:	08008830 	.word	0x08008830

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b9b0 	b.w	80005bc <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800027a:	4688      	mov	r8, r1
 800027c:	4604      	mov	r4, r0
 800027e:	468e      	mov	lr, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14a      	bne.n	800031a <__udivmoddi4+0xa6>
 8000284:	428a      	cmp	r2, r1
 8000286:	4617      	mov	r7, r2
 8000288:	d95f      	bls.n	800034a <__udivmoddi4+0xd6>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	b14e      	cbz	r6, 80002a4 <__udivmoddi4+0x30>
 8000290:	f1c6 0320 	rsb	r3, r6, #32
 8000294:	fa01 fe06 	lsl.w	lr, r1, r6
 8000298:	40b7      	lsls	r7, r6
 800029a:	40b4      	lsls	r4, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a8:	fa1f fc87 	uxth.w	ip, r7
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fbbe f1f8 	udiv	r1, lr, r8
 80002b2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002be:	429a      	cmp	r2, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x5e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x5c>
 80002ca:	429a      	cmp	r2, r3
 80002cc:	f200 8154 	bhi.w	8000578 <__udivmoddi4+0x304>
 80002d0:	4601      	mov	r1, r0
 80002d2:	1a9b      	subs	r3, r3, r2
 80002d4:	b2a2      	uxth	r2, r4
 80002d6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002da:	fb08 3310 	mls	r3, r8, r0, r3
 80002de:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d90b      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002ea:	18ba      	adds	r2, r7, r2
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	bf2c      	ite	cs
 80002f2:	2401      	movcs	r4, #1
 80002f4:	2400      	movcc	r4, #0
 80002f6:	4594      	cmp	ip, r2
 80002f8:	d902      	bls.n	8000300 <__udivmoddi4+0x8c>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	f000 813f 	beq.w	800057e <__udivmoddi4+0x30a>
 8000300:	4618      	mov	r0, r3
 8000302:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000306:	eba2 020c 	sub.w	r2, r2, ip
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa2>
 800030e:	40f2      	lsrs	r2, r6
 8000310:	2300      	movs	r3, #0
 8000312:	e9c5 2300 	strd	r2, r3, [r5]
 8000316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xb6>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb0>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa2>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d14e      	bne.n	80003d0 <__udivmoddi4+0x15c>
 8000332:	4543      	cmp	r3, r8
 8000334:	f0c0 8112 	bcc.w	800055c <__udivmoddi4+0x2e8>
 8000338:	4282      	cmp	r2, r0
 800033a:	f240 810f 	bls.w	800055c <__udivmoddi4+0x2e8>
 800033e:	4608      	mov	r0, r1
 8000340:	2d00      	cmp	r5, #0
 8000342:	d0e8      	beq.n	8000316 <__udivmoddi4+0xa2>
 8000344:	e9c5 4e00 	strd	r4, lr, [r5]
 8000348:	e7e5      	b.n	8000316 <__udivmoddi4+0xa2>
 800034a:	2a00      	cmp	r2, #0
 800034c:	f000 80ac 	beq.w	80004a8 <__udivmoddi4+0x234>
 8000350:	fab2 f682 	clz	r6, r2
 8000354:	2e00      	cmp	r6, #0
 8000356:	f040 80bb 	bne.w	80004d0 <__udivmoddi4+0x25c>
 800035a:	1a8b      	subs	r3, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b2bc      	uxth	r4, r7
 8000362:	2101      	movs	r1, #1
 8000364:	0c02      	lsrs	r2, r0, #16
 8000366:	b280      	uxth	r0, r0
 8000368:	fbb3 fcfe 	udiv	ip, r3, lr
 800036c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000370:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000374:	fb04 f20c 	mul.w	r2, r4, ip
 8000378:	429a      	cmp	r2, r3
 800037a:	d90e      	bls.n	800039a <__udivmoddi4+0x126>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	429a      	cmp	r2, r3
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80ec 	beq.w	8000570 <__udivmoddi4+0x2fc>
 8000398:	46c4      	mov	ip, r8
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	fbb3 f8fe 	udiv	r8, r3, lr
 80003a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003a4:	fb04 f408 	mul.w	r4, r4, r8
 80003a8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x154>
 80003b0:	18ba      	adds	r2, r7, r2
 80003b2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	2001      	movcs	r0, #1
 80003ba:	2000      	movcc	r0, #0
 80003bc:	4294      	cmp	r4, r2
 80003be:	d902      	bls.n	80003c6 <__udivmoddi4+0x152>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	f000 80d1 	beq.w	8000568 <__udivmoddi4+0x2f4>
 80003c6:	4698      	mov	r8, r3
 80003c8:	1b12      	subs	r2, r2, r4
 80003ca:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003ce:	e79d      	b.n	800030c <__udivmoddi4+0x98>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa08 f401 	lsl.w	r4, r8, r1
 80003da:	fa00 f901 	lsl.w	r9, r0, r1
 80003de:	fa22 f706 	lsr.w	r7, r2, r6
 80003e2:	fa28 f806 	lsr.w	r8, r8, r6
 80003e6:	408a      	lsls	r2, r1
 80003e8:	431f      	orrs	r7, r3
 80003ea:	fa20 f306 	lsr.w	r3, r0, r6
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	4323      	orrs	r3, r4
 80003f2:	fa1f fc87 	uxth.w	ip, r7
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	fbb8 fef0 	udiv	lr, r8, r0
 80003fc:	fb00 881e 	mls	r8, r0, lr, r8
 8000400:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000404:	fb0e f80c 	mul.w	r8, lr, ip
 8000408:	45a0      	cmp	r8, r4
 800040a:	d90e      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	45a0      	cmp	r8, r4
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 80b8 	beq.w	8000598 <__udivmoddi4+0x324>
 8000428:	46d6      	mov	lr, sl
 800042a:	eba4 0408 	sub.w	r4, r4, r8
 800042e:	fa1f f883 	uxth.w	r8, r3
 8000432:	fbb4 f3f0 	udiv	r3, r4, r0
 8000436:	fb00 4413 	mls	r4, r0, r3, r4
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000442:	45a4      	cmp	ip, r4
 8000444:	d90e      	bls.n	8000464 <__udivmoddi4+0x1f0>
 8000446:	193c      	adds	r4, r7, r4
 8000448:	f103 30ff 	add.w	r0, r3, #4294967295
 800044c:	bf2c      	ite	cs
 800044e:	f04f 0801 	movcs.w	r8, #1
 8000452:	f04f 0800 	movcc.w	r8, #0
 8000456:	45a4      	cmp	ip, r4
 8000458:	d903      	bls.n	8000462 <__udivmoddi4+0x1ee>
 800045a:	f1b8 0f00 	cmp.w	r8, #0
 800045e:	f000 809f 	beq.w	80005a0 <__udivmoddi4+0x32c>
 8000462:	4603      	mov	r3, r0
 8000464:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000468:	eba4 040c 	sub.w	r4, r4, ip
 800046c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000470:	4564      	cmp	r4, ip
 8000472:	4673      	mov	r3, lr
 8000474:	46e0      	mov	r8, ip
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0x20a>
 8000478:	d107      	bne.n	800048a <__udivmoddi4+0x216>
 800047a:	45f1      	cmp	r9, lr
 800047c:	d205      	bcs.n	800048a <__udivmoddi4+0x216>
 800047e:	ebbe 0302 	subs.w	r3, lr, r2
 8000482:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000486:	3801      	subs	r0, #1
 8000488:	46e0      	mov	r8, ip
 800048a:	b15d      	cbz	r5, 80004a4 <__udivmoddi4+0x230>
 800048c:	ebb9 0203 	subs.w	r2, r9, r3
 8000490:	eb64 0408 	sbc.w	r4, r4, r8
 8000494:	fa04 f606 	lsl.w	r6, r4, r6
 8000498:	fa22 f301 	lsr.w	r3, r2, r1
 800049c:	40cc      	lsrs	r4, r1
 800049e:	431e      	orrs	r6, r3
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e736      	b.n	8000316 <__udivmoddi4+0xa2>
 80004a8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004ac:	0c01      	lsrs	r1, r0, #16
 80004ae:	4614      	mov	r4, r2
 80004b0:	b280      	uxth	r0, r0
 80004b2:	4696      	mov	lr, r2
 80004b4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004b8:	2620      	movs	r6, #32
 80004ba:	4690      	mov	r8, r2
 80004bc:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004c0:	4610      	mov	r0, r2
 80004c2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004c6:	eba3 0308 	sub.w	r3, r3, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e74b      	b.n	8000368 <__udivmoddi4+0xf4>
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	f1c6 0320 	rsb	r3, r6, #32
 80004d6:	fa01 f206 	lsl.w	r2, r1, r6
 80004da:	fa21 f803 	lsr.w	r8, r1, r3
 80004de:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e2:	fa20 f303 	lsr.w	r3, r0, r3
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	40b0      	lsls	r0, r6
 80004ea:	4313      	orrs	r3, r2
 80004ec:	0c02      	lsrs	r2, r0, #16
 80004ee:	0c19      	lsrs	r1, r3, #16
 80004f0:	b280      	uxth	r0, r0
 80004f2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004f6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004fa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	4588      	cmp	r8, r1
 8000504:	d951      	bls.n	80005aa <__udivmoddi4+0x336>
 8000506:	1879      	adds	r1, r7, r1
 8000508:	f109 3cff 	add.w	ip, r9, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0a01 	movcs.w	sl, #1
 8000512:	f04f 0a00 	movcc.w	sl, #0
 8000516:	4588      	cmp	r8, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x2ac>
 800051a:	f1ba 0f00 	cmp.w	sl, #0
 800051e:	d031      	beq.n	8000584 <__udivmoddi4+0x310>
 8000520:	eba1 0108 	sub.w	r1, r1, r8
 8000524:	fbb1 f9fe 	udiv	r9, r1, lr
 8000528:	fb09 f804 	mul.w	r8, r9, r4
 800052c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000530:	b29b      	uxth	r3, r3
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	4543      	cmp	r3, r8
 8000538:	d235      	bcs.n	80005a6 <__udivmoddi4+0x332>
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4543      	cmp	r3, r8
 800054c:	d2bb      	bcs.n	80004c6 <__udivmoddi4+0x252>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d1b8      	bne.n	80004c6 <__udivmoddi4+0x252>
 8000554:	f1a9 0102 	sub.w	r1, r9, #2
 8000558:	443b      	add	r3, r7
 800055a:	e7b4      	b.n	80004c6 <__udivmoddi4+0x252>
 800055c:	1a84      	subs	r4, r0, r2
 800055e:	eb68 0203 	sbc.w	r2, r8, r3
 8000562:	2001      	movs	r0, #1
 8000564:	4696      	mov	lr, r2
 8000566:	e6eb      	b.n	8000340 <__udivmoddi4+0xcc>
 8000568:	443a      	add	r2, r7
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	e72b      	b.n	80003c8 <__udivmoddi4+0x154>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e710      	b.n	800039a <__udivmoddi4+0x126>
 8000578:	3902      	subs	r1, #2
 800057a:	443b      	add	r3, r7
 800057c:	e6a9      	b.n	80002d2 <__udivmoddi4+0x5e>
 800057e:	443a      	add	r2, r7
 8000580:	3802      	subs	r0, #2
 8000582:	e6be      	b.n	8000302 <__udivmoddi4+0x8e>
 8000584:	eba7 0808 	sub.w	r8, r7, r8
 8000588:	f1a9 0c02 	sub.w	ip, r9, #2
 800058c:	4441      	add	r1, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c9      	b.n	800052c <__udivmoddi4+0x2b8>
 8000598:	f1ae 0e02 	sub.w	lr, lr, #2
 800059c:	443c      	add	r4, r7
 800059e:	e744      	b.n	800042a <__udivmoddi4+0x1b6>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e75e      	b.n	8000464 <__udivmoddi4+0x1f0>
 80005a6:	4649      	mov	r1, r9
 80005a8:	e78d      	b.n	80004c6 <__udivmoddi4+0x252>
 80005aa:	eba1 0108 	sub.w	r1, r1, r8
 80005ae:	46cc      	mov	ip, r9
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7b8      	b.n	800052c <__udivmoddi4+0x2b8>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 6da9 	sub.w	sp, sp, #1352	@ 0x548
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 f9cf 	bl	800196a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f882 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fac6 	bl	8000b60 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005d4:	f000 f978 	bl	80008c8 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80005d8:	f000 f936 	bl	8000848 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005dc:	f000 f9e8 	bl	80009b0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005e0:	f000 fa24 	bl	8000a2c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 fa70 	bl	8000ac8 <MX_USART1_UART_Init>
  MX_SAI1_Init();
 80005e8:	f000 f982 	bl	80008f0 <MX_SAI1_Init>
  MX_DFSDM1_Init();
 80005ec:	f000 f8c8 	bl	8000780 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  bools.user_button_pushed= 0;																			//No se puede usar fuera de una función
 80005f0:	4a30      	ldr	r2, [pc, #192]	@ (80006b4 <main+0xf4>)
 80005f2:	7813      	ldrb	r3, [r2, #0]
 80005f4:	f023 0301 	bic.w	r3, r3, #1
 80005f8:	7013      	strb	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 80005fa:	482f      	ldr	r0, [pc, #188]	@ (80006b8 <main+0xf8>)
 80005fc:	f005 fd72 	bl	80060e4 <HAL_TIM_Base_Start_IT>
  HAL_SAI_Init(&hsai_BlockA1);
 8000600:	482e      	ldr	r0, [pc, #184]	@ (80006bc <main+0xfc>)
 8000602:	f005 f92b 	bl	800585c <HAL_SAI_Init>
  HAL_UART_Init(&huart1);
 8000606:	482e      	ldr	r0, [pc, #184]	@ (80006c0 <main+0x100>)
 8000608:	f006 f9bc 	bl	8006984 <HAL_UART_Init>


  HAL_DFSDM_ChannelInit(&hdfsdm1_channel1);
 800060c:	482d      	ldr	r0, [pc, #180]	@ (80006c4 <main+0x104>)
 800060e:	f001 fb57 	bl	8001cc0 <HAL_DFSDM_ChannelInit>
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000612:	482d      	ldr	r0, [pc, #180]	@ (80006c8 <main+0x108>)
 8000614:	f001 fc14 	bl	8001e40 <HAL_DFSDM_FilterInit>
  HAL_DFSDM_FilterMspInit(&hdfsdm1_filter0);
 8000618:	482b      	ldr	r0, [pc, #172]	@ (80006c8 <main+0x108>)
 800061a:	f000 fd43 	bl	80010a4 <HAL_DFSDM_FilterMspInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	/*
	  if(bools.user_button_pushed==1){
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0xf4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b01      	cmp	r3, #1
 800062a:	d1f8      	bne.n	800061e <main+0x5e>
//		HAL_SAI_Receive(&hsai_BlockA1, buffer, 16, HAL_MAX_DELAY);

		HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000630:	f001 fa12 	bl	8001a58 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2108      	movs	r1, #8
 8000638:	4824      	ldr	r0, [pc, #144]	@ (80006cc <main+0x10c>)
 800063a:	f002 f875 	bl	8002728 <HAL_GPIO_WritePin>
		for(int i =0; i<16; i++ ){
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8000644:	e031      	b.n	80006aa <main+0xea>

			  HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 8000646:	4820      	ldr	r0, [pc, #128]	@ (80006c8 <main+0x108>)
 8000648:	f001 fd19 	bl	800207e <HAL_DFSDM_FilterRegularStart>
			  HAL_Delay(10);
 800064c:	200a      	movs	r0, #10
 800064e:	f001 fa03 	bl	8001a58 <HAL_Delay>
			  HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0, 100);
 8000652:	2164      	movs	r1, #100	@ 0x64
 8000654:	481c      	ldr	r0, [pc, #112]	@ (80006c8 <main+0x108>)
 8000656:	f001 fd2d 	bl	80020b4 <HAL_DFSDM_FilterPollForRegConversion>
			  HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &buffer[i]);
 800065a:	f207 5204 	addw	r2, r7, #1284	@ 0x504
 800065e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	4619      	mov	r1, r3
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <main+0x108>)
 800066a:	f001 fd79 	bl	8002160 <HAL_DFSDM_FilterGetRegularValue>



			sprintf(msg, "%lu\r\n", buffer[i]);
 800066e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	f503 63a9 	add.w	r3, r3, #1352	@ 0x548
 8000678:	443b      	add	r3, r7
 800067a:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4913      	ldr	r1, [pc, #76]	@ (80006d0 <main+0x110>)
 8000682:	4618      	mov	r0, r3
 8000684:	f007 fc22 	bl	8007ecc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg) , HAL_MAX_DELAY);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fdd2 	bl	8000234 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <main+0x100>)
 800069c:	f006 f9c2 	bl	8006a24 <HAL_UART_Transmit>
		for(int i =0; i<16; i++ ){
 80006a0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 80006a4:	3301      	adds	r3, #1
 80006a6:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 80006aa:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 80006ae:	2b0f      	cmp	r3, #15
 80006b0:	ddc9      	ble.n	8000646 <main+0x86>
	  if(bools.user_button_pushed==1){
 80006b2:	e7b4      	b.n	800061e <main+0x5e>
 80006b4:	20000078 	.word	0x20000078
 80006b8:	20000258 	.word	0x20000258
 80006bc:	2000015c 	.word	0x2000015c
 80006c0:	200002a4 	.word	0x200002a4
 80006c4:	200000d0 	.word	0x200000d0
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	42020c00 	.word	0x42020c00
 80006d0:	08008848 	.word	0x08008848

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b098      	sub	sp, #96	@ 0x60
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2248      	movs	r2, #72	@ 0x48
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fc14 	bl	8007f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006f6:	2000      	movs	r0, #0
 80006f8:	f002 f9ea 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000702:	f000 fca5 	bl	8001050 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800071c:	23b0      	movs	r3, #176	@ 0xb0
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000724:	2301      	movs	r3, #1
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000728:	230c      	movs	r3, #12
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800072c:	2337      	movs	r3, #55	@ 0x37
 800072e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000730:	2307      	movs	r3, #7
 8000732:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fa65 	bl	8002c10 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800074c:	f000 fc80 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f002 ff27 	bl	80035bc <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000774:	f000 fc6c 	bl	8001050 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3760      	adds	r7, #96	@ 0x60
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 8000786:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <MX_DFSDM1_Init+0xb8>)
 8000788:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 8000792:	2200      	movs	r2, #0
 8000794:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 8000798:	2200      	movs	r2, #0
 800079a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80007ae:	4821      	ldr	r0, [pc, #132]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 80007b0:	f001 fb46 	bl	8001e40 <HAL_DFSDM_FilterInit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 80007ba:	f000 fc49 	bl	8001050 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000840 <MX_DFSDM1_Init+0xc0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_DFSDM1_Init+0xbc>)
 800080e:	f001 fa57 	bl	8001cc0 <HAL_DFSDM_ChannelInit>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8000818:	f000 fc1a 	bl	8001050 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800081c:	2201      	movs	r2, #1
 800081e:	4909      	ldr	r1, [pc, #36]	@ (8000844 <MX_DFSDM1_Init+0xc4>)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_DFSDM1_Init+0xb4>)
 8000822:	f001 fbe7 	bl	8001ff4 <HAL_DFSDM_FilterConfigRegChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 800082c:	f000 fc10 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000007c 	.word	0x2000007c
 8000838:	40016100 	.word	0x40016100
 800083c:	200000d0 	.word	0x200000d0
 8000840:	40016020 	.word	0x40016020
 8000844:	00010002 	.word	0x00010002

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 ffb3 	bl	80027ee <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fbdf 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f002 f845 	bl	8002924 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 fbd6 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f002 f887 	bl	80029ba <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fbcd 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000108 	.word	0x20000108
 80008c0:	40005400 	.word	0x40005400
 80008c4:	60514452 	.word	0x60514452

080008c8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008cc:	2000      	movs	r0, #0
 80008ce:	f002 f8c1 	bl	8002a54 <HAL_ICACHE_ConfigAssociativityMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80008d8:	f000 fbba 	bl	8001050 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008dc:	f002 f8da 	bl	8002a94 <HAL_ICACHE_Enable>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008e6:	f000 fbb3 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 80008f6:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <MX_SAI1_Init+0xb8>)
 80008f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000900:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000902:	2201      	movs	r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000908:	2240      	movs	r2, #64	@ 0x40
 800090a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800090c:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800090e:	2200      	movs	r2, #0
 8000910:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000914:	2200      	movs	r2, #0
 8000916:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800092a:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000930:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000932:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <MX_SAI1_Init+0xbc>)
 8000934:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000936:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000944:	2201      	movs	r2, #1
 8000946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800094c:	2201      	movs	r2, #1
 800094e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000956:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800095a:	2208      	movs	r2, #8
 800095c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000960:	2201      	movs	r2, #1
 8000962:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000966:	2200      	movs	r2, #0
 8000968:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800096c:	2200      	movs	r2, #0
 800096e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000972:	2200      	movs	r2, #0
 8000974:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000978:	2200      	movs	r2, #0
 800097a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800097e:	2200      	movs	r2, #0
 8000980:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000984:	2201      	movs	r2, #1
 8000986:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 800098a:	2200      	movs	r2, #0
 800098c:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_SAI1_Init+0xb4>)
 8000990:	f004 ff64 	bl	800585c <HAL_SAI_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 800099a:	f000 fb59 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000015c 	.word	0x2000015c
 80009a8:	40015404 	.word	0x40015404
 80009ac:	0002ee00 	.word	0x0002ee00

080009b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <MX_SPI1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009e6:	2228      	movs	r2, #40	@ 0x28
 80009e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_SPI1_Init+0x74>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_SPI1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_SPI1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_SPI1_Init+0x74>)
 8000a10:	f005 f94e 	bl	8005cb0 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 fb19 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001f4 	.word	0x200001f4
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10999;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a54:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 8000a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a62:	2209      	movs	r2, #9
 8000a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a72:	4814      	ldr	r0, [pc, #80]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a74:	f005 fadf 	bl	8006036 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a7e:	f000 fae7 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a90:	f005 fc9f 	bl	80063d2 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a9a:	f000 fad9 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000aac:	f005 fec4 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ab6:	f000 facb 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000258 	.word	0x20000258

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b12:	f005 ff37 	bl	8006984 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 fa98 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b24:	f007 f907 	bl	8007d36 <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 fa8f 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b36:	f007 f93c 	bl	8007db2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fa86 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b46:	f007 f8bd 	bl	8007cc4 <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 fa7e 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200002a4 	.word	0x200002a4
 8000b5c:	40013800 	.word	0x40013800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	4bb4      	ldr	r3, [pc, #720]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4ab3      	ldr	r2, [pc, #716]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4bb1      	ldr	r3, [pc, #708]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	623b      	str	r3, [r7, #32]
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4bae      	ldr	r3, [pc, #696]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4aad      	ldr	r2, [pc, #692]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4bab      	ldr	r3, [pc, #684]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	4ba8      	ldr	r3, [pc, #672]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4aa7      	ldr	r2, [pc, #668]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4ba5      	ldr	r3, [pc, #660]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000bbe:	f001 ffe3 	bl	8002b88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4ba1      	ldr	r3, [pc, #644]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4aa0      	ldr	r2, [pc, #640]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b9e      	ldr	r3, [pc, #632]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	4b9b      	ldr	r3, [pc, #620]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a9a      	ldr	r2, [pc, #616]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b98      	ldr	r3, [pc, #608]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b95      	ldr	r3, [pc, #596]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a94      	ldr	r2, [pc, #592]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfe:	4b92      	ldr	r3, [pc, #584]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0a:	4b8f      	ldr	r3, [pc, #572]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a8e      	ldr	r2, [pc, #568]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c16:	4b8c      	ldr	r3, [pc, #560]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b89      	ldr	r3, [pc, #548]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a88      	ldr	r2, [pc, #544]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b86      	ldr	r3, [pc, #536]	@ (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f241 1102 	movw	r1, #4354	@ 0x1102
 8000c40:	4882      	ldr	r0, [pc, #520]	@ (8000e4c <MX_GPIO_Init+0x2ec>)
 8000c42:	f001 fd71 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4881      	ldr	r0, [pc, #516]	@ (8000e50 <MX_GPIO_Init+0x2f0>)
 8000c4c:	f001 fd6c 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2120      	movs	r1, #32
 8000c54:	487f      	ldr	r0, [pc, #508]	@ (8000e54 <MX_GPIO_Init+0x2f4>)
 8000c56:	f001 fd67 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c60:	487d      	ldr	r0, [pc, #500]	@ (8000e58 <MX_GPIO_Init+0x2f8>)
 8000c62:	f001 fd61 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2101      	movs	r1, #1
 8000c6a:	487c      	ldr	r0, [pc, #496]	@ (8000e5c <MX_GPIO_Init+0x2fc>)
 8000c6c:	f001 fd5c 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4158 	mov.w	r1, #55296	@ 0xd800
 8000c76:	487a      	ldr	r0, [pc, #488]	@ (8000e60 <MX_GPIO_Init+0x300>)
 8000c78:	f001 fd56 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_PWM_Pin */
  GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c8c:	230e      	movs	r3, #14
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4873      	ldr	r0, [pc, #460]	@ (8000e64 <MX_GPIO_Init+0x304>)
 8000c98:	f001 fbc6 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 8000c9c:	f241 1302 	movw	r3, #4354	@ 0x1102
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4865      	ldr	r0, [pc, #404]	@ (8000e4c <MX_GPIO_Init+0x2ec>)
 8000cb6:	f001 fbb7 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD1 PD0
                           PD7 PD14 PD15 PD9
                           PD8 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8000cba:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	485e      	ldr	r0, [pc, #376]	@ (8000e50 <MX_GPIO_Init+0x2f0>)
 8000cd8:	f001 fba6 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cec:	230c      	movs	r3, #12
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4856      	ldr	r0, [pc, #344]	@ (8000e50 <MX_GPIO_Init+0x2f0>)
 8000cf8:	f001 fb96 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 8000cfc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4853      	ldr	r0, [pc, #332]	@ (8000e68 <MX_GPIO_Init+0x308>)
 8000d1a:	f001 fb85 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|VBUS_SENSE_Pin;
 8000d1e:	f248 0310 	movw	r3, #32784	@ 0x8010
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4849      	ldr	r0, [pc, #292]	@ (8000e58 <MX_GPIO_Init+0x2f8>)
 8000d34:	f001 fb78 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000d38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4840      	ldr	r0, [pc, #256]	@ (8000e58 <MX_GPIO_Init+0x2f8>)
 8000d56:	f001 fb67 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483d      	ldr	r0, [pc, #244]	@ (8000e68 <MX_GPIO_Init+0x308>)
 8000d72:	f001 fb59 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000d76:	2308      	movs	r3, #8
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4830      	ldr	r0, [pc, #192]	@ (8000e50 <MX_GPIO_Init+0x2f0>)
 8000d8e:	f001 fb4b 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da2:	230c      	movs	r3, #12
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <MX_GPIO_Init+0x300>)
 8000dae:	f001 fb3b 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8000db2:	230e      	movs	r3, #14
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4826      	ldr	r0, [pc, #152]	@ (8000e60 <MX_GPIO_Init+0x300>)
 8000dc8:	f001 fb2e 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481c      	ldr	r0, [pc, #112]	@ (8000e54 <MX_GPIO_Init+0x2f4>)
 8000de4:	f001 fb20 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8000de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0x2f8>)
 8000e02:	f001 fb11 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8000e06:	2301      	movs	r3, #1
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480f      	ldr	r0, [pc, #60]	@ (8000e5c <MX_GPIO_Init+0x2fc>)
 8000e1e:	f001 fb03 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8000e22:	230e      	movs	r3, #14
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e32:	230a      	movs	r3, #10
 8000e34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480a      	ldr	r0, [pc, #40]	@ (8000e68 <MX_GPIO_Init+0x308>)
 8000e3e:	f001 faf3 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	e012      	b.n	8000e6c <MX_GPIO_Init+0x30c>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	42021800 	.word	0x42021800
 8000e50:	42020c00 	.word	0x42020c00
 8000e54:	42020400 	.word	0x42020400
 8000e58:	42020000 	.word	0x42020000
 8000e5c:	42021c00 	.word	0x42021c00
 8000e60:	42021400 	.word	0x42021400
 8000e64:	42021000 	.word	0x42021000
 8000e68:	42020800 	.word	0x42020800
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4845      	ldr	r0, [pc, #276]	@ (8000f94 <MX_GPIO_Init+0x434>)
 8000e80:	f001 fad2 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e84:	2301      	movs	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000e94:	2303      	movs	r3, #3
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483e      	ldr	r0, [pc, #248]	@ (8000f98 <MX_GPIO_Init+0x438>)
 8000ea0:	f001 fac2 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8000ea4:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4837      	ldr	r0, [pc, #220]	@ (8000f9c <MX_GPIO_Init+0x43c>)
 8000ebe:	f001 fab3 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 PE7
                           PE14 PE11 PE15 PE9
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8000ec2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4830      	ldr	r0, [pc, #192]	@ (8000fa0 <MX_GPIO_Init+0x440>)
 8000ee0:	f001 faa2 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8000ee4:	23cc      	movs	r3, #204	@ 0xcc
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4829      	ldr	r0, [pc, #164]	@ (8000fa4 <MX_GPIO_Init+0x444>)
 8000f00:	f001 fa92 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000f04:	2307      	movs	r3, #7
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000f14:	230a      	movs	r3, #10
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <MX_GPIO_Init+0x448>)
 8000f20:	f001 fa82 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f36:	2308      	movs	r3, #8
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4819      	ldr	r0, [pc, #100]	@ (8000fa8 <MX_GPIO_Init+0x448>)
 8000f42:	f001 fa71 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4813      	ldr	r0, [pc, #76]	@ (8000fa8 <MX_GPIO_Init+0x448>)
 8000f5c:	f001 fa64 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_GPIO_Init+0x448>)
 8000f76:	f001 fa57 	bl	8002428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2018      	movs	r0, #24
 8000f80:	f000 fe69 	bl	8001c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000f84:	2018      	movs	r0, #24
 8000f86:	f000 fe80 	bl	8001c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	@ 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	42021800 	.word	0x42021800
 8000f98:	42020800 	.word	0x42020800
 8000f9c:	42021400 	.word	0x42021400
 8000fa0:	42021000 	.word	0x42021000
 8000fa4:	42020000 	.word	0x42020000
 8000fa8:	42020400 	.word	0x42020400

08000fac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fbc:	d11a      	bne.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x48>
//__HAL_TIM_SET_AUTORELOAD(&htim2, 9);
    	
    	if(bools.user_button_pushed == 1){
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d113      	bne.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x48>



    		if(second_period==1000){
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fd4:	d108      	bne.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x3c>
    			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fda:	480a      	ldr	r0, [pc, #40]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fdc:	f001 fbbc 	bl	8002758 <HAL_GPIO_TogglePin>
    			second_period = 0;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
    		}else{
    			second_period = second_period + 1;
    		}
    	}
    }
}
 8000fe6:	e005      	b.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x48>
    			second_period = second_period + 1;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff2:	801a      	strh	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000078 	.word	0x20000078
 8001000:	2000007a 	.word	0x2000007a
 8001004:	42021800 	.word	0x42021800

08001008 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2108      	movs	r1, #8
 8001016:	480c      	ldr	r0, [pc, #48]	@ (8001048 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8001018:	f001 fb86 	bl	8002728 <HAL_GPIO_WritePin>

	if(bools.user_button_pushed == 0){
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_GPIO_EXTI_Falling_Callback+0x2e>
		bools.user_button_pushed = 1;
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 800102c:	7813      	ldrb	r3, [r2, #0]
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	7013      	strb	r3, [r2, #0]
	}else{
		bools.user_button_pushed = 0;
	}
}
 8001034:	e004      	b.n	8001040 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		bools.user_button_pushed = 0;
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8001038:	7813      	ldrb	r3, [r2, #0]
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	7013      	strb	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	42020c00 	.word	0x42020c00
 800104c:	20000078 	.word	0x20000078

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_MspInit+0x44>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_MspInit+0x44>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6613      	str	r3, [r2, #96]	@ 0x60
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_MspInit+0x44>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x44>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6593      	str	r3, [r2, #88]	@ 0x58
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001092:	f001 fd89 	bl	8002ba8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_DFSDM_FilterMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_filter: DFSDM_Filter handle pointer
  * @retval None
  */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b0      	sub	sp, #192	@ 0xc0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2294      	movs	r2, #148	@ 0x94
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 ff23 	bl	8007f10 <memset>
  if(DFSDM1_Init == 0)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <HAL_DFSDM_FilterMspInit+0x114>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d16e      	bne.n	80011b0 <HAL_DFSDM_FilterMspInit+0x10c>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fd4e 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80010ee:	f7ff ffaf 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <HAL_DFSDM_FilterMspInit+0x118>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a30      	ldr	r2, [pc, #192]	@ (80011bc <HAL_DFSDM_FilterMspInit+0x118>)
 80010fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010fc:	4b2f      	ldr	r3, [pc, #188]	@ (80011bc <HAL_DFSDM_FilterMspInit+0x118>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10b      	bne.n	800111c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001104:	4b2e      	ldr	r3, [pc, #184]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001108:	4a2d      	ldr	r2, [pc, #180]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 800110a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001110:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001134:	f001 fd28 	bl	8002b88 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	4a20      	ldr	r2, [pc, #128]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001168:	2306      	movs	r3, #6
 800116a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001172:	4619      	mov	r1, r3
 8001174:	4813      	ldr	r0, [pc, #76]	@ (80011c4 <HAL_DFSDM_FilterMspInit+0x120>)
 8001176:	f001 f957 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800117a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001194:	2306      	movs	r3, #6
 8001196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800119e:	4619      	mov	r1, r3
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <HAL_DFSDM_FilterMspInit+0x124>)
 80011a2:	f001 f941 	bl	8002428 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <HAL_DFSDM_FilterMspInit+0x114>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a02      	ldr	r2, [pc, #8]	@ (80011b8 <HAL_DFSDM_FilterMspInit+0x114>)
 80011ae:	6013      	str	r3, [r2, #0]
  }

}
 80011b0:	bf00      	nop
 80011b2:	37c0      	adds	r7, #192	@ 0xc0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000033c 	.word	0x2000033c
 80011bc:	20000338 	.word	0x20000338
 80011c0:	40021000 	.word	0x40021000
 80011c4:	42021800 	.word	0x42021800
 80011c8:	42020400 	.word	0x42020400

080011cc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0b0      	sub	sp, #192	@ 0xc0
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	2294      	movs	r2, #148	@ 0x94
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 fe8f 	bl	8007f10 <memset>
  if(DFSDM1_Init == 0)
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d16e      	bne.n	80012d8 <HAL_DFSDM_ChannelMspInit+0x10c>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fcba 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001216:	f7ff ff1b 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800121a:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <HAL_DFSDM_ChannelMspInit+0x118>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10b      	bne.n	8001244 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001230:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001236:	6613      	str	r3, [r2, #96]	@ 0x60
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800124a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800125c:	f001 fc94 	bl	8002b88 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001290:	2306      	movs	r3, #6
 8001292:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001296:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <HAL_DFSDM_ChannelMspInit+0x120>)
 800129e:	f001 f8c3 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012bc:	2306      	movs	r3, #6
 80012be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <HAL_DFSDM_ChannelMspInit+0x124>)
 80012ca:	f001 f8ad 	bl	8002428 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a02      	ldr	r2, [pc, #8]	@ (80012e0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80012d6:	6013      	str	r3, [r2, #0]
  }

}
 80012d8:	bf00      	nop
 80012da:	37c0      	adds	r7, #192	@ 0xc0
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000033c 	.word	0x2000033c
 80012e4:	20000338 	.word	0x20000338
 80012e8:	40021000 	.word	0x40021000
 80012ec:	42021800 	.word	0x42021800
 80012f0:	42020400 	.word	0x42020400

080012f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0ae      	sub	sp, #184	@ 0xb8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2294      	movs	r2, #148	@ 0x94
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fdfb 	bl	8007f10 <memset>
  if(hi2c->Instance==I2C1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_I2C_MspInit+0xb0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13a      	bne.n	800139a <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001324:	2340      	movs	r3, #64	@ 0x40
 8001326:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fc27 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff fe88 	bl	8001050 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001358:	23c0      	movs	r3, #192	@ 0xc0
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <HAL_I2C_MspInit+0xb8>)
 800137e:	f001 f853 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001388:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800138c:	6593      	str	r3, [r2, #88]	@ 0x58
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	37b8      	adds	r7, #184	@ 0xb8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	42020400 	.word	0x42020400

080013b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d131      	bne.n	8001436 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_SPI_MspInit+0x94>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001402:	f001 fbc1 	bl	8002b88 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 8001406:	233c      	movs	r3, #60	@ 0x3c
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001416:	2305      	movs	r3, #5
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <HAL_SPI_MspInit+0x98>)
 8001422:	f001 f801 	bl	8002428 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2103      	movs	r1, #3
 800142a:	203b      	movs	r0, #59	@ 0x3b
 800142c:	f000 fc13 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001430:	203b      	movs	r0, #59	@ 0x3b
 8001432:	f000 fc2a 	bl	8001c8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40013000 	.word	0x40013000
 8001444:	40021000 	.word	0x40021000
 8001448:	42021800 	.word	0x42021800

0800144c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800145c:	d113      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_TIM_Base_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <HAL_TIM_Base_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6593      	str	r3, [r2, #88]	@ 0x58
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_TIM_Base_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	202d      	movs	r0, #45	@ 0x2d
 800147c:	f000 fbeb 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001480:	202d      	movs	r0, #45	@ 0x2d
 8001482:	f000 fc02 	bl	8001c8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0ae      	sub	sp, #184	@ 0xb8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2294      	movs	r2, #148	@ 0x94
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 fd2b 	bl	8007f10 <memset>
  if(huart->Instance==USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <HAL_UART_MspInit+0xc0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d143      	bne.n	800154c <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fb57 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014dc:	f7ff fdb8 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_UART_MspInit+0xc4>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001510:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152a:	2307      	movs	r3, #7
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001534:	4619      	mov	r1, r3
 8001536:	4809      	ldr	r0, [pc, #36]	@ (800155c <HAL_UART_MspInit+0xc8>)
 8001538:	f000 ff76 	bl	8002428 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2102      	movs	r1, #2
 8001540:	203d      	movs	r0, #61	@ 0x3d
 8001542:	f000 fb88 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001546:	203d      	movs	r0, #61	@ 0x3d
 8001548:	f000 fb9f 	bl	8001c8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800154c:	bf00      	nop
 800154e:	37b8      	adds	r7, #184	@ 0xb8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013800 	.word	0x40013800
 8001558:	40021000 	.word	0x40021000
 800155c:	42020000 	.word	0x42020000

08001560 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ae      	sub	sp, #184	@ 0xb8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2294      	movs	r2, #148	@ 0x94
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f006 fccd 	bl	8007f10 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <HAL_SAI_MspInit+0x10c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d171      	bne.n	8001664 <HAL_SAI_MspInit+0x104>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001580:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001584:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001586:	2300      	movs	r3, #0
 8001588:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 800158a:	2302      	movs	r3, #2
 800158c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 800158e:	2304      	movs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8001592:	2330      	movs	r3, #48	@ 0x30
 8001594:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8001596:	2311      	movs	r3, #17
 8001598:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800159a:	2302      	movs	r3, #2
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80015a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fae9 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80015b8:	f7ff fd4a 	bl	8001050 <Error_Handler>
    }

    if (SAI1_client == 0)
 80015bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <HAL_SAI_MspInit+0x110>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_SAI_MspInit+0x114>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001674 <HAL_SAI_MspInit+0x114>)
 80015ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <HAL_SAI_MspInit+0x114>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_SAI_MspInit+0x110>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <HAL_SAI_MspInit+0x110>)
 80015e4:	6013      	str	r3, [r2, #0]
    PD6     ------> SAI1_D1
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80015e6:	2378      	movs	r3, #120	@ 0x78
 80015e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015fe:	230d      	movs	r3, #13
 8001600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001608:	4619      	mov	r1, r3
 800160a:	481b      	ldr	r0, [pc, #108]	@ (8001678 <HAL_SAI_MspInit+0x118>)
 800160c:	f000 ff0c 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001610:	2340      	movs	r3, #64	@ 0x40
 8001612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 8001628:	2303      	movs	r3, #3
 800162a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001632:	4619      	mov	r1, r3
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <HAL_SAI_MspInit+0x11c>)
 8001636:	f000 fef7 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163a:	2304      	movs	r3, #4
 800163c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001658:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <HAL_SAI_MspInit+0x118>)
 8001660:	f000 fee2 	bl	8002428 <HAL_GPIO_Init>

    }
}
 8001664:	bf00      	nop
 8001666:	37b8      	adds	r7, #184	@ 0xb8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40015404 	.word	0x40015404
 8001670:	20000340 	.word	0x20000340
 8001674:	40021000 	.word	0x40021000
 8001678:	42021000 	.word	0x42021000
 800167c:	42020c00 	.word	0x42020c00

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 f99f 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80016e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016e6:	f001 f851 	bl	800278c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <TIM2_IRQHandler+0x10>)
 80016f6:	f004 fd65 	bl	80061c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000258 	.word	0x20000258

08001704 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <SPI1_IRQHandler+0x10>)
 800170a:	f004 fb75 	bl	8005df8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200001f4 	.word	0x200001f4

08001718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <USART1_IRQHandler+0x10>)
 800171e:	f005 fa0f 	bl	8006b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002a4 	.word	0x200002a4

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f006 fbe0 	bl	8007f20 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20030000 	.word	0x20030000
 800178c:	00000400 	.word	0x00000400
 8001790:	20000344 	.word	0x20000344
 8001794:	200004a8 	.word	0x200004a8

08001798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80017c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80017ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e005      	b.n	80017ea <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80017de:	4b48      	ldr	r3, [pc, #288]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80017ea:	4a46      	ldr	r2, [pc, #280]	@ (8001904 <SystemCoreClockUpdate+0x148>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f4:	4b42      	ldr	r3, [pc, #264]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	d866      	bhi.n	80018ce <SystemCoreClockUpdate+0x112>
 8001800:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <SystemCoreClockUpdate+0x4c>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	0800183d 	.word	0x0800183d
 800180c:	080018cf 	.word	0x080018cf
 8001810:	080018cf 	.word	0x080018cf
 8001814:	080018cf 	.word	0x080018cf
 8001818:	08001845 	.word	0x08001845
 800181c:	080018cf 	.word	0x080018cf
 8001820:	080018cf 	.word	0x080018cf
 8001824:	080018cf 	.word	0x080018cf
 8001828:	0800184d 	.word	0x0800184d
 800182c:	080018cf 	.word	0x080018cf
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	08001855 	.word	0x08001855
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800183c:	4a32      	ldr	r2, [pc, #200]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	6013      	str	r3, [r2, #0]
      break;
 8001842:	e048      	b.n	80018d6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001844:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 8001846:	4a31      	ldr	r2, [pc, #196]	@ (800190c <SystemCoreClockUpdate+0x150>)
 8001848:	601a      	str	r2, [r3, #0]
      break;
 800184a:	e044      	b.n	80018d6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800184c:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 800184e:	4a30      	ldr	r2, [pc, #192]	@ (8001910 <SystemCoreClockUpdate+0x154>)
 8001850:	601a      	str	r2, [r3, #0]
      break;
 8001852:	e040      	b.n	80018d6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	3301      	adds	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <SystemCoreClockUpdate+0xbe>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d006      	beq.n	8001886 <SystemCoreClockUpdate+0xca>
 8001878:	e00b      	b.n	8001892 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800187a:	4a24      	ldr	r2, [pc, #144]	@ (800190c <SystemCoreClockUpdate+0x150>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	613b      	str	r3, [r7, #16]
          break;
 8001884:	e00b      	b.n	800189e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001886:	4a22      	ldr	r2, [pc, #136]	@ (8001910 <SystemCoreClockUpdate+0x154>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	613b      	str	r3, [r7, #16]
          break;
 8001890:	e005      	b.n	800189e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	613b      	str	r3, [r7, #16]
          break;
 800189c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 80018ca:	6013      	str	r3, [r2, #0]
      break;
 80018cc:	e003      	b.n	80018d6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	6013      	str	r3, [r2, #0]
      break;
 80018d4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <SystemCoreClockUpdate+0x144>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001914 <SystemCoreClockUpdate+0x158>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemCoreClockUpdate+0x14c>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000
 8001904:	08008868 	.word	0x08008868
 8001908:	20000000 	.word	0x20000000
 800190c:	00f42400 	.word	0x00f42400
 8001910:	007a1200 	.word	0x007a1200
 8001914:	08008850 	.word	0x08008850

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff ff3c 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001922:	e003      	b.n	800192c <LoopCopyDataInit>

08001924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800192a:	3104      	adds	r1, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800192c:	480a      	ldr	r0, [pc, #40]	@ (8001958 <LoopForever+0xa>)
	ldr	r3, =_edata
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001934:	d3f6      	bcc.n	8001924 <CopyDataInit>
	ldr	r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001938:	e002      	b.n	8001940 <LoopFillZerobss>

0800193a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800193a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800193c:	f842 3b04 	str.w	r3, [r2], #4

08001940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <LoopForever+0x16>)
	cmp	r2, r3
 8001942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001944:	d3f9      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001946:	f006 faf1 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7fe fe39 	bl	80005c0 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001950:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001954:	08008914 	.word	0x08008914
	ldr	r0, =_sdata
 8001958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800195c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001960:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001964:	200004a8 	.word	0x200004a8

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>

0800196a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001974:	2004      	movs	r0, #4
 8001976:	f000 f963 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800197a:	f7ff ff1f 	bl	80017bc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f80e 	bl	80019a0 <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	e001      	b.n	8001994 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001990:	f7ff fb64 	bl	800105c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001994:	79fb      	ldrb	r3, [r7, #7]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_InitTick+0x6c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b4:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_InitTick+0x70>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_InitTick+0x6c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f96b 	bl	8001ca6 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d809      	bhi.n	80019f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f937 	bl	8001c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_InitTick+0x74>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e007      	b.n	8001a00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e004      	b.n	8001a00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e001      	b.n	8001a00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000348 	.word	0x20000348

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000348 	.word	0x20000348

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0152      	lsls	r2, r2, #5
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0152      	lsls	r2, r2, #5
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	bf28      	it	cs
 8001bb2:	2303      	movcs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b04      	subs	r3, #4
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	2107      	movs	r1, #7
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff29 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff40 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff90 	bl	8001b94 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5f 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff33 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa4 	bl	8001bfc <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0ac      	b.n	8001e2c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fa6c 	bl	80021b4 <DFSDM_GetChannelFromInstance>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a55      	ldr	r2, [pc, #340]	@ (8001e34 <HAL_DFSDM_ChannelInit+0x174>)
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e09f      	b.n	8001e2c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fa6d 	bl	80011cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_DFSDM_ChannelInit+0x178>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e38 <HAL_DFSDM_ChannelInit+0x178>)
 8001cfa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_DFSDM_ChannelInit+0x178>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d125      	bne.n	8001d50 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001d04:	4b4d      	ldr	r3, [pc, #308]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001d0e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001d10:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4948      	ldr	r1, [pc, #288]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001d1e:	4b47      	ldr	r3, [pc, #284]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a46      	ldr	r2, [pc, #280]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d24:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001d28:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	791b      	ldrb	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	493f      	ldr	r1, [pc, #252]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001d44:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d4e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001d5e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d6e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d74:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 020f 	bic.w	r2, r2, #15
 8001d8c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001db4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f002 0207 	and.w	r2, r2, #7
 8001de0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f9ca 	bl	80021b4 <DFSDM_GetChannelFromInstance>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4904      	ldr	r1, [pc, #16]	@ (8001e34 <HAL_DFSDM_ChannelInit+0x174>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000350 	.word	0x20000350
 8001e38:	2000034c 	.word	0x2000034c
 8001e3c:	40016000 	.word	0x40016000

08001e40 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0ca      	b.n	8001fe8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a66      	ldr	r2, [pc, #408]	@ (8001ff0 <HAL_DFSDM_FilterInit+0x1b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d109      	bne.n	8001e70 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d003      	beq.n	8001e6c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0bb      	b.n	8001fe8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff f90b 	bl	80010a4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001e9c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a1b      	ldrb	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e007      	b.n	8001ec8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7a5b      	ldrb	r3, [r3, #9]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001f00:	f023 0308 	bic.w	r3, r3, #8
 8001f04:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d108      	bne.n	8001f20 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7c1b      	ldrb	r3, [r3, #16]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0210 	orr.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0210 	bic.w	r2, r2, #16
 8001f48:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7c5b      	ldrb	r3, [r3, #17]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0220 	bic.w	r2, r2, #32
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8001f82:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001f86:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6959      	ldr	r1, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001f9a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001fa2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7c1a      	ldrb	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40016100 	.word	0x40016100

08001ff4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02e      	beq.n	800206c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002014:	2bff      	cmp	r3, #255	@ 0xff
 8002016:	d029      	beq.n	800206c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10d      	bne.n	800204e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e00a      	b.n	8002064 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30
 800206a:	e001      	b.n	8002070 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002070:	7dfb      	ldrb	r3, [r7, #23]
}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d004      	beq.n	800209e <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800209a:	2b03      	cmp	r3, #3
 800209c:	d103      	bne.n	80020a6 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8b0 	bl	8002204 <DFSDM_RegConvStart>
 80020a4:	e001      	b.n	80020aa <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DFSDM_FilterPollForRegConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterPollForRegConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                       uint32_t                    Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d006      	beq.n	80020d6 <HAL_DFSDM_FilterPollForRegConversion+0x22>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d001      	beq.n	80020d6 <HAL_DFSDM_FilterPollForRegConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e040      	b.n	8002158 <HAL_DFSDM_FilterPollForRegConversion+0xa4>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80020d6:	f7ff fcb3 	bl	8001a40 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

    /* Wait end of regular conversion */
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 80020dc:	e010      	b.n	8002100 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    {
      /* Check the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d00c      	beq.n	8002100 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff fcab 	bl	8001a40 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <HAL_DFSDM_FilterPollForRegConversion+0x48>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e02b      	b.n	8002158 <HAL_DFSDM_FilterPollForRegConversion+0xa4>
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d1e7      	bne.n	80020de <HAL_DFSDM_FilterPollForRegConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d109      	bne.n	8002130 <HAL_DFSDM_FilterPollForRegConversion+0x7c>
    {
      /* Update error code and call error callback */
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	651a      	str	r2, [r3, #80]	@ 0x50
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
      hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f83b 	bl	800219e <HAL_DFSDM_FilterErrorCallback>
#endif

      /* Clear regular overrun flag */
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	60da      	str	r2, [r3, #12]
    }
    /* Update DFSDM filter state only if not continuous conversion and SW trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10e      	bne.n	8002156 <HAL_DFSDM_FilterPollForRegConversion+0xa2>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_DFSDM_FilterPollForRegConversion+0xa2>
    {
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002146:	2b02      	cmp	r3, #2
 8002148:	d101      	bne.n	800214e <HAL_DFSDM_FilterPollForRegConversion+0x9a>
 800214a:	2201      	movs	r2, #1
 800214c:	e000      	b.n	8002150 <HAL_DFSDM_FilterPollForRegConversion+0x9c>
 800214e:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    /* Return function status */
    return HAL_OK;
 8002156:	2300      	movs	r3, #0
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(const DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0207 	and.w	r2, r3, #7
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002182:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	da00      	bge.n	800218c <HAL_DFSDM_FilterGetRegularValue+0x2c>
 800218a:	33ff      	adds	r3, #255	@ 0xff
 800218c:	121b      	asrs	r3, r3, #8
 800218e:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8002190:	68bb      	ldr	r3, [r7, #8]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <DFSDM_GetChannelFromInstance+0x44>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e00f      	b.n	80021ea <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <DFSDM_GetChannelFromInstance+0x48>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d102      	bne.n	80021d8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e008      	b.n	80021ea <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a09      	ldr	r2, [pc, #36]	@ (8002200 <DFSDM_GetChannelFromInstance+0x4c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e001      	b.n	80021ea <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80021e6:	2303      	movs	r3, #3
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40016000 	.word	0x40016000
 80021fc:	40016020 	.word	0x40016020
 8002200:	40016040 	.word	0x40016040

08002204 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e033      	b.n	800228e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002244:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800225c:	2b03      	cmp	r3, #3
 800225e:	d116      	bne.n	800228e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0202 	orr.w	r2, r2, #2
 8002276:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <DFSDM_RegConvStart+0x84>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	e000      	b.n	800228a <DFSDM_RegConvStart+0x86>
 8002288:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <DFSDM_RegConvStart+0x98>
 8002298:	2202      	movs	r2, #2
 800229a:	e000      	b.n	800229e <DFSDM_RegConvStart+0x9a>
 800229c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2204      	movs	r2, #4
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e040      	b.n	800235c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 021c 	and.w	r2, r3, #28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002326:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002348:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d005      	beq.n	800238c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e047      	b.n	800241c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 020e 	bic.w	r2, r2, #14
 800239a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	f003 021c 	and.w	r2, r3, #28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80023d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00c      	beq.n	80023fc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80023fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
    }
  }
  return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002436:	e158      	b.n	80026ea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 814a 	beq.w	80026e4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_Init+0x40>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d017      	beq.n	8002506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a4 	beq.w	80026e4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800259c:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3318      	adds	r3, #24
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_GPIO_Init+0x2e4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d025      	beq.n	8002614 <HAL_GPIO_Init+0x1ec>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a51      	ldr	r2, [pc, #324]	@ (8002710 <HAL_GPIO_Init+0x2e8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d01f      	beq.n	8002610 <HAL_GPIO_Init+0x1e8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a50      	ldr	r2, [pc, #320]	@ (8002714 <HAL_GPIO_Init+0x2ec>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d019      	beq.n	800260c <HAL_GPIO_Init+0x1e4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <HAL_GPIO_Init+0x2f0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_GPIO_Init+0x1e0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a4e      	ldr	r2, [pc, #312]	@ (800271c <HAL_GPIO_Init+0x2f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_GPIO_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002720 <HAL_GPIO_Init+0x2f8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x1d8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002724 <HAL_GPIO_Init+0x2fc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_GPIO_Init+0x1d4>
 80025f8:	2306      	movs	r3, #6
 80025fa:	e00c      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 80025fc:	2307      	movs	r3, #7
 80025fe:	e00a      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002600:	2305      	movs	r3, #5
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002604:	2304      	movs	r3, #4
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	00d2      	lsls	r2, r2, #3
 800261e:	4093      	lsls	r3, r2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002626:	4938      	ldr	r1, [pc, #224]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3318      	adds	r3, #24
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a21      	ldr	r2, [pc, #132]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 800268a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80026b6:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 80026b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <HAL_GPIO_Init+0x2e0>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f ae9f 	bne.w	8002438 <HAL_GPIO_Init+0x10>
  }
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	4002f400 	.word	0x4002f400
 800270c:	42020000 	.word	0x42020000
 8002710:	42020400 	.word	0x42020400
 8002714:	42020800 	.word	0x42020800
 8002718:	42020c00 	.word	0x42020c00
 800271c:	42021000 	.word	0x42021000
 8002720:	42021400 	.word	0x42021400
 8002724:	42021800 	.word	0x42021800

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e002      	b.n	800274c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43d9      	mvns	r1, r3
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	400b      	ands	r3, r1
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002796:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027a2:	4a0c      	ldr	r2, [pc, #48]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f814 	bl	80027d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027bc:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc1f 	bl	8001008 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	4002f400 	.word	0x4002f400

080027d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e08d      	b.n	800291c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7fe fd6d 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2224      	movs	r2, #36	@ 0x24
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800283e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800284e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	e006      	b.n	8002876 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002874:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d108      	bne.n	8002890 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e007      	b.n	80028a0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800289e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69d9      	ldr	r1, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	d138      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002944:	2302      	movs	r3, #2
 8002946:	e032      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	@ 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d139      	bne.n	8002a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029da:	2302      	movs	r3, #2
 80029dc:	e033      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2224      	movs	r2, #36	@ 0x24
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e007      	b.n	8002a82 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a72:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0204 	bic.w	r2, r3, #4
 8002a7a:	4905      	ldr	r1, [pc, #20]	@ (8002a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40030400 	.word	0x40030400

08002a94 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_ICACHE_Enable+0x1c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_ICACHE_Enable+0x1c>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40030400 	.word	0x40030400

08002ab4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ae0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002ae2:	f000 f871 	bl	8002bc8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aec:	d101      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e03e      	b.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002af2:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afe:	d101      	bne.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e035      	b.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d101      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e02f      	b.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002b18:	4917      	ldr	r1, [pc, #92]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002b20:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	4a16      	ldr	r2, [pc, #88]	@ (8002b80 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	09db      	lsrs	r3, r3, #7
 8002b2e:	2232      	movs	r2, #50	@ 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	08db      	lsrs	r3, r3, #3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b68:	d101      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e000      	b.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	0a7c5ac5 	.word	0x0a7c5ac5
 8002b84:	cccccccd 	.word	0xcccccccd

08002b88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6053      	str	r3, [r2, #4]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb6:	6093      	str	r3, [r2, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	e00a      	b.n	8002bfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	e001      	b.n	8002bfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f000 bcc2 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c24:	4b99      	ldr	r3, [pc, #612]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c2e:	4b97      	ldr	r3, [pc, #604]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80e9 	beq.w	8002e18 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4a>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	f040 8083 	bne.w	8002d5a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d17f      	bne.n	8002d5a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5a:	4b8c      	ldr	r3, [pc, #560]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_RCC_OscConfig+0x64>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f000 bc9a 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c78:	4b84      	ldr	r3, [pc, #528]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_RCC_OscConfig+0x7e>
 8002c84:	4b81      	ldr	r3, [pc, #516]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c8c:	e005      	b.n	8002c9a <HAL_RCC_OscConfig+0x8a>
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d224      	bcs.n	8002ce8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe9c 	bl	80039e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 bc7a 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb4:	4b75      	ldr	r3, [pc, #468]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a74      	ldr	r2, [pc, #464]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cba:	f043 0308 	orr.w	r3, r3, #8
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b72      	ldr	r3, [pc, #456]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	496f      	ldr	r1, [pc, #444]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	496a      	ldr	r1, [pc, #424]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
 8002ce6:	e026      	b.n	8002d36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	4962      	ldr	r1, [pc, #392]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d06:	4b61      	ldr	r3, [pc, #388]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	495d      	ldr	r1, [pc, #372]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fe5b 	bl	80039e0 <RCC_SetFlashLatencyFromMSIRange>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f000 bc39 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d36:	f000 fe17 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a54      	ldr	r2, [pc, #336]	@ (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d40:	4b54      	ldr	r3, [pc, #336]	@ (8002e94 <HAL_RCC_OscConfig+0x284>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fe2b 	bl	80019a0 <HAL_InitTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d060      	beq.n	8002e16 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	f000 bc27 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d039      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a49      	ldr	r2, [pc, #292]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fe67 	bl	8001a40 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d74:	e00f      	b.n	8002d96 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d76:	f7fe fe63 	bl	8001a40 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d908      	bls.n	8002d96 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d84:	4b41      	ldr	r3, [pc, #260]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f000 bc09 	b.w	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d96:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0e9      	beq.n	8002d76 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da2:	4b3a      	ldr	r3, [pc, #232]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a39      	ldr	r2, [pc, #228]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	4934      	ldr	r1, [pc, #208]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc0:	4b32      	ldr	r3, [pc, #200]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	492f      	ldr	r1, [pc, #188]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	e020      	b.n	8002e18 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2c      	ldr	r2, [pc, #176]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fe2d 	bl	8001a40 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002de8:	e00e      	b.n	8002e08 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dea:	f7fe fe29 	bl	8001a40 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d907      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df8:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e3cf      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ea      	bne.n	8002dea <HAL_RCC_OscConfig+0x1da>
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d07e      	beq.n	8002f22 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x226>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d10e      	bne.n	8002e4e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06e      	beq.n	8002f20 <HAL_RCC_OscConfig+0x310>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d16a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e3ac      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x256>
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e024      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2a0>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e6e:	d113      	bne.n	8002e98 <HAL_RCC_OscConfig+0x288>
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a02      	ldr	r2, [pc, #8]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e012      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2a0>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004
 8002e98:	4b8b      	ldr	r3, [pc, #556]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a8a      	ldr	r2, [pc, #552]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a87      	ldr	r2, [pc, #540]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d019      	beq.n	8002eec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fdc2 	bl	8001a40 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	e00e      	b.n	8002ede <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fdbe 	bl	8001a40 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d907      	bls.n	8002ede <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	4b7e      	ldr	r3, [pc, #504]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e364      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	4b7a      	ldr	r3, [pc, #488]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ea      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2b0>
 8002eea:	e01a      	b.n	8002f22 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fda8 	bl	8001a40 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef2:	e00e      	b.n	8002f12 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fda4 	bl	8001a40 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d907      	bls.n	8002f12 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	4b71      	ldr	r3, [pc, #452]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e34a      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f12:	4b6d      	ldr	r3, [pc, #436]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ea      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2e4>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d06c      	beq.n	8003008 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x330>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d119      	bne.n	8002f6e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d116      	bne.n	8002f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f40:	4b61      	ldr	r3, [pc, #388]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_OscConfig+0x348>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e327      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b5b      	ldr	r3, [pc, #364]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	4958      	ldr	r1, [pc, #352]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f6c:	e04c      	b.n	8003008 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d029      	beq.n	8002fca <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f76:	4b54      	ldr	r3, [pc, #336]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a53      	ldr	r2, [pc, #332]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fd5d 	bl	8001a40 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fd59 	bl	8001a40 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f98:	4b4b      	ldr	r3, [pc, #300]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e2ff      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa8:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ea      	beq.n	8002f8a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b44      	ldr	r3, [pc, #272]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	4941      	ldr	r1, [pc, #260]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	e01e      	b.n	8003008 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3e      	ldr	r2, [pc, #248]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fd33 	bl	8001a40 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe fd2f 	bl	8001a40 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d907      	bls.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fec:	4b36      	ldr	r3, [pc, #216]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e2d5      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffc:	4b32      	ldr	r3, [pc, #200]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d062      	beq.n	80030da <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d038      	beq.n	800308e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302a:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f023 0310 	bic.w	r3, r3, #16
 8003030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003034:	e007      	b.n	8003046 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f043 0310 	orr.w	r3, r3, #16
 8003042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304c:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fcf3 	bl	8001a40 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305c:	e00f      	b.n	800307e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fcef 	bl	8001a40 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b07      	cmp	r3, #7
 800306a:	d908      	bls.n	800307e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e294      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307e:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0e8      	beq.n	800305e <HAL_RCC_OscConfig+0x44e>
 800308c:	e025      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003094:	4a0c      	ldr	r2, [pc, #48]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fccf 	bl	8001a40 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	e012      	b.n	80030cc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe fccb 	bl	8001a40 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	d90b      	bls.n	80030cc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e270      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 812d 	beq.w	8003342 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	@ 0x58
 8003104:	4b9a      	ldr	r3, [pc, #616]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	4b97      	ldr	r3, [pc, #604]	@ (8003374 <HAL_RCC_OscConfig+0x764>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11e      	bne.n	800315e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003120:	4b94      	ldr	r3, [pc, #592]	@ (8003374 <HAL_RCC_OscConfig+0x764>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a93      	ldr	r2, [pc, #588]	@ (8003374 <HAL_RCC_OscConfig+0x764>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7fe fc88 	bl	8001a40 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003132:	e00e      	b.n	8003152 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003134:	f7fe fc84 	bl	8001a40 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d907      	bls.n	8003152 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b8c      	ldr	r3, [pc, #560]	@ (8003374 <HAL_RCC_OscConfig+0x764>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e22a      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x764>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ea      	beq.n	8003134 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01f      	beq.n	80031aa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003176:	4b7e      	ldr	r3, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	4a7c      	ldr	r2, [pc, #496]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003186:	4b7a      	ldr	r3, [pc, #488]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	4a78      	ldr	r2, [pc, #480]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003196:	e018      	b.n	80031ca <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	4a74      	ldr	r2, [pc, #464]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031a8:	e00f      	b.n	80031ca <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031aa:	4b71      	ldr	r3, [pc, #452]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d068      	beq.n	80032a4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe fc35 	bl	8001a40 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	e011      	b.n	80031fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe fc31 	bl	8001a40 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d908      	bls.n	80031fe <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1d4      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0e6      	beq.n	80031da <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d022      	beq.n	800325e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003218:	4b55      	ldr	r3, [pc, #340]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	4a54      	ldr	r2, [pc, #336]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fc09 	bl	8001a40 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d908      	bls.n	800324e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1ac      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800324e:	4b48      	ldr	r3, [pc, #288]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0e6      	beq.n	800322a <HAL_RCC_OscConfig+0x61a>
 800325c:	e068      	b.n	8003330 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800325e:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	4a42      	ldr	r2, [pc, #264]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800326e:	e011      	b.n	8003294 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fbe6 	bl	8001a40 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d908      	bls.n	8003294 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003282:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e189      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003294:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e6      	bne.n	8003270 <HAL_RCC_OscConfig+0x660>
 80032a2:	e045      	b.n	8003330 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe fbcc 	bl	8001a40 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032aa:	e011      	b.n	80032d0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe fbc8 	bl	8001a40 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d908      	bls.n	80032d0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032be:	4b2c      	ldr	r3, [pc, #176]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e16b      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d021      	beq.n	8003330 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 80032f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032fc:	e011      	b.n	8003322 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe fb9f 	bl	8001a40 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d908      	bls.n	8003322 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003310:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e142      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e6      	bne.n	80032fe <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003330:	7ffb      	ldrb	r3, [r7, #31]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003340:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04f      	beq.n	80033ee <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d028      	beq.n	80033a8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 8003358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <HAL_RCC_OscConfig+0x760>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fb6b 	bl	8001a40 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x788>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003378:	f7fe fb62 	bl	8001a40 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d908      	bls.n	8003398 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003386:	4b8a      	ldr	r3, [pc, #552]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e107      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003398:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 800339a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0e8      	beq.n	8003378 <HAL_RCC_OscConfig+0x768>
 80033a6:	e022      	b.n	80033ee <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033a8:	4b81      	ldr	r3, [pc, #516]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80033aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ae:	4a80      	ldr	r2, [pc, #512]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe fb42 	bl	8001a40 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c0:	f7fe fb3e 	bl	8001a40 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d908      	bls.n	80033e0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033ce:	4b78      	ldr	r3, [pc, #480]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80033d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0e3      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e0:	4b73      	ldr	r3, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80033e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e8      	bne.n	80033c0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80d7 	beq.w	80035a6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f8:	4b6d      	ldr	r3, [pc, #436]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f000 8091 	beq.w	8003528 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	2b02      	cmp	r3, #2
 800340c:	d166      	bne.n	80034dc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b68      	ldr	r3, [pc, #416]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a67      	ldr	r2, [pc, #412]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fe fb11 	bl	8001a40 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	e00e      	b.n	8003440 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe fb0d 	bl	8001a40 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d907      	bls.n	8003440 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003430:	4b5f      	ldr	r3, [pc, #380]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0b3      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003440:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ea      	bne.n	8003422 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344c:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b58      	ldr	r3, [pc, #352]	@ (80035b4 <HAL_RCC_OscConfig+0x9a4>)
 8003452:	4013      	ands	r3, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800345c:	3a01      	subs	r2, #1
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	4311      	orrs	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003466:	0212      	lsls	r2, r2, #8
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800346e:	0852      	lsrs	r2, r2, #1
 8003470:	3a01      	subs	r2, #1
 8003472:	0552      	lsls	r2, r2, #21
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800347a:	0852      	lsrs	r2, r2, #1
 800347c:	3a01      	subs	r2, #1
 800347e:	0652      	lsls	r2, r2, #25
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003486:	06d2      	lsls	r2, r2, #27
 8003488:	430a      	orrs	r2, r1
 800348a:	4949      	ldr	r1, [pc, #292]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800349c:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a43      	ldr	r2, [pc, #268]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe faca 	bl	8001a40 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	e00e      	b.n	80034ce <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe fac6 	bl	8001a40 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d907      	bls.n	80034ce <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	4b3c      	ldr	r3, [pc, #240]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e06c      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	4b38      	ldr	r3, [pc, #224]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ea      	beq.n	80034b0 <HAL_RCC_OscConfig+0x8a0>
 80034da:	e064      	b.n	80035a6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a33      	ldr	r2, [pc, #204]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe faaa 	bl	8001a40 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ee:	e00e      	b.n	800350e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe faa6 	bl	8001a40 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d907      	bls.n	800350e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e04c      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350e:	4b28      	ldr	r3, [pc, #160]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ea      	bne.n	80034f0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800351a:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4924      	ldr	r1, [pc, #144]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003520:	4b25      	ldr	r3, [pc, #148]	@ (80035b8 <HAL_RCC_OscConfig+0x9a8>)
 8003522:	4013      	ands	r3, r2
 8003524:	60cb      	str	r3, [r1, #12]
 8003526:	e03e      	b.n	80035a6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e039      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003534:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCC_OscConfig+0x9a0>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	429a      	cmp	r2, r3
 8003546:	d12c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	3b01      	subs	r3, #1
 8003554:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d123      	bne.n	80035a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11b      	bne.n	80035a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d113      	bne.n	80035a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	019f800c 	.word	0x019f800c
 80035b8:	feeefffc 	.word	0xfeeefffc

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e11c      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b90      	ldr	r3, [pc, #576]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 020f 	bic.w	r2, r3, #15
 80035ea:	498b      	ldr	r1, [pc, #556]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b89      	ldr	r3, [pc, #548]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e104      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b81      	ldr	r3, [pc, #516]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361c:	429a      	cmp	r2, r3
 800361e:	d908      	bls.n	8003632 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b7e      	ldr	r3, [pc, #504]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	497b      	ldr	r1, [pc, #492]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8085 	beq.w	800374a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d11f      	bne.n	8003688 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b74      	ldr	r3, [pc, #464]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0da      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003658:	f000 fa26 	bl	8003aa8 <RCC_GetSysClockFreqFromPLLSource>
 800365c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4a6f      	ldr	r2, [pc, #444]	@ (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d947      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003666:	4b6d      	ldr	r3, [pc, #436]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d141      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003672:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800367a:	4a68      	ldr	r2, [pc, #416]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800367c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003680:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e036      	b.n	80036f6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003690:	4b62      	ldr	r3, [pc, #392]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d115      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b6      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a8:	4b5c      	ldr	r3, [pc, #368]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0aa      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	4b58      	ldr	r3, [pc, #352]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0a2      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036c8:	f000 f8b0 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4a53      	ldr	r2, [pc, #332]	@ (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90f      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036d6:	4b51      	ldr	r3, [pc, #324]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036e2:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ea:	4a4c      	ldr	r2, [pc, #304]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b49      	ldr	r3, [pc, #292]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4946      	ldr	r1, [pc, #280]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe f99a 	bl	8001a40 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e013      	b.n	8003738 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fe f996 	bl	8001a40 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d90a      	bls.n	8003738 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b3e      	ldr	r3, [pc, #248]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e06a      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003738:	4b38      	ldr	r3, [pc, #224]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 020c 	and.w	r2, r3, #12
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	429a      	cmp	r2, r3
 8003748:	d1e2      	bne.n	8003710 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b80      	cmp	r3, #128	@ 0x80
 800374e:	d105      	bne.n	800375c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003750:	4b32      	ldr	r3, [pc, #200]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800375a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003774:	429a      	cmp	r2, r3
 8003776:	d208      	bcs.n	800378a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b28      	ldr	r3, [pc, #160]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4925      	ldr	r1, [pc, #148]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800378a:	4b23      	ldr	r3, [pc, #140]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d210      	bcs.n	80037ba <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f023 020f 	bic.w	r2, r3, #15
 80037a0:	491d      	ldr	r1, [pc, #116]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_ClockConfig+0x25c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e029      	b.n	800380e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4912      	ldr	r1, [pc, #72]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e4:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	490a      	ldr	r1, [pc, #40]	@ (800381c <HAL_RCC_ClockConfig+0x260>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037f8:	f000 f8b6 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4a09      	ldr	r2, [pc, #36]	@ (8003824 <HAL_RCC_ClockConfig+0x268>)
 8003800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_RCC_ClockConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f8ca 	bl	80019a0 <HAL_InitTick>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40022000 	.word	0x40022000
 800381c:	40021000 	.word	0x40021000
 8003820:	04c4b400 	.word	0x04c4b400
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b44      	ldr	r3, [pc, #272]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x34>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d121      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11e      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800386c:	4b3a      	ldr	r3, [pc, #232]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800387c:	4b36      	ldr	r3, [pc, #216]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003888:	4a34      	ldr	r2, [pc, #208]	@ (800395c <HAL_RCC_GetSysClockFreq+0x130>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x134>)
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e004      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x138>)
 80038b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d146      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038ba:	4b27      	ldr	r3, [pc, #156]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3301      	adds	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d003      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0xb4>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d00d      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0xce>
 80038de:	e019      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x134>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038ea:	68d2      	ldr	r2, [r2, #12]
 80038ec:	0a12      	lsrs	r2, r2, #8
 80038ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]
        break;
 80038f8:	e019      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x138>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003904:	68d2      	ldr	r2, [r2, #12]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
        break;
 8003912:	e00c      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	4a0e      	ldr	r2, [pc, #56]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800391e:	68d2      	ldr	r2, [r2, #12]
 8003920:	0a12      	lsrs	r2, r2, #8
 8003922:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	617b      	str	r3, [r7, #20]
        break;
 800392c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	0e5b      	lsrs	r3, r3, #25
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	3301      	adds	r3, #1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003948:	69bb      	ldr	r3, [r7, #24]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	@ 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	08008868 	.word	0x08008868
 8003960:	00f42400 	.word	0x00f42400
 8003964:	007a1200 	.word	0x007a1200

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800396c:	f7ff ff5e 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08008850 	.word	0x08008850

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff ffe8 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08008860 	.word	0x08008860

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffd4 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0adb      	lsrs	r3, r3, #11
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08008860 	.word	0x08008860

080039e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039ec:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039f8:	f7ff f85c 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80039fc:	6138      	str	r0, [r7, #16]
 80039fe:	e014      	b.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4a26      	ldr	r2, [pc, #152]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0c:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a18:	f7ff f84c 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 8003a1c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a36:	d10b      	bne.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d919      	bls.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a42:	d902      	bls.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a44:	2302      	movs	r3, #2
 8003a46:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003a48:	e013      	b.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003a4e:	e010      	b.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d902      	bls.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a56:	2303      	movs	r3, #3
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e00a      	b.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b80      	cmp	r3, #128	@ 0x80
 8003a60:	d102      	bne.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a62:	2302      	movs	r3, #2
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e004      	b.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b70      	cmp	r3, #112	@ 0x70
 8003a6c:	d101      	bne.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020f 	bic.w	r2, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	@ (8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a82:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40022000 	.word	0x40022000

08003aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aae:	4b31      	ldr	r3, [pc, #196]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d015      	beq.n	8003af8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d839      	bhi.n	8003b46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d01c      	beq.n	8003b12 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d133      	bne.n	8003b46 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ade:	4a26      	ldr	r2, [pc, #152]	@ (8003b78 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0a12      	lsrs	r2, r2, #8
 8003aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
      break;
 8003af6:	e029      	b.n	8003b4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af8:	4a20      	ldr	r2, [pc, #128]	@ (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	613b      	str	r3, [r7, #16]
      break;
 8003b10:	e01c      	b.n	8003b4c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b12:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e005      	b.n	8003b3a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b2e:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003b3a:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	613b      	str	r3, [r7, #16]
        break;
 8003b44:	e002      	b.n	8003b4c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
      break;
 8003b4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0e5b      	lsrs	r3, r3, #25
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b66:	683b      	ldr	r3, [r7, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40021000 	.word	0x40021000
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	007a1200 	.word	0x007a1200
 8003b80:	08008868 	.word	0x08008868

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b90:	2300      	movs	r3, #0
 8003b92:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d040      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d02a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d825      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bac:	2b60      	cmp	r3, #96	@ 0x60
 8003bae:	d026      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bb0:	2b60      	cmp	r3, #96	@ 0x60
 8003bb2:	d821      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d006      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d81d      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bc4:	e018      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc6:	4b8f      	ldr	r3, [pc, #572]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4a8e      	ldr	r2, [pc, #568]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bd2:	e015      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 faf8 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003be4:	e00c      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3320      	adds	r3, #32
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 fbd5 	bl	800539c <RCCEx_PLLSAI2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77fb      	strb	r3, [r7, #31]
        break;
 8003bfc:	e000      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c06:	4b7f      	ldr	r3, [pc, #508]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c0c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c14:	497b      	ldr	r1, [pc, #492]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003c1c:	e001      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	7ffb      	ldrb	r3, [r7, #31]
 8003c20:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d047      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	d030      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3c:	d82a      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d02a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c48:	d824      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c54:	d81e      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c60:	e018      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c62:	4b68      	ldr	r3, [pc, #416]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a67      	ldr	r2, [pc, #412]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c6e:	e015      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 faaa 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c80:	e00c      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3320      	adds	r3, #32
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 fb87 	bl	800539c <RCCEx_PLLSAI2_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	77fb      	strb	r3, [r7, #31]
        break;
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca2:	4b58      	ldr	r3, [pc, #352]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4954      	ldr	r1, [pc, #336]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003cb8:	e001      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	7ffb      	ldrb	r3, [r7, #31]
 8003cbc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80ab 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b49      	ldr	r3, [pc, #292]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	4a48      	ldr	r2, [pc, #288]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	4b46      	ldr	r3, [pc, #280]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf8:	4b43      	ldr	r3, [pc, #268]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d04:	f7fd fe9c 	bl	8001a40 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd fe98 	bl	8001a40 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d908      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003d2a:	e006      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0e9      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003d3a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d164      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d42:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d4c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01f      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d60:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d6c:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7c:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	4a20      	ldr	r2, [pc, #128]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01f      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fe4f 	bl	8001a40 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da4:	e012      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd fe4b 	bl	8001a40 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d909      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003dca:	e007      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0e5      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ddc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de4:	4b07      	ldr	r3, [pc, #28]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	4903      	ldr	r1, [pc, #12]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dfc:	e008      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	77bb      	strb	r3, [r7, #30]
 8003e02:	e005      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b9c      	ldr	r3, [pc, #624]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	4a9b      	ldr	r2, [pc, #620]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b96      	ldr	r3, [pc, #600]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3c:	4992      	ldr	r1, [pc, #584]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e50:	4b8d      	ldr	r3, [pc, #564]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 020c 	bic.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	498a      	ldr	r1, [pc, #552]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e72:	4b85      	ldr	r3, [pc, #532]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	4981      	ldr	r1, [pc, #516]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e94:	4b7c      	ldr	r3, [pc, #496]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	4979      	ldr	r1, [pc, #484]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb6:	4b74      	ldr	r3, [pc, #464]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	4970      	ldr	r1, [pc, #448]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee6:	4968      	ldr	r1, [pc, #416]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b63      	ldr	r3, [pc, #396]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	495f      	ldr	r1, [pc, #380]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2a:	4957      	ldr	r1, [pc, #348]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003f3e:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4c:	494e      	ldr	r1, [pc, #312]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d031      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f68:	d00e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f6e:	d814      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f78:	d10f      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4a42      	ldr	r2, [pc, #264]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f84:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f86:	e00c      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f91e 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
        break;
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fa8:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb6:	4934      	ldr	r1, [pc, #208]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fde:	492a      	ldr	r1, [pc, #168]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff2:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	4921      	ldr	r1, [pc, #132]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	4919      	ldr	r1, [pc, #100]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004036:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800403c:	f023 0203 	bic.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004044:	4910      	ldr	r1, [pc, #64]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	4908      	ldr	r1, [pc, #32]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
 8004084:	e014      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f897 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d04a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c4:	d108      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80040c6:	4b70      	ldr	r3, [pc, #448]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80040d6:	e012      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e6:	4968      	ldr	r1, [pc, #416]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ee:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f4:	4a64      	ldr	r2, [pc, #400]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004106:	d10d      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f85e 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004118:	7ffb      	ldrb	r3, [r7, #31]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	77bb      	strb	r3, [r7, #30]
 8004122:	e016      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412c:	d106      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412e:	4b56      	ldr	r3, [pc, #344]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a55      	ldr	r2, [pc, #340]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004138:	60d3      	str	r3, [r2, #12]
 800413a:	e00a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004144:	d105      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004146:	4b50      	ldr	r3, [pc, #320]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a4f      	ldr	r2, [pc, #316]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004150:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d028      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800415e:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	4946      	ldr	r1, [pc, #280]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800417c:	d106      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800417e:	4b42      	ldr	r3, [pc, #264]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a41      	ldr	r2, [pc, #260]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004184:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004188:	60d3      	str	r3, [r2, #12]
 800418a:	e011      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f817 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041a6:	7ffb      	ldrb	r3, [r7, #31]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80041ac:	7ffb      	ldrb	r3, [r7, #31]
 80041ae:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01e      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041bc:	4b32      	ldr	r3, [pc, #200]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041cc:	492e      	ldr	r1, [pc, #184]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041de:	d10c      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fff2 	bl	80051d0 <RCCEx_PLLSAI1_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
 80041f8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004206:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004208:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800420c:	f023 0204 	bic.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004216:	491c      	ldr	r1, [pc, #112]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800422a:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800422c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004230:	f023 0218 	bic.w	r2, r3, #24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	4913      	ldr	r1, [pc, #76]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800424e:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004250:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004254:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800425e:	490a      	ldr	r1, [pc, #40]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800426c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a04      	ldr	r2, [pc, #16]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800427e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000

0800428c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800429e:	d13e      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80042a0:	4b45      	ldr	r3, [pc, #276]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ba:	f200 8773 	bhi.w	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c4:	d005      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042cc:	d00e      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80042ce:	f000 bf69 	b.w	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042d2:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f040 8763 	bne.w	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 80042e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e6:	61fb      	str	r3, [r7, #28]
        break;
 80042e8:	f000 bf5e 	b.w	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042ec:	4b32      	ldr	r3, [pc, #200]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 8758 	bne.w	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 80042fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004300:	61fb      	str	r3, [r7, #28]
        break;
 8004302:	f000 bf53 	b.w	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004306:	4b2c      	ldr	r3, [pc, #176]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004312:	f040 874d 	bne.w	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8004316:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8004318:	61fb      	str	r3, [r7, #28]
        break;
 800431a:	f000 bf49 	b.w	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431e:	4b26      	ldr	r3, [pc, #152]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d036      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d84b      	bhi.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d020      	beq.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004340:	e044      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d116      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800434e:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800435a:	4b17      	ldr	r3, [pc, #92]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	e005      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004366:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	4a13      	ldr	r2, [pc, #76]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8004374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004378:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800437a:	e02a      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
        break;
 8004380:	e027      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438e:	d102      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8004390:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 8004392:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8004394:	e01d      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
        break;
 800439a:	e01a      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043a8:	d102      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80043aa:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80043ac:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80043ae:	e010      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
        break;
 80043b4:	e00d      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0003d090 	.word	0x0003d090
 80043c0:	08008868 	.word	0x08008868
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
        break;
 80043d0:	bf00      	nop
    }

    switch (PeriphClk)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043d8:	f000 8659 	beq.w	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e2:	f200 86e7 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ec:	f000 8605 	beq.w	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f6:	f200 86dd 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004400:	f000 8468 	beq.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800440a:	f200 86d3 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004414:	f000 8530 	beq.w	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800441e:	f200 86c9 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004428:	f000 8180 	beq.w	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004432:	f200 86bf 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800443c:	f000 80c2 	beq.w	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004446:	f200 86b5 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	f000 842f 	beq.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445a:	f200 86ab 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004464:	f000 83e7 	beq.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800446e:	f200 86a1 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004478:	f000 80a4 	beq.w	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004482:	f200 8697 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448c:	f000 8092 	beq.w	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004496:	f200 868d 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a0:	f000 8080 	beq.w	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044aa:	f200 8683 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b4:	f000 8553 	beq.w	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044be:	f200 8679 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	f000 84ff 	beq.w	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d2:	f200 866f 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044dc:	f000 84a0 	beq.w	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e6:	f200 8665 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b80      	cmp	r3, #128	@ 0x80
 80044ee:	f000 846b 	beq.w	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	f200 865d 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d84b      	bhi.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8656 	beq.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	2b1f      	cmp	r3, #31
 800450e:	f200 8651 	bhi.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004512:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004931 	.word	0x08004931
 800451c:	080049a5 	.word	0x080049a5
 8004520:	080051b5 	.word	0x080051b5
 8004524:	08004a37 	.word	0x08004a37
 8004528:	080051b5 	.word	0x080051b5
 800452c:	080051b5 	.word	0x080051b5
 8004530:	080051b5 	.word	0x080051b5
 8004534:	08004aaf 	.word	0x08004aaf
 8004538:	080051b5 	.word	0x080051b5
 800453c:	080051b5 	.word	0x080051b5
 8004540:	080051b5 	.word	0x080051b5
 8004544:	080051b5 	.word	0x080051b5
 8004548:	080051b5 	.word	0x080051b5
 800454c:	080051b5 	.word	0x080051b5
 8004550:	080051b5 	.word	0x080051b5
 8004554:	08004b33 	.word	0x08004b33
 8004558:	080051b5 	.word	0x080051b5
 800455c:	080051b5 	.word	0x080051b5
 8004560:	080051b5 	.word	0x080051b5
 8004564:	080051b5 	.word	0x080051b5
 8004568:	080051b5 	.word	0x080051b5
 800456c:	080051b5 	.word	0x080051b5
 8004570:	080051b5 	.word	0x080051b5
 8004574:	080051b5 	.word	0x080051b5
 8004578:	080051b5 	.word	0x080051b5
 800457c:	080051b5 	.word	0x080051b5
 8004580:	080051b5 	.word	0x080051b5
 8004584:	080051b5 	.word	0x080051b5
 8004588:	080051b5 	.word	0x080051b5
 800458c:	080051b5 	.word	0x080051b5
 8004590:	080051b5 	.word	0x080051b5
 8004594:	08004bb5 	.word	0x08004bb5
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b40      	cmp	r3, #64	@ 0x40
 800459c:	f000 83e8 	beq.w	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80045a0:	f000 be08 	b.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80045aa:	f001 f857 	bl	800565c <RCCEx_GetSAIxPeriphCLKFreq>
 80045ae:	61f8      	str	r0, [r7, #28]
        break;
 80045b0:	f000 be03 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80045ba:	f001 f84f 	bl	800565c <RCCEx_GetSAIxPeriphCLKFreq>
 80045be:	61f8      	str	r0, [r7, #28]
        break;
 80045c0:	f000 bdfb 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80045c4:	4b9c      	ldr	r3, [pc, #624]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80045ce:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045d6:	d015      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045de:	f200 8096 	bhi.w	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e8:	d02a      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f0:	f200 808d 	bhi.w	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d07f      	beq.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004600:	d04b      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8004602:	e084      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004604:	4b8c      	ldr	r3, [pc, #560]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	f040 8081 	bne.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004612:	4b89      	ldr	r3, [pc, #548]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800461e:	4b86      	ldr	r3, [pc, #536]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	e005      	b.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800462a:	4b83      	ldr	r3, [pc, #524]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800462c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	4a81      	ldr	r2, [pc, #516]	@ (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	61fb      	str	r3, [r7, #28]
            break;
 800463e:	e069      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004640:	4b7d      	ldr	r3, [pc, #500]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800464c:	d165      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800464e:	4b7a      	ldr	r3, [pc, #488]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465a:	d15e      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800465c:	4b76      	ldr	r3, [pc, #472]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3301      	adds	r3, #1
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004670:	4b71      	ldr	r3, [pc, #452]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	fb03 f202 	mul.w	r2, r3, r2
 8004684:	4b6c      	ldr	r3, [pc, #432]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0d5b      	lsrs	r3, r3, #21
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	61fb      	str	r3, [r7, #28]
            break;
 8004698:	e03f      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800469a:	4b67      	ldr	r3, [pc, #412]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a6:	d13b      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80046a8:	4b63      	ldr	r3, [pc, #396]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b4:	d134      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80046b6:	f000 ff1d 	bl	80054f4 <RCCEx_PLLSAI1_GetVCOFreq>
 80046ba:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80046bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3301      	adds	r3, #1
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80046d0:	4b59      	ldr	r3, [pc, #356]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046da:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	fb03 f202 	mul.w	r2, r3, r2
 80046e4:	4b54      	ldr	r3, [pc, #336]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	0d5b      	lsrs	r3, r3, #21
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	61fb      	str	r3, [r7, #28]
            break;
 80046f8:	e012      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80046fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80046fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d10e      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8004708:	4b4d      	ldr	r3, [pc, #308]	@ (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800470a:	61fb      	str	r3, [r7, #28]
            break;
 800470c:	e00b      	b.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 800470e:	bf00      	nop
 8004710:	f000 bd53 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004714:	bf00      	nop
 8004716:	f000 bd50 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800471a:	bf00      	nop
 800471c:	f000 bd4d 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004720:	bf00      	nop
 8004722:	f000 bd4a 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004726:	bf00      	nop
        break;
 8004728:	f000 bd47 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 800472c:	4b42      	ldr	r3, [pc, #264]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800472e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800473a:	d13d      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800473c:	4b3e      	ldr	r3, [pc, #248]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004748:	f040 8536 	bne.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800474c:	4b3a      	ldr	r3, [pc, #232]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	f040 852e 	bne.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800475c:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	3301      	adds	r3, #1
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004770:	4b31      	ldr	r3, [pc, #196]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800477a:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800477c:	4b2e      	ldr	r3, [pc, #184]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0edb      	lsrs	r3, r3, #27
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800478e:	4b2a      	ldr	r3, [pc, #168]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 800479a:	2311      	movs	r3, #17
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e001      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 80047a0:	2307      	movs	r3, #7
 80047a2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	fb03 f202 	mul.w	r2, r3, r2
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	f000 bd00 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80047b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80047c2:	60fb      	str	r3, [r7, #12]
          switch (srcclk)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047ca:	d016      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047d2:	f200 809e 	bhi.w	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047dc:	d032      	beq.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e4:	f200 8095 	bhi.w	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047f6:	d052      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 80047f8:	e08b      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 8088 	bne.w	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	e005      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	4a03      	ldr	r2, [pc, #12]	@ (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004832:	61fb      	str	r3, [r7, #28]
              break;
 8004834:	e070      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	08008868 	.word	0x08008868
 8004840:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004844:	4baa      	ldr	r3, [pc, #680]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004850:	d165      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004852:	4ba7      	ldr	r3, [pc, #668]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485e:	d15e      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004860:	4ba3      	ldr	r3, [pc, #652]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3301      	adds	r3, #1
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004874:	4b9e      	ldr	r3, [pc, #632]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	fb03 f202 	mul.w	r2, r3, r2
 8004888:	4b99      	ldr	r3, [pc, #612]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0d5b      	lsrs	r3, r3, #21
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	61fb      	str	r3, [r7, #28]
              break;
 800489c:	e03f      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800489e:	4b94      	ldr	r3, [pc, #592]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048aa:	d13b      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80048ac:	4b90      	ldr	r3, [pc, #576]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048b8:	d134      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80048ba:	f000 fe1b 	bl	80054f4 <RCCEx_PLLSAI1_GetVCOFreq>
 80048be:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80048c0:	4b8b      	ldr	r3, [pc, #556]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3301      	adds	r3, #1
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80048d4:	4b86      	ldr	r3, [pc, #536]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048de:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	fb03 f202 	mul.w	r2, r3, r2
 80048e8:	4b81      	ldr	r3, [pc, #516]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	0d5b      	lsrs	r3, r3, #21
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	61fb      	str	r3, [r7, #28]
              break;
 80048fc:	e012      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048fe:	4b7c      	ldr	r3, [pc, #496]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d10e      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 800490c:	4b79      	ldr	r3, [pc, #484]	@ (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 800490e:	61fb      	str	r3, [r7, #28]
              break;
 8004910:	e00b      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8004912:	bf00      	nop
 8004914:	f000 bc50 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8004918:	bf00      	nop
 800491a:	f000 bc4d 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800491e:	bf00      	nop
 8004920:	f000 bc4a 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8004924:	bf00      	nop
 8004926:	f000 bc47 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800492a:	bf00      	nop
        break;
 800492c:	f000 bc44 	b.w	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004930:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d827      	bhi.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8004942:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	08004959 	.word	0x08004959
 800494c:	08004961 	.word	0x08004961
 8004950:	08004969 	.word	0x08004969
 8004954:	0800497d 	.word	0x0800497d
            frequency = HAL_RCC_GetPCLK2Freq();
 8004958:	f7ff f82e 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 800495c:	61f8      	str	r0, [r7, #28]
            break;
 800495e:	e01f      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8004960:	f7fe ff64 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004964:	61f8      	str	r0, [r7, #28]
            break;
 8004966:	e01b      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004968:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	d110      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8004976:	4b60      	ldr	r3, [pc, #384]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004978:	61fb      	str	r3, [r7, #28]
            break;
 800497a:	e00d      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800497c:	4b5c      	ldr	r3, [pc, #368]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d109      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498e:	61fb      	str	r3, [r7, #28]
            break;
 8004990:	e005      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8004992:	bf00      	nop
 8004994:	f000 bc11 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004998:	bf00      	nop
 800499a:	f000 bc0e 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800499e:	bf00      	nop
        break;
 80049a0:	f000 bc0b 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80049a4:	4b52      	ldr	r3, [pc, #328]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d839      	bhi.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 80049b6:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	08004a2b 	.word	0x08004a2b
 80049c4:	08004a2b 	.word	0x08004a2b
 80049c8:	08004a2b 	.word	0x08004a2b
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004a2b 	.word	0x08004a2b
 80049d4:	08004a2b 	.word	0x08004a2b
 80049d8:	08004a2b 	.word	0x08004a2b
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a2b 	.word	0x08004a2b
 80049e4:	08004a2b 	.word	0x08004a2b
 80049e8:	08004a2b 	.word	0x08004a2b
 80049ec:	08004a15 	.word	0x08004a15
            frequency = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fe ffce 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80049f4:	61f8      	str	r0, [r7, #28]
            break;
 80049f6:	e01d      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 80049f8:	f7fe ff18 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80049fc:	61f8      	str	r0, [r7, #28]
            break;
 80049fe:	e019      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0c:	d10f      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8004a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004a10:	61fb      	str	r3, [r7, #28]
            break;
 8004a12:	e00c      	b.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a14:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d107      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8004a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a26:	61fb      	str	r3, [r7, #28]
            break;
 8004a28:	e003      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8004a2a:	bf00      	nop
 8004a2c:	e3c5      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004a2e:	bf00      	nop
 8004a30:	e3c3      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004a32:	bf00      	nop
        break;
 8004a34:	e3c1      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004a36:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a40:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b30      	cmp	r3, #48	@ 0x30
 8004a46:	d021      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b30      	cmp	r3, #48	@ 0x30
 8004a4c:	d829      	bhi.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d011      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d823      	bhi.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d004      	beq.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8004a66:	e01c      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7fe ff92 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004a6c:	61f8      	str	r0, [r7, #28]
            break;
 8004a6e:	e01d      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8004a70:	f7fe fedc 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004a74:	61f8      	str	r0, [r7, #28]
            break;
 8004a76:	e019      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a78:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a84:	d10f      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8004a86:	4b1c      	ldr	r3, [pc, #112]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004a88:	61fb      	str	r3, [r7, #28]
            break;
 8004a8a:	e00c      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a8c:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d107      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	61fb      	str	r3, [r7, #28]
            break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8004aa2:	bf00      	nop
 8004aa4:	e389      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004aa6:	bf00      	nop
 8004aa8:	e387      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004aaa:	bf00      	nop
        break;
 8004aac:	e385      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004aae:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ab8:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2bc0      	cmp	r3, #192	@ 0xc0
 8004abe:	d027      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ac4:	d82f      	bhi.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b80      	cmp	r3, #128	@ 0x80
 8004aca:	d017      	beq.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b80      	cmp	r3, #128	@ 0x80
 8004ad0:	d829      	bhi.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b40      	cmp	r3, #64	@ 0x40
 8004adc:	d004      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8004ade:	e022      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004ae0:	f7fe ff56 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	61f8      	str	r0, [r7, #28]
            break;
 8004ae6:	e023      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8004ae8:	f7fe fea0 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004aec:	61f8      	str	r0, [r7, #28]
            break;
 8004aee:	e01f      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8004af0:	40021000 	.word	0x40021000
 8004af4:	02dc6c00 	.word	0x02dc6c00
 8004af8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004afc:	4b99      	ldr	r3, [pc, #612]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b08:	d10f      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8004b0a:	4b97      	ldr	r3, [pc, #604]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b0c:	61fb      	str	r3, [r7, #28]
            break;
 8004b0e:	e00c      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b10:	4b94      	ldr	r3, [pc, #592]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b22:	61fb      	str	r3, [r7, #28]
            break;
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8004b26:	bf00      	nop
 8004b28:	e347      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004b2a:	bf00      	nop
 8004b2c:	e345      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004b2e:	bf00      	nop
        break;
 8004b30:	e343      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004b32:	4b8c      	ldr	r3, [pc, #560]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b44:	d025      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4c:	d82c      	bhi.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b54:	d013      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5c:	d824      	bhi.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8004b6c:	e01c      	b.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004b6e:	f7fe ff0f 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004b72:	61f8      	str	r0, [r7, #28]
            break;
 8004b74:	e01d      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe fe59 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004b7a:	61f8      	str	r0, [r7, #28]
            break;
 8004b7c:	e019      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b7e:	4b79      	ldr	r3, [pc, #484]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d10f      	bne.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8004b8c:	4b76      	ldr	r3, [pc, #472]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b8e:	61fb      	str	r3, [r7, #28]
            break;
 8004b90:	e00c      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b92:	4b74      	ldr	r3, [pc, #464]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8004ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba4:	61fb      	str	r3, [r7, #28]
            break;
 8004ba6:	e003      	b.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8004ba8:	bf00      	nop
 8004baa:	e306      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004bac:	bf00      	nop
 8004bae:	e304      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004bb0:	bf00      	nop
        break;
 8004bb2:	e302      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bbe:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bc6:	d025      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bce:	d82c      	bhi.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd6:	d013      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bde:	d824      	bhi.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bec:	d004      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8004bee:	e01c      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fece 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	61f8      	str	r0, [r7, #28]
            break;
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8004bf8:	f7fe fe18 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004bfc:	61f8      	str	r0, [r7, #28]
            break;
 8004bfe:	e019      	b.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c00:	4b58      	ldr	r3, [pc, #352]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0c:	d10f      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8004c0e:	4b56      	ldr	r3, [pc, #344]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004c10:	61fb      	str	r3, [r7, #28]
            break;
 8004c12:	e00c      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c14:	4b53      	ldr	r3, [pc, #332]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d107      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c26:	61fb      	str	r3, [r7, #28]
            break;
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8004c2a:	bf00      	nop
 8004c2c:	e2c5      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004c2e:	bf00      	nop
 8004c30:	e2c3      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004c32:	bf00      	nop
        break;
 8004c34:	e2c1      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c36:	4b4b      	ldr	r3, [pc, #300]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c40:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c48:	d007      	beq.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c50:	d12b      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe fdeb 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004c56:	61f8      	str	r0, [r7, #28]
            break;
 8004c58:	e02a      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004c5a:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8004c66:	f000 fc45 	bl	80054f4 <RCCEx_PLLSAI1_GetVCOFreq>
 8004c6a:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3301      	adds	r3, #1
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c80:	4b38      	ldr	r3, [pc, #224]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8a:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	fb03 f202 	mul.w	r2, r3, r2
 8004c94:	4b33      	ldr	r3, [pc, #204]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	0e5b      	lsrs	r3, r3, #25
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	61fb      	str	r3, [r7, #28]
            break;
 8004ca8:	e001      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8004caa:	bf00      	nop
 8004cac:	e285      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004cae:	bf00      	nop
        break;
 8004cb0:	e283      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7fe fe78 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	61f8      	str	r0, [r7, #28]
        break;
 8004cca:	e276      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ccc:	f7fe fdae 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004cd0:	61f8      	str	r0, [r7, #28]
        break;
 8004cd2:	e272      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004cd4:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cda:	f003 0318 	and.w	r3, r3, #24
 8004cde:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d834      	bhi.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d024      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8004cf8:	e02d      	b.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004d00:	f000 fcac 	bl	800565c <RCCEx_GetSAIxPeriphCLKFreq>
 8004d04:	61f8      	str	r0, [r7, #28]
            break;
 8004d06:	e02b      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d08:	4b16      	ldr	r3, [pc, #88]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d122      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	e005      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4a0c      	ldr	r2, [pc, #48]	@ (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	61fb      	str	r3, [r7, #28]
            break;
 8004d40:	e00b      	b.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d42:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004d52:	61fb      	str	r3, [r7, #28]
            break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8004d56:	bf00      	nop
 8004d58:	e22f      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004d5a:	bf00      	nop
 8004d5c:	e22d      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004d5e:	bf00      	nop
        break;
 8004d60:	e22b      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	08008868 	.word	0x08008868
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d70:	4b96      	ldr	r3, [pc, #600]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d7a:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d013      	beq.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8a:	d819      	bhi.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d98:	d004      	beq.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8004d9a:	e011      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fe fdf8 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004da0:	61f8      	str	r0, [r7, #28]
            break;
 8004da2:	e010      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8004da4:	f7fe fd42 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004da8:	61f8      	str	r0, [r7, #28]
            break;
 8004daa:	e00c      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dac:	4b87      	ldr	r3, [pc, #540]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db8:	d104      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 8004dba:	4b85      	ldr	r3, [pc, #532]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004dbc:	61fb      	str	r3, [r7, #28]
            break;
 8004dbe:	e001      	b.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8004dc0:	bf00      	nop
 8004dc2:	e1fa      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004dc4:	bf00      	nop
        break;
 8004dc6:	e1f8      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004dc8:	4b80      	ldr	r3, [pc, #512]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004dd2:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dda:	d013      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de2:	d819      	bhi.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df0:	d004      	beq.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8004df2:	e011      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fe fdcc 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004df8:	61f8      	str	r0, [r7, #28]
            break;
 8004dfa:	e010      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 8004dfc:	f7fe fd16 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004e00:	61f8      	str	r0, [r7, #28]
            break;
 8004e02:	e00c      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e04:	4b71      	ldr	r3, [pc, #452]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e10:	d104      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8004e12:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004e14:	61fb      	str	r3, [r7, #28]
            break;
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8004e18:	bf00      	nop
 8004e1a:	e1ce      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004e1c:	bf00      	nop
        break;
 8004e1e:	e1cc      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e20:	4b6a      	ldr	r3, [pc, #424]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e2a:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e32:	d013      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e3a:	d819      	bhi.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e48:	d004      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8004e4a:	e011      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fe fda0 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
            break;
 8004e52:	e010      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8004e54:	f7fe fcea 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004e58:	61f8      	str	r0, [r7, #28]
            break;
 8004e5a:	e00c      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e68:	d104      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8004e6a:	4b59      	ldr	r3, [pc, #356]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004e6c:	61fb      	str	r3, [r7, #28]
            break;
 8004e6e:	e001      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8004e70:	bf00      	nop
 8004e72:	e1a2      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004e74:	bf00      	nop
        break;
 8004e76:	e1a0      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004e78:	4b54      	ldr	r3, [pc, #336]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d011      	beq.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d818      	bhi.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d004      	beq.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8004e9c:	e011      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004e9e:	f7fe fd77 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004ea2:	61f8      	str	r0, [r7, #28]
            break;
 8004ea4:	e010      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fe fcc1 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004eaa:	61f8      	str	r0, [r7, #28]
            break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eae:	4b47      	ldr	r3, [pc, #284]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eba:	d104      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8004ebc:	4b44      	ldr	r3, [pc, #272]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004ebe:	61fb      	str	r3, [r7, #28]
            break;
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8004ec2:	bf00      	nop
 8004ec4:	e179      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004ec6:	bf00      	nop
        break;
 8004ec8:	e177      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004eca:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ed4:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004edc:	d02c      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ee4:	d833      	bhi.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004eec:	d01a      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ef4:	d82b      	bhi.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f02:	d004      	beq.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8004f04:	e023      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f06:	f7fe fd43 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	61f8      	str	r0, [r7, #28]
            break;
 8004f0c:	e026      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d11a      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8004f1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f20:	61fb      	str	r3, [r7, #28]
            break;
 8004f22:	e016      	b.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f24:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f30:	d111      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8004f32:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004f34:	61fb      	str	r3, [r7, #28]
            break;
 8004f36:	e00e      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f38:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d109      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8004f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f4a:	61fb      	str	r3, [r7, #28]
            break;
 8004f4c:	e005      	b.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 8004f4e:	bf00      	nop
 8004f50:	e133      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004f52:	bf00      	nop
 8004f54:	e131      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004f56:	bf00      	nop
 8004f58:	e12f      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004f5a:	bf00      	nop
        break;
 8004f5c:	e12d      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f68:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f70:	d030      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f78:	d837      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f80:	d01a      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f88:	d82f      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f96:	d004      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8004f98:	e027      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7fe fcf9 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004f9e:	61f8      	str	r0, [r7, #28]
            break;
 8004fa0:	e02a      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d11e      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8004fb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004fb4:	61fb      	str	r3, [r7, #28]
            break;
 8004fb6:	e01a      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8004fc6:	4b02      	ldr	r3, [pc, #8]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004fc8:	61fb      	str	r3, [r7, #28]
            break;
 8004fca:	e012      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8004fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe6:	61fb      	str	r3, [r7, #28]
            break;
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8004fea:	bf00      	nop
 8004fec:	e0e5      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004fee:	bf00      	nop
 8004ff0:	e0e3      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004ff2:	bf00      	nop
 8004ff4:	e0e1      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004ff6:	bf00      	nop
        break;
 8004ff8:	e0df      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004ffa:	4b72      	ldr	r3, [pc, #456]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005004:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800500c:	d02c      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005014:	d833      	bhi.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800501c:	d01a      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005024:	d82b      	bhi.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005032:	d004      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8005034:	e023      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005036:	f7fe fcab 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800503a:	61f8      	str	r0, [r7, #28]
            break;
 800503c:	e026      	b.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800503e:	4b61      	ldr	r3, [pc, #388]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11a      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800504c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005050:	61fb      	str	r3, [r7, #28]
            break;
 8005052:	e016      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005054:	4b5b      	ldr	r3, [pc, #364]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005060:	d111      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 8005062:	4b59      	ldr	r3, [pc, #356]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8005064:	61fb      	str	r3, [r7, #28]
            break;
 8005066:	e00e      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005068:	4b56      	ldr	r3, [pc, #344]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d109      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507a:	61fb      	str	r3, [r7, #28]
            break;
 800507c:	e005      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 800507e:	bf00      	nop
 8005080:	e09b      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005082:	bf00      	nop
 8005084:	e099      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005086:	bf00      	nop
 8005088:	e097      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800508a:	bf00      	nop
        break;
 800508c:	e095      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800508e:	4b4d      	ldr	r3, [pc, #308]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005094:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005098:	60fb      	str	r3, [r7, #12]
        switch (srcclk)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a0:	d042      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a8:	d874      	bhi.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 80050b8:	e06c      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050ba:	4b42      	ldr	r3, [pc, #264]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050c6:	d167      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 80050c8:	4b40      	ldr	r3, [pc, #256]	@ (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 80050ca:	61fb      	str	r3, [r7, #28]
            break;
 80050cc:	e064      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80050ce:	4b3d      	ldr	r3, [pc, #244]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050da:	d15f      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80050dc:	4b39      	ldr	r3, [pc, #228]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e8:	d158      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050ea:	4b36      	ldr	r3, [pc, #216]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	3301      	adds	r3, #1
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050fe:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005108:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	fb03 f202 	mul.w	r2, r3, r2
 8005112:	4b2c      	ldr	r3, [pc, #176]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	0d5b      	lsrs	r3, r3, #21
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	3301      	adds	r3, #1
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	61fb      	str	r3, [r7, #28]
            break;
 8005126:	e039      	b.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8005128:	4b26      	ldr	r3, [pc, #152]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d035      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005134:	f000 f9de 	bl	80054f4 <RCCEx_PLLSAI1_GetVCOFreq>
 8005138:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800513a:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	3301      	adds	r3, #1
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800514e:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005158:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800515a:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	0edb      	lsrs	r3, r3, #27
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800516c:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8005178:	2311      	movs	r3, #17
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e001      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 800517e:	2307      	movs	r3, #7
 8005180:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	fb03 f202 	mul.w	r2, r3, r2
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	61fb      	str	r3, [r7, #28]
            break;
 8005192:	e005      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8005194:	bf00      	nop
 8005196:	e010      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005198:	bf00      	nop
 800519a:	e00e      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800519c:	bf00      	nop
 800519e:	e00c      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80051a0:	bf00      	nop
        break;
 80051a2:	e00a      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051a4:	bf00      	nop
 80051a6:	e008      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051a8:	bf00      	nop
 80051aa:	e006      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051ac:	bf00      	nop
 80051ae:	e004      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051b0:	bf00      	nop
 80051b2:	e002      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80051b8:	bf00      	nop
    }
  }

  return (frequency);
 80051ba:	69fb      	ldr	r3, [r7, #28]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d018      	beq.n	8005218 <RCCEx_PLLSAI1_Config+0x48>
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d81f      	bhi.n	800522a <RCCEx_PLLSAI1_Config+0x5a>
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d002      	beq.n	80051f4 <RCCEx_PLLSAI1_Config+0x24>
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d009      	beq.n	8005206 <RCCEx_PLLSAI1_Config+0x36>
 80051f2:	e01a      	b.n	800522a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051f4:	4b65      	ldr	r3, [pc, #404]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d117      	bne.n	8005230 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005204:	e014      	b.n	8005230 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005206:	4b61      	ldr	r3, [pc, #388]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520e:	2b00      	cmp	r3, #0
 8005210:	d110      	bne.n	8005234 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005216:	e00d      	b.n	8005234 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005218:	4b5c      	ldr	r3, [pc, #368]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005228:	e006      	b.n	8005238 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      break;
 800522e:	e004      	b.n	800523a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005230:	bf00      	nop
 8005232:	e002      	b.n	800523a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005238:	bf00      	nop
  }

  if (status == HAL_OK)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 809f 	bne.w	8005380 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005242:	4b52      	ldr	r3, [pc, #328]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a51      	ldr	r2, [pc, #324]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005248:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800524c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524e:	f7fc fbf7 	bl	8001a40 <HAL_GetTick>
 8005252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005254:	e00f      	b.n	8005276 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005256:	f7fc fbf3 	bl	8001a40 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d908      	bls.n	8005276 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005264:	4b49      	ldr	r3, [pc, #292]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005274:	e006      	b.n	8005284 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005276:	4b45      	ldr	r3, [pc, #276]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e9      	bne.n	8005256 <RCCEx_PLLSAI1_Config+0x86>
 8005282:	e000      	b.n	8005286 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005284:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d179      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005292:	4b3e      	ldr	r3, [pc, #248]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	4b3e      	ldr	r3, [pc, #248]	@ (8005390 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005298:	4013      	ands	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6892      	ldr	r2, [r2, #8]
 800529e:	0211      	lsls	r1, r2, #8
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	06d2      	lsls	r2, r2, #27
 80052a6:	4311      	orrs	r1, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6852      	ldr	r2, [r2, #4]
 80052ac:	3a01      	subs	r2, #1
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	4934      	ldr	r1, [pc, #208]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
 80052be:	e033      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d118      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c6:	4b31      	ldr	r3, [pc, #196]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	4b32      	ldr	r3, [pc, #200]	@ (8005394 <RCCEx_PLLSAI1_Config+0x1c4>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	0211      	lsls	r1, r2, #8
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6912      	ldr	r2, [r2, #16]
 80052d8:	0852      	lsrs	r2, r2, #1
 80052da:	3a01      	subs	r2, #1
 80052dc:	0552      	lsls	r2, r2, #21
 80052de:	4311      	orrs	r1, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6852      	ldr	r2, [r2, #4]
 80052e4:	3a01      	subs	r2, #1
 80052e6:	0112      	lsls	r2, r2, #4
 80052e8:	4311      	orrs	r1, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	4926      	ldr	r1, [pc, #152]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]
 80052f6:	e017      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052f8:	4b24      	ldr	r3, [pc, #144]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	4b26      	ldr	r3, [pc, #152]	@ (8005398 <RCCEx_PLLSAI1_Config+0x1c8>)
 80052fe:	4013      	ands	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6892      	ldr	r2, [r2, #8]
 8005304:	0211      	lsls	r1, r2, #8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6952      	ldr	r2, [r2, #20]
 800530a:	0852      	lsrs	r2, r2, #1
 800530c:	3a01      	subs	r2, #1
 800530e:	0652      	lsls	r2, r2, #25
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6852      	ldr	r2, [r2, #4]
 8005316:	3a01      	subs	r2, #1
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	491a      	ldr	r1, [pc, #104]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005328:	4b18      	ldr	r3, [pc, #96]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a17      	ldr	r2, [pc, #92]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800532e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fc fb84 	bl	8001a40 <HAL_GetTick>
 8005338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800533a:	e00f      	b.n	800535c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800533c:	f7fc fb80 	bl	8001a40 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d908      	bls.n	800535c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800535a:	e006      	b.n	800536a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0e9      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x16c>
 8005368:	e000      	b.n	800536c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800536a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005372:	4b06      	ldr	r3, [pc, #24]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	4904      	ldr	r1, [pc, #16]	@ (800538c <RCCEx_PLLSAI1_Config+0x1bc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	07ff800c 	.word	0x07ff800c
 8005394:	ff9f800c 	.word	0xff9f800c
 8005398:	f9ff800c 	.word	0xf9ff800c

0800539c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d018      	beq.n	80053e4 <RCCEx_PLLSAI2_Config+0x48>
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d81f      	bhi.n	80053f6 <RCCEx_PLLSAI2_Config+0x5a>
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <RCCEx_PLLSAI2_Config+0x24>
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d009      	beq.n	80053d2 <RCCEx_PLLSAI2_Config+0x36>
 80053be:	e01a      	b.n	80053f6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053c0:	4b4a      	ldr	r3, [pc, #296]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d117      	bne.n	80053fc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d0:	e014      	b.n	80053fc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053d2:	4b46      	ldr	r3, [pc, #280]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d110      	bne.n	8005400 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e2:	e00d      	b.n	8005400 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80053e4:	4b41      	ldr	r3, [pc, #260]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f4:	e006      	b.n	8005404 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      break;
 80053fa:	e004      	b.n	8005406 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005404:	bf00      	nop
  }

  if (status == HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d169      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800540c:	4b37      	ldr	r3, [pc, #220]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a36      	ldr	r2, [pc, #216]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005418:	f7fc fb12 	bl	8001a40 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800541e:	e00f      	b.n	8005440 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005420:	f7fc fb0e 	bl	8001a40 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d908      	bls.n	8005440 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800542e:	4b2f      	ldr	r3, [pc, #188]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800543e:	e006      	b.n	800544e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005440:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e9      	bne.n	8005420 <RCCEx_PLLSAI2_Config+0x84>
 800544c:	e000      	b.n	8005450 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800544e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d144      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d115      	bne.n	8005488 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800545c:	4b23      	ldr	r3, [pc, #140]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 800545e:	695a      	ldr	r2, [r3, #20]
 8005460:	4b23      	ldr	r3, [pc, #140]	@ (80054f0 <RCCEx_PLLSAI2_Config+0x154>)
 8005462:	4013      	ands	r3, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6892      	ldr	r2, [r2, #8]
 8005468:	0211      	lsls	r1, r2, #8
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68d2      	ldr	r2, [r2, #12]
 800546e:	06d2      	lsls	r2, r2, #27
 8005470:	4311      	orrs	r1, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6852      	ldr	r2, [r2, #4]
 8005476:	3a01      	subs	r2, #1
 8005478:	0112      	lsls	r2, r2, #4
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	491a      	ldr	r1, [pc, #104]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 8005484:	4313      	orrs	r3, r2
 8005486:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005488:	4b18      	ldr	r3, [pc, #96]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fc fad4 	bl	8001a40 <HAL_GetTick>
 8005498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800549a:	e00f      	b.n	80054bc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800549c:	f7fc fad0 	bl	8001a40 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d908      	bls.n	80054bc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054aa:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80054ba:	e006      	b.n	80054ca <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0e9      	beq.n	800549c <RCCEx_PLLSAI2_Config+0x100>
 80054c8:	e000      	b.n	80054cc <RCCEx_PLLSAI2_Config+0x130>
          break;
 80054ca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	4904      	ldr	r1, [pc, #16]	@ (80054ec <RCCEx_PLLSAI2_Config+0x150>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
 80054f0:	07ff800c 	.word	0x07ff800c

080054f4 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80054fe:	4b26      	ldr	r3, [pc, #152]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d02d      	beq.n	8005566 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 800550a:	2b03      	cmp	r3, #3
 800550c:	d835      	bhi.n	800557a <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800550e:	2b01      	cmp	r3, #1
 8005510:	d002      	beq.n	8005518 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d01d      	beq.n	8005552 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8005516:	e030      	b.n	800557a <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005518:	4b1f      	ldr	r3, [pc, #124]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d12c      	bne.n	800557e <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005524:	4b1c      	ldr	r3, [pc, #112]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8005530:	4b19      	ldr	r3, [pc, #100]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	e005      	b.n	8005548 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 800553c:	4b16      	ldr	r3, [pc, #88]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	4a14      	ldr	r2, [pc, #80]	@ (800559c <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	607b      	str	r3, [r7, #4]
      break;
 8005550:	e015      	b.n	800557e <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555e:	d110      	bne.n	8005582 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8005560:	4b0f      	ldr	r3, [pc, #60]	@ (80055a0 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8005562:	607b      	str	r3, [r7, #4]
      break;
 8005564:	e00d      	b.n	8005582 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005566:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005572:	d108      	bne.n	8005586 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8005576:	607b      	str	r3, [r7, #4]
      break;
 8005578:	e005      	b.n	8005586 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 800557a:	bf00      	nop
 800557c:	e004      	b.n	8005588 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8005586:	bf00      	nop
  }

  return pllvco;
 8005588:	687b      	ldr	r3, [r7, #4]
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	08008868 	.word	0x08008868
 80055a0:	00f42400 	.word	0x00f42400
 80055a4:	007a1200 	.word	0x007a1200

080055a8 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 80055b2:	4b26      	ldr	r3, [pc, #152]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d02d      	beq.n	800561a <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d835      	bhi.n	800562e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d002      	beq.n	80055cc <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d01d      	beq.n	8005606 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80055ca:	e030      	b.n	800562e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055cc:	4b1f      	ldr	r3, [pc, #124]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d12c      	bne.n	8005632 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055d8:	4b1c      	ldr	r3, [pc, #112]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80055e4:	4b19      	ldr	r3, [pc, #100]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	e005      	b.n	80055fc <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80055f0:	4b16      	ldr	r3, [pc, #88]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80055f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	4a14      	ldr	r2, [pc, #80]	@ (8005650 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	607b      	str	r3, [r7, #4]
      break;
 8005604:	e015      	b.n	8005632 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005606:	4b11      	ldr	r3, [pc, #68]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d110      	bne.n	8005636 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8005614:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8005616:	607b      	str	r3, [r7, #4]
      break;
 8005618:	e00d      	b.n	8005636 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800561a:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005626:	d108      	bne.n	800563a <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 800562a:	607b      	str	r3, [r7, #4]
      break;
 800562c:	e005      	b.n	800563a <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 800562e:	bf00      	nop
 8005630:	e004      	b.n	800563c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800563a:	bf00      	nop
  }

  return pllvco;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	08008868 	.word	0x08008868
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005670:	d10c      	bne.n	800568c <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005672:	4b78      	ldr	r3, [pc, #480]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005678:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800567c:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b60      	cmp	r3, #96	@ 0x60
 8005682:	d110      	bne.n	80056a6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005684:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e00c      	b.n	80056a6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800568c:	4b71      	ldr	r3, [pc, #452]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800568e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005692:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005696:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569e:	d102      	bne.n	80056a6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056a0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80056a4:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 80cd 	bne.w	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b40      	cmp	r3, #64	@ 0x40
 80056b6:	d003      	beq.n	80056c0 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056be:	d13b      	bne.n	8005738 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80056c0:	4b64      	ldr	r3, [pc, #400]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056cc:	f040 80bb 	bne.w	8005846 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80b4 	beq.w	8005846 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056de:	4b5d      	ldr	r3, [pc, #372]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	3301      	adds	r3, #1
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80056f2:	4b58      	ldr	r3, [pc, #352]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056fc:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80056fe:	4b55      	ldr	r3, [pc, #340]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	0edb      	lsrs	r3, r3, #27
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005710:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 800571c:	2311      	movs	r3, #17
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8005722:	2307      	movs	r3, #7
 8005724:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	fb03 f202 	mul.w	r2, r3, r2
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005736:	e086      	b.n	8005846 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b80      	cmp	r3, #128	@ 0x80
 800573c:	d003      	beq.n	8005746 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005744:	d109      	bne.n	800575a <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005746:	4b43      	ldr	r3, [pc, #268]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005752:	d179      	bne.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8005754:	4b40      	ldr	r3, [pc, #256]	@ (8005858 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005756:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005758:	e076      	b.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d135      	bne.n	80057cc <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8005760:	4b3c      	ldr	r3, [pc, #240]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d06d      	beq.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800576c:	f7ff fec2 	bl	80054f4 <RCCEx_PLLSAI1_GetVCOFreq>
 8005770:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005772:	4b38      	ldr	r3, [pc, #224]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	3301      	adds	r3, #1
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005786:	4b33      	ldr	r3, [pc, #204]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005790:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005792:	4b30      	ldr	r3, [pc, #192]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	0edb      	lsrs	r3, r3, #27
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 80057b0:	2311      	movs	r3, #17
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e001      	b.n	80057ba <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 80057b6:	2307      	movs	r3, #7
 80057b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	fb03 f202 	mul.w	r2, r3, r2
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e03d      	b.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d003      	beq.n	80057da <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d8:	d136      	bne.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80057da:	4b1e      	ldr	r3, [pc, #120]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d030      	beq.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80057e6:	f7ff fedf 	bl	80055a8 <RCCEx_PLLSAI2_GetVCOFreq>
 80057ea:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	3301      	adds	r3, #1
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005800:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800580a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	0edb      	lsrs	r3, r3, #27
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800582a:	2311      	movs	r3, #17
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e001      	b.n	8005834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8005830:	2307      	movs	r3, #7
 8005832:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	fb03 f202 	mul.w	r2, r3, r2
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e000      	b.n	8005848 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005846:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8005848:	69fb      	ldr	r3, [r7, #28]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000
 8005858:	00f42400 	.word	0x00f42400

0800585c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1da      	b.n	8005c24 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10e      	bne.n	8005896 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a87      	ldr	r2, [pc, #540]	@ (8005a9c <HAL_SAI_Init+0x240>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d107      	bne.n	8005892 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8005886:	2b01      	cmp	r3, #1
 8005888:	d103      	bne.n	8005892 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1c6      	b.n	8005c24 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb fe58 	bl	8001560 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9c3 	bl	8005c3c <SAI_Disable>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e1b1      	b.n	8005c24 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d00c      	beq.n	80058ea <HAL_SAI_Init+0x8e>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d80d      	bhi.n	80058f0 <HAL_SAI_Init+0x94>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SAI_Init+0x82>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d003      	beq.n	80058e4 <HAL_SAI_Init+0x88>
 80058dc:	e008      	b.n	80058f0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80058e2:	e008      	b.n	80058f6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058e4:	2310      	movs	r3, #16
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80058e8:	e005      	b.n	80058f6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80058ea:	2320      	movs	r3, #32
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80058ee:	e002      	b.n	80058f6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80058f4:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d81d      	bhi.n	800593a <HAL_SAI_Init+0xde>
 80058fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <HAL_SAI_Init+0xa8>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005915 	.word	0x08005915
 8005908:	0800591b 	.word	0x0800591b
 800590c:	08005923 	.word	0x08005923
 8005910:	0800592b 	.word	0x0800592b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
      break;
 8005918:	e012      	b.n	8005940 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800591a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800591e:	61fb      	str	r3, [r7, #28]
      break;
 8005920:	e00e      	b.n	8005940 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005922:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005926:	61fb      	str	r3, [r7, #28]
      break;
 8005928:	e00a      	b.n	8005940 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800592a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800592e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005938:	e002      	b.n	8005940 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
      break;
 800593e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a55      	ldr	r2, [pc, #340]	@ (8005a9c <HAL_SAI_Init+0x240>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_SAI_Init+0xf8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a54      	ldr	r2, [pc, #336]	@ (8005aa0 <HAL_SAI_Init+0x244>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8005954:	4a53      	ldr	r2, [pc, #332]	@ (8005aa4 <HAL_SAI_Init+0x248>)
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e002      	b.n	8005962 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800595c:	4a52      	ldr	r2, [pc, #328]	@ (8005aa8 <HAL_SAI_Init+0x24c>)
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d07e      	beq.n	8005a68 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a4a      	ldr	r2, [pc, #296]	@ (8005a9c <HAL_SAI_Init+0x240>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_SAI_Init+0x126>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a48      	ldr	r2, [pc, #288]	@ (8005aa0 <HAL_SAI_Init+0x244>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d104      	bne.n	800598c <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005982:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005986:	f7fe fc81 	bl	800428c <HAL_RCCEx_GetPeriphCLKFreq>
 800598a:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a46      	ldr	r2, [pc, #280]	@ (8005aac <HAL_SAI_Init+0x250>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_SAI_Init+0x144>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a45      	ldr	r2, [pc, #276]	@ (8005ab0 <HAL_SAI_Init+0x254>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d104      	bne.n	80059aa <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80059a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80059a4:	f7fe fc72 	bl	800428c <HAL_RCCEx_GetPeriphCLKFreq>
 80059a8:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059b2:	d120      	bne.n	80059f6 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d102      	bne.n	80059c2 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80059bc:	2340      	movs	r3, #64	@ 0x40
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	e00a      	b.n	80059d8 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d103      	bne.n	80059d2 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80059ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e002      	b.n	80059d8 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4619      	mov	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e017      	b.n	8005a26 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059fe:	d101      	bne.n	8005a04 <HAL_SAI_Init+0x1a8>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e000      	b.n	8005a06 <HAL_SAI_Init+0x1aa>
 8005a04:	2301      	movs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4619      	mov	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a24:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <HAL_SAI_Init+0x258>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	08da      	lsrs	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab4 <HAL_SAI_Init+0x258>)
 8005a38:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3c:	08da      	lsrs	r2, r3, #3
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	1aca      	subs	r2, r1, r3
 8005a48:	2a08      	cmp	r2, #8
 8005a4a:	d904      	bls.n	8005a56 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d104      	bne.n	8005a68 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	085a      	lsrs	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_SAI_Init+0x21c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d109      	bne.n	8005a8c <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_SAI_Init+0x228>
 8005a80:	2300      	movs	r3, #0
 8005a82:	e001      	b.n	8005a88 <HAL_SAI_Init+0x22c>
 8005a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e017      	b.n	8005abc <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d111      	bne.n	8005ab8 <HAL_SAI_Init+0x25c>
 8005a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a98:	e00f      	b.n	8005aba <HAL_SAI_Init+0x25e>
 8005a9a:	bf00      	nop
 8005a9c:	40015404 	.word	0x40015404
 8005aa0:	40015424 	.word	0x40015424
 8005aa4:	40015400 	.word	0x40015400
 8005aa8:	40015800 	.word	0x40015800
 8005aac:	40015804 	.word	0x40015804
 8005ab0:	40015824 	.word	0x40015824
 8005ab4:	cccccccd 	.word	0xcccccccd
 8005ab8:	2300      	movs	r3, #0
 8005aba:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b59      	ldr	r3, [pc, #356]	@ (8005c2c <HAL_SAI_Init+0x3d0>)
 8005ac8:	400b      	ands	r3, r1
 8005aca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ada:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ae0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8005af4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005b00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	051b      	lsls	r3, r3, #20
 8005b08:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005b0e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005b2c:	f023 030f 	bic.w	r3, r3, #15
 8005b30:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6899      	ldr	r1, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <HAL_SAI_Init+0x3d4>)
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005b70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8005b76:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8005b7c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	3b01      	subs	r3, #1
 8005b84:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005b86:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68d9      	ldr	r1, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005bb8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <HAL_SAI_Init+0x3d8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d119      	bne.n	8005c0a <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005bd6:	4b18      	ldr	r3, [pc, #96]	@ (8005c38 <HAL_SAI_Init+0x3dc>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <HAL_SAI_Init+0x3dc>)
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10e      	bne.n	8005c0a <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005bf8:	490f      	ldr	r1, [pc, #60]	@ (8005c38 <HAL_SAI_Init+0x3dc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005c38 <HAL_SAI_Init+0x3dc>)
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	4a0d      	ldr	r2, [pc, #52]	@ (8005c38 <HAL_SAI_Init+0x3dc>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	@ 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	f005c010 	.word	0xf005c010
 8005c30:	fff88000 	.word	0xfff88000
 8005c34:	40015404 	.word	0x40015404
 8005c38:	40015400 	.word	0x40015400

08005c3c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <SAI_Disable+0x6c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <SAI_Disable+0x70>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0b1b      	lsrs	r3, r3, #12
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005c66:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	72fb      	strb	r3, [r7, #11]
      break;
 8005c82:	e009      	b.n	8005c98 <SAI_Disable+0x5c>
    }
    count--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e7      	bne.n	8005c68 <SAI_Disable+0x2c>

  return status;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000000 	.word	0x20000000
 8005cac:	95cbec1b 	.word	0x95cbec1b

08005cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e095      	b.n	8005dee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cd2:	d009      	beq.n	8005ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	61da      	str	r2, [r3, #28]
 8005cda:	e005      	b.n	8005ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb fb54 	bl	80013b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d28:	d902      	bls.n	8005d30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e002      	b.n	8005d36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d3e:	d007      	beq.n	8005d50 <HAL_SPI_Init+0xa0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	ea42 0103 	orr.w	r1, r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	f003 0204 	and.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005dcc:	ea42 0103 	orr.w	r1, r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	099b      	lsrs	r3, r3, #6
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10f      	bne.n	8005e3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
    return;
 8005e3a:	e0d7      	b.n	8005fec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_SPI_IRQHandler+0x66>
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	09db      	lsrs	r3, r3, #7
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
    return;
 8005e5c:	e0c6      	b.n	8005fec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10c      	bne.n	8005e84 <HAL_SPI_IRQHandler+0x8c>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	099b      	lsrs	r3, r3, #6
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80b4 	beq.w	8005fec <HAL_SPI_IRQHandler+0x1f4>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80ad 	beq.w	8005fec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	099b      	lsrs	r3, r3, #6
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d023      	beq.n	8005ee6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d011      	beq.n	8005ece <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eae:	f043 0204 	orr.w	r2, r3, #4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	e00b      	b.n	8005ee6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	693b      	ldr	r3, [r7, #16]
        return;
 8005ee4:	e082      	b.n	8005fec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef6:	f043 0201 	orr.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00c      	beq.n	8005f42 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2c:	f043 0208 	orr.w	r2, r3, #8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f34:	2300      	movs	r3, #0
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d04f      	beq.n	8005fea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f58:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_SPI_IRQHandler+0x17e>
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d034      	beq.n	8005fe0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0203 	bic.w	r2, r2, #3
 8005f84:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d011      	beq.n	8005fb2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f92:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <HAL_SPI_IRQHandler+0x1fc>)
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fc f9e4 	bl	8002368 <HAL_DMA_Abort_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005faa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff4 <HAL_SPI_IRQHandler+0x1fc>)
 8005fc0:	641a      	str	r2, [r3, #64]	@ 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fc f9ce 	bl	8002368 <HAL_DMA_Abort_IT>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005fde:	e003      	b.n	8005fe8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f809 	bl	8005ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fe6:	e000      	b.n	8005fea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005fe8:	bf00      	nop
    return;
 8005fea:	bf00      	nop
  }
}
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	0800600d 	.word	0x0800600d

08005ff8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ffe5 	bl	8005ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e049      	b.n	80060dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fb f9f5 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 fa9d 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e04f      	b.n	800619c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a23      	ldr	r2, [pc, #140]	@ (80061a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01d      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006126:	d018      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ac <HAL_TIM_Base_Start_IT+0xc8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1e      	ldr	r2, [pc, #120]	@ (80061b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIM_Base_Start_IT+0x76>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d115      	bne.n	8006186 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	4b17      	ldr	r3, [pc, #92]	@ (80061c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006162:	4013      	ands	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b06      	cmp	r3, #6
 800616a:	d015      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0xb4>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006172:	d011      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	e008      	b.n	8006198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e000      	b.n	800619a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	00010007 	.word	0x00010007

080061c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d020      	beq.n	8006228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01b      	beq.n	8006228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0202 	mvn.w	r2, #2
 80061f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9b2 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9a4 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9b5 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d020      	beq.n	8006274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0204 	mvn.w	r2, #4
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f98c 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f97e 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f98f 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d020      	beq.n	80062c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0208 	mvn.w	r2, #8
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f966 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f958 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f969 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d020      	beq.n	800630c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0210 	mvn.w	r2, #16
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2208      	movs	r2, #8
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f940 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f932 	bl	8006564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f943 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0201 	mvn.w	r2, #1
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fa fe3e 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 faff 	bl	800695c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 faf7 	bl	8006970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8fd 	bl	80065a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0220 	mvn.w	r2, #32
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fabf 	bl	8006948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_ConfigClockSource+0x1c>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0b6      	b.n	800655c <HAL_TIM_ConfigClockSource+0x18a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2202      	movs	r2, #2
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800640c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006410:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006418:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642a:	d03e      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xd8>
 800642c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006430:	f200 8087 	bhi.w	8006542 <HAL_TIM_ConfigClockSource+0x170>
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006438:	f000 8086 	beq.w	8006548 <HAL_TIM_ConfigClockSource+0x176>
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006440:	d87f      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 8006442:	2b70      	cmp	r3, #112	@ 0x70
 8006444:	d01a      	beq.n	800647c <HAL_TIM_ConfigClockSource+0xaa>
 8006446:	2b70      	cmp	r3, #112	@ 0x70
 8006448:	d87b      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 800644a:	2b60      	cmp	r3, #96	@ 0x60
 800644c:	d050      	beq.n	80064f0 <HAL_TIM_ConfigClockSource+0x11e>
 800644e:	2b60      	cmp	r3, #96	@ 0x60
 8006450:	d877      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 8006452:	2b50      	cmp	r3, #80	@ 0x50
 8006454:	d03c      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0xfe>
 8006456:	2b50      	cmp	r3, #80	@ 0x50
 8006458:	d873      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 800645a:	2b40      	cmp	r3, #64	@ 0x40
 800645c:	d058      	beq.n	8006510 <HAL_TIM_ConfigClockSource+0x13e>
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d86f      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 8006462:	2b30      	cmp	r3, #48	@ 0x30
 8006464:	d064      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0x15e>
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d86b      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d060      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0x15e>
 800646e:	2b20      	cmp	r3, #32
 8006470:	d867      	bhi.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d05c      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0x15e>
 8006476:	2b10      	cmp	r3, #16
 8006478:	d05a      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0x15e>
 800647a:	e062      	b.n	8006542 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	f000 f9b4 	bl	80067f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800649e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]
      break;
 80064a8:	e04f      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	f000 f99d 	bl	80067f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064cc:	609a      	str	r2, [r3, #8]
      break;
 80064ce:	e03c      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064dc:	461a      	mov	r2, r3
 80064de:	f000 f90f 	bl	8006700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2150      	movs	r1, #80	@ 0x50
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f968 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 80064ee:	e02c      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fc:	461a      	mov	r2, r3
 80064fe:	f000 f92e 	bl	800675e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2160      	movs	r1, #96	@ 0x60
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f958 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 800650e:	e01c      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651c:	461a      	mov	r2, r3
 800651e:	f000 f8ef 	bl	8006700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2140      	movs	r1, #64	@ 0x40
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f948 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 800652e:	e00c      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f000 f93f 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8006540:	e003      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
      break;
 8006546:	e000      	b.n	800654a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006548:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a46      	ldr	r2, [pc, #280]	@ (80066e0 <TIM_Base_SetConfig+0x12c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a43      	ldr	r2, [pc, #268]	@ (80066e4 <TIM_Base_SetConfig+0x130>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a42      	ldr	r2, [pc, #264]	@ (80066e8 <TIM_Base_SetConfig+0x134>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a41      	ldr	r2, [pc, #260]	@ (80066ec <TIM_Base_SetConfig+0x138>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a40      	ldr	r2, [pc, #256]	@ (80066f0 <TIM_Base_SetConfig+0x13c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a35      	ldr	r2, [pc, #212]	@ (80066e0 <TIM_Base_SetConfig+0x12c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006614:	d01b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a32      	ldr	r2, [pc, #200]	@ (80066e4 <TIM_Base_SetConfig+0x130>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d017      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a31      	ldr	r2, [pc, #196]	@ (80066e8 <TIM_Base_SetConfig+0x134>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a30      	ldr	r2, [pc, #192]	@ (80066ec <TIM_Base_SetConfig+0x138>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	@ (80066f0 <TIM_Base_SetConfig+0x13c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2e      	ldr	r2, [pc, #184]	@ (80066f4 <TIM_Base_SetConfig+0x140>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2d      	ldr	r2, [pc, #180]	@ (80066f8 <TIM_Base_SetConfig+0x144>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2c      	ldr	r2, [pc, #176]	@ (80066fc <TIM_Base_SetConfig+0x148>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d108      	bne.n	8006660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a16      	ldr	r2, [pc, #88]	@ (80066e0 <TIM_Base_SetConfig+0x12c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a18      	ldr	r2, [pc, #96]	@ (80066f0 <TIM_Base_SetConfig+0x13c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a17      	ldr	r2, [pc, #92]	@ (80066f4 <TIM_Base_SetConfig+0x140>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <TIM_Base_SetConfig+0x144>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a15      	ldr	r2, [pc, #84]	@ (80066fc <TIM_Base_SetConfig+0x148>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d105      	bne.n	80066d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]
  }
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800672a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 030a 	bic.w	r3, r3, #10
 800673c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675e:	b480      	push	{r7}
 8006760:	b087      	sub	sp, #28
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0210 	bic.w	r2, r3, #16
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800679a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f043 0307 	orr.w	r3, r3, #7
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	021a      	lsls	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	431a      	orrs	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800684c:	2302      	movs	r3, #2
 800684e:	e068      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2e      	ldr	r2, [pc, #184]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2d      	ldr	r2, [pc, #180]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800688a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01d      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	d018      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a13      	ldr	r2, [pc, #76]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a14      	ldr	r2, [pc, #80]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40014000 	.word	0x40014000

08006948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e042      	b.n	8006a1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fa fd73 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2224      	movs	r2, #36	@ 0x24
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fefa 	bl	80077c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fbf7 	bl	80071c8 <UART_SetConfig>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e01b      	b.n	8006a1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 ff79 	bl	800790c <UART_CheckIdleState>
 8006a1a:	4603      	mov	r3, r0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	@ 0x28
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d17b      	bne.n	8006b36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_UART_Transmit+0x26>
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e074      	b.n	8006b38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2221      	movs	r2, #33	@ 0x21
 8006a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a5e:	f7fa ffef 	bl	8001a40 <HAL_GetTick>
 8006a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7c:	d108      	bne.n	8006a90 <HAL_UART_Transmit+0x6c>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e003      	b.n	8006a98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a98:	e030      	b.n	8006afc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2180      	movs	r1, #128	@ 0x80
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 ffdb 	bl	8007a60 <UART_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e03d      	b.n	8006b38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1c8      	bne.n	8006a9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2140      	movs	r1, #64	@ 0x40
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 ffa4 	bl	8007a60 <UART_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e006      	b.n	8006b38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
  }
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b0ba      	sub	sp, #232	@ 0xe8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b6e:	4013      	ands	r3, r2
 8006b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d015      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 82e3 	beq.w	8007170 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
      }
      return;
 8006bb2:	e2dd      	b.n	8007170 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8123 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8006df8 <HAL_UART_IRQHandler+0x2b8>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006bce:	4b8b      	ldr	r3, [pc, #556]	@ (8006dfc <HAL_UART_IRQHandler+0x2bc>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8116 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d011      	beq.n	8006c08 <HAL_UART_IRQHandler+0xc8>
 8006be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d011      	beq.n	8006c38 <HAL_UART_IRQHandler+0xf8>
 8006c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d011      	beq.n	8006c68 <HAL_UART_IRQHandler+0x128>
 8006c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2204      	movs	r2, #4
 8006c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5e:	f043 0202 	orr.w	r2, r3, #2
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d017      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c84:	4b5c      	ldr	r3, [pc, #368]	@ (8006df8 <HAL_UART_IRQHandler+0x2b8>)
 8006c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9a:	f043 0208 	orr.w	r2, r3, #8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d012      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x196>
 8006cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ccc:	f043 0220 	orr.w	r2, r3, #32
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8249 	beq.w	8007174 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d013      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2a:	2b40      	cmp	r3, #64	@ 0x40
 8006d2c:	d005      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d054      	beq.n	8006de4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fefd 	bl	8007b3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d146      	bne.n	8006ddc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1d9      	bne.n	8006d4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d017      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006daa:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <HAL_UART_IRQHandler+0x2c0>)
 8006dac:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fb fad7 	bl	8002368 <HAL_DMA_Abort_IT>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d019      	beq.n	8006df4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd2:	e00f      	b.n	8006df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9e1 	bl	800719c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	e00b      	b.n	8006df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9dd 	bl	800719c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de2:	e007      	b.n	8006df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f9d9 	bl	800719c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006df2:	e1bf      	b.n	8007174 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	bf00      	nop
    return;
 8006df6:	e1bd      	b.n	8007174 <HAL_UART_IRQHandler+0x634>
 8006df8:	10000001 	.word	0x10000001
 8006dfc:	04000120 	.word	0x04000120
 8006e00:	08007c07 	.word	0x08007c07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f040 8153 	bne.w	80070b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 814c 	beq.w	80070b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8145 	beq.w	80070b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	f040 80bb 	bne.w	8006fb8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 818f 	beq.w	8007178 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e64:	429a      	cmp	r2, r3
 8006e66:	f080 8187 	bcs.w	8007178 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 8087 	bne.w	8006f96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1da      	bne.n	8006e88 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e1      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e3      	bne.n	8006f0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f64:	f023 0310 	bic.w	r3, r3, #16
 8006f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e4      	bne.n	8006f54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fb f98d 	bl	80022b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8fd 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fb6:	e0df      	b.n	8007178 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80d1 	beq.w	800717c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80cc 	beq.w	800717c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007006:	647b      	str	r3, [r7, #68]	@ 0x44
 8007008:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800700c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e4      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	623b      	str	r3, [r7, #32]
   return(result);
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007042:	633a      	str	r2, [r7, #48]	@ 0x30
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e1      	bne.n	800701a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	60fb      	str	r3, [r7, #12]
   return(result);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0310 	bic.w	r3, r3, #16
 800707e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	69b9      	ldr	r1, [r7, #24]
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	617b      	str	r3, [r7, #20]
   return(result);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e4      	bne.n	800706a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f87f 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070b2:	e063      	b.n	800717c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00e      	beq.n	80070de <HAL_UART_IRQHandler+0x59e>
 80070c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fdd6 	bl	8007c88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070dc:	e051      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d014      	beq.n	8007114 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007106:	2b00      	cmp	r3, #0
 8007108:	d03a      	beq.n	8007180 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    }
    return;
 8007112:	e035      	b.n	8007180 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <HAL_UART_IRQHandler+0x5f4>
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fd80 	bl	8007c32 <UART_EndTransmit_IT>
    return;
 8007132:	e026      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HAL_UART_IRQHandler+0x614>
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007144:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fdaf 	bl	8007cb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007152:	e016      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <HAL_UART_IRQHandler+0x642>
 8007160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007164:	2b00      	cmp	r3, #0
 8007166:	da0c      	bge.n	8007182 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fd97 	bl	8007c9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800716e:	e008      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
      return;
 8007170:	bf00      	nop
 8007172:	e006      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
    return;
 8007174:	bf00      	nop
 8007176:	e004      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
      return;
 8007178:	bf00      	nop
 800717a:	e002      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
      return;
 800717c:	bf00      	nop
 800717e:	e000      	b.n	8007182 <HAL_UART_IRQHandler+0x642>
    return;
 8007180:	bf00      	nop
  }
}
 8007182:	37e8      	adds	r7, #232	@ 0xe8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071cc:	b08c      	sub	sp, #48	@ 0x30
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4baa      	ldr	r3, [pc, #680]	@ (80074a0 <UART_SetConfig+0x2d8>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	430b      	orrs	r3, r1
 8007202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a9f      	ldr	r2, [pc, #636]	@ (80074a4 <UART_SetConfig+0x2dc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007230:	4313      	orrs	r3, r2
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800723e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007248:	430b      	orrs	r3, r1
 800724a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	f023 010f 	bic.w	r1, r3, #15
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a90      	ldr	r2, [pc, #576]	@ (80074a8 <UART_SetConfig+0x2e0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d125      	bne.n	80072b8 <UART_SetConfig+0xf0>
 800726c:	4b8f      	ldr	r3, [pc, #572]	@ (80074ac <UART_SetConfig+0x2e4>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d81a      	bhi.n	80072b0 <UART_SetConfig+0xe8>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <UART_SetConfig+0xb8>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	08007291 	.word	0x08007291
 8007284:	080072a1 	.word	0x080072a1
 8007288:	08007299 	.word	0x08007299
 800728c:	080072a9 	.word	0x080072a9
 8007290:	2301      	movs	r3, #1
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007296:	e116      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007298:	2302      	movs	r3, #2
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729e:	e112      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80072a0:	2304      	movs	r3, #4
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a6:	e10e      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80072a8:	2308      	movs	r3, #8
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ae:	e10a      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80072b0:	2310      	movs	r3, #16
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b6:	e106      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a7c      	ldr	r2, [pc, #496]	@ (80074b0 <UART_SetConfig+0x2e8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d138      	bne.n	8007334 <UART_SetConfig+0x16c>
 80072c2:	4b7a      	ldr	r3, [pc, #488]	@ (80074ac <UART_SetConfig+0x2e4>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c8:	f003 030c 	and.w	r3, r3, #12
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d82d      	bhi.n	800732c <UART_SetConfig+0x164>
 80072d0:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <UART_SetConfig+0x110>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	0800730d 	.word	0x0800730d
 80072dc:	0800732d 	.word	0x0800732d
 80072e0:	0800732d 	.word	0x0800732d
 80072e4:	0800732d 	.word	0x0800732d
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	0800732d 	.word	0x0800732d
 80072f0:	0800732d 	.word	0x0800732d
 80072f4:	0800732d 	.word	0x0800732d
 80072f8:	08007315 	.word	0x08007315
 80072fc:	0800732d 	.word	0x0800732d
 8007300:	0800732d 	.word	0x0800732d
 8007304:	0800732d 	.word	0x0800732d
 8007308:	08007325 	.word	0x08007325
 800730c:	2300      	movs	r3, #0
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e0d8      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007314:	2302      	movs	r3, #2
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e0d4      	b.n	80074c6 <UART_SetConfig+0x2fe>
 800731c:	2304      	movs	r3, #4
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e0d0      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007324:	2308      	movs	r3, #8
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732a:	e0cc      	b.n	80074c6 <UART_SetConfig+0x2fe>
 800732c:	2310      	movs	r3, #16
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007332:	e0c8      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a5e      	ldr	r2, [pc, #376]	@ (80074b4 <UART_SetConfig+0x2ec>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d125      	bne.n	800738a <UART_SetConfig+0x1c2>
 800733e:	4b5b      	ldr	r3, [pc, #364]	@ (80074ac <UART_SetConfig+0x2e4>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007348:	2b30      	cmp	r3, #48	@ 0x30
 800734a:	d016      	beq.n	800737a <UART_SetConfig+0x1b2>
 800734c:	2b30      	cmp	r3, #48	@ 0x30
 800734e:	d818      	bhi.n	8007382 <UART_SetConfig+0x1ba>
 8007350:	2b20      	cmp	r3, #32
 8007352:	d00a      	beq.n	800736a <UART_SetConfig+0x1a2>
 8007354:	2b20      	cmp	r3, #32
 8007356:	d814      	bhi.n	8007382 <UART_SetConfig+0x1ba>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <UART_SetConfig+0x19a>
 800735c:	2b10      	cmp	r3, #16
 800735e:	d008      	beq.n	8007372 <UART_SetConfig+0x1aa>
 8007360:	e00f      	b.n	8007382 <UART_SetConfig+0x1ba>
 8007362:	2300      	movs	r3, #0
 8007364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007368:	e0ad      	b.n	80074c6 <UART_SetConfig+0x2fe>
 800736a:	2302      	movs	r3, #2
 800736c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007370:	e0a9      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007372:	2304      	movs	r3, #4
 8007374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007378:	e0a5      	b.n	80074c6 <UART_SetConfig+0x2fe>
 800737a:	2308      	movs	r3, #8
 800737c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007380:	e0a1      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007382:	2310      	movs	r3, #16
 8007384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007388:	e09d      	b.n	80074c6 <UART_SetConfig+0x2fe>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a4a      	ldr	r2, [pc, #296]	@ (80074b8 <UART_SetConfig+0x2f0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d125      	bne.n	80073e0 <UART_SetConfig+0x218>
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <UART_SetConfig+0x2e4>)
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800739e:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a0:	d016      	beq.n	80073d0 <UART_SetConfig+0x208>
 80073a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a4:	d818      	bhi.n	80073d8 <UART_SetConfig+0x210>
 80073a6:	2b80      	cmp	r3, #128	@ 0x80
 80073a8:	d00a      	beq.n	80073c0 <UART_SetConfig+0x1f8>
 80073aa:	2b80      	cmp	r3, #128	@ 0x80
 80073ac:	d814      	bhi.n	80073d8 <UART_SetConfig+0x210>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <UART_SetConfig+0x1f0>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d008      	beq.n	80073c8 <UART_SetConfig+0x200>
 80073b6:	e00f      	b.n	80073d8 <UART_SetConfig+0x210>
 80073b8:	2300      	movs	r3, #0
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073be:	e082      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80073c0:	2302      	movs	r3, #2
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c6:	e07e      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80073c8:	2304      	movs	r3, #4
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ce:	e07a      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80073d0:	2308      	movs	r3, #8
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d6:	e076      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80073d8:	2310      	movs	r3, #16
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073de:	e072      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a35      	ldr	r2, [pc, #212]	@ (80074bc <UART_SetConfig+0x2f4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d12a      	bne.n	8007440 <UART_SetConfig+0x278>
 80073ea:	4b30      	ldr	r3, [pc, #192]	@ (80074ac <UART_SetConfig+0x2e4>)
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f8:	d01a      	beq.n	8007430 <UART_SetConfig+0x268>
 80073fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073fe:	d81b      	bhi.n	8007438 <UART_SetConfig+0x270>
 8007400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007404:	d00c      	beq.n	8007420 <UART_SetConfig+0x258>
 8007406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800740a:	d815      	bhi.n	8007438 <UART_SetConfig+0x270>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <UART_SetConfig+0x250>
 8007410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007414:	d008      	beq.n	8007428 <UART_SetConfig+0x260>
 8007416:	e00f      	b.n	8007438 <UART_SetConfig+0x270>
 8007418:	2300      	movs	r3, #0
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e052      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007420:	2302      	movs	r3, #2
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e04e      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007428:	2304      	movs	r3, #4
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742e:	e04a      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007430:	2308      	movs	r3, #8
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007436:	e046      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007438:	2310      	movs	r3, #16
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743e:	e042      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a17      	ldr	r2, [pc, #92]	@ (80074a4 <UART_SetConfig+0x2dc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d13a      	bne.n	80074c0 <UART_SetConfig+0x2f8>
 800744a:	4b18      	ldr	r3, [pc, #96]	@ (80074ac <UART_SetConfig+0x2e4>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007450:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007458:	d01a      	beq.n	8007490 <UART_SetConfig+0x2c8>
 800745a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800745e:	d81b      	bhi.n	8007498 <UART_SetConfig+0x2d0>
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007464:	d00c      	beq.n	8007480 <UART_SetConfig+0x2b8>
 8007466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800746a:	d815      	bhi.n	8007498 <UART_SetConfig+0x2d0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <UART_SetConfig+0x2b0>
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007474:	d008      	beq.n	8007488 <UART_SetConfig+0x2c0>
 8007476:	e00f      	b.n	8007498 <UART_SetConfig+0x2d0>
 8007478:	2300      	movs	r3, #0
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747e:	e022      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007480:	2302      	movs	r3, #2
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007486:	e01e      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007488:	2304      	movs	r3, #4
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748e:	e01a      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007490:	2308      	movs	r3, #8
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007496:	e016      	b.n	80074c6 <UART_SetConfig+0x2fe>
 8007498:	2310      	movs	r3, #16
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749e:	e012      	b.n	80074c6 <UART_SetConfig+0x2fe>
 80074a0:	cfff69f3 	.word	0xcfff69f3
 80074a4:	40008000 	.word	0x40008000
 80074a8:	40013800 	.word	0x40013800
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40004400 	.word	0x40004400
 80074b4:	40004800 	.word	0x40004800
 80074b8:	40004c00 	.word	0x40004c00
 80074bc:	40005000 	.word	0x40005000
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4ab0      	ldr	r2, [pc, #704]	@ (800778c <UART_SetConfig+0x5c4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	f040 809b 	bne.w	8007608 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d827      	bhi.n	800752a <UART_SetConfig+0x362>
 80074da:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0x318>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fc fa44 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8007508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800750a:	e014      	b.n	8007536 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fc fa54 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8007510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007512:	e010      	b.n	8007536 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b9e      	ldr	r3, [pc, #632]	@ (8007790 <UART_SetConfig+0x5c8>)
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007518:	e00d      	b.n	8007536 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fc f987 	bl	800382c <HAL_RCC_GetSysClockFreq>
 800751e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007520:	e009      	b.n	8007536 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007528:	e005      	b.n	8007536 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8130 	beq.w	800779e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	4a94      	ldr	r2, [pc, #592]	@ (8007794 <UART_SetConfig+0x5cc>)
 8007544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007548:	461a      	mov	r2, r3
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007550:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	429a      	cmp	r2, r3
 8007560:	d305      	bcc.n	800756e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	429a      	cmp	r2, r3
 800756c:	d903      	bls.n	8007576 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007574:	e113      	b.n	800779e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	2200      	movs	r2, #0
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	60fa      	str	r2, [r7, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	4a84      	ldr	r2, [pc, #528]	@ (8007794 <UART_SetConfig+0x5cc>)
 8007584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007588:	b29b      	uxth	r3, r3
 800758a:	2200      	movs	r2, #0
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007598:	f7f8 fe54 	bl	8000244 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4610      	mov	r0, r2
 80075a2:	4619      	mov	r1, r3
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	020b      	lsls	r3, r1, #8
 80075ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075b2:	0202      	lsls	r2, r0, #8
 80075b4:	6979      	ldr	r1, [r7, #20]
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	0849      	lsrs	r1, r1, #1
 80075ba:	2000      	movs	r0, #0
 80075bc:	460c      	mov	r4, r1
 80075be:	4605      	mov	r5, r0
 80075c0:	eb12 0804 	adds.w	r8, r2, r4
 80075c4:	eb43 0905 	adc.w	r9, r3, r5
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	469a      	mov	sl, r3
 80075d0:	4693      	mov	fp, r2
 80075d2:	4652      	mov	r2, sl
 80075d4:	465b      	mov	r3, fp
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	f7f8 fe33 	bl	8000244 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4613      	mov	r3, r2
 80075e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ec:	d308      	bcc.n	8007600 <UART_SetConfig+0x438>
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f4:	d204      	bcs.n	8007600 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	e0ce      	b.n	800779e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007606:	e0ca      	b.n	800779e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007610:	d166      	bne.n	80076e0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007612:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007616:	2b08      	cmp	r3, #8
 8007618:	d827      	bhi.n	800766a <UART_SetConfig+0x4a2>
 800761a:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <UART_SetConfig+0x458>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007645 	.word	0x08007645
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007655 	.word	0x08007655
 800762c:	0800766b 	.word	0x0800766b
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800766b 	.word	0x0800766b
 8007638:	0800766b 	.word	0x0800766b
 800763c:	0800766b 	.word	0x0800766b
 8007640:	08007663 	.word	0x08007663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007644:	f7fc f9a4 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8007648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800764a:	e014      	b.n	8007676 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fc f9b4 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8007650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007652:	e010      	b.n	8007676 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007654:	4b4e      	ldr	r3, [pc, #312]	@ (8007790 <UART_SetConfig+0x5c8>)
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007658:	e00d      	b.n	8007676 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765a:	f7fc f8e7 	bl	800382c <HAL_RCC_GetSysClockFreq>
 800765e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007660:	e009      	b.n	8007676 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007668:	e005      	b.n	8007676 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8090 	beq.w	800779e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	4a44      	ldr	r2, [pc, #272]	@ (8007794 <UART_SetConfig+0x5cc>)
 8007684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007688:	461a      	mov	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007690:	005a      	lsls	r2, r3, #1
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	441a      	add	r2, r3
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2b0f      	cmp	r3, #15
 80076a8:	d916      	bls.n	80076d8 <UART_SetConfig+0x510>
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b0:	d212      	bcs.n	80076d8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f023 030f 	bic.w	r3, r3, #15
 80076ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	8bfb      	ldrh	r3, [r7, #30]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	8bfa      	ldrh	r2, [r7, #30]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e062      	b.n	800779e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076de:	e05e      	b.n	800779e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d828      	bhi.n	800773a <UART_SetConfig+0x572>
 80076e8:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <UART_SetConfig+0x528>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007715 	.word	0x08007715
 80076f4:	0800771d 	.word	0x0800771d
 80076f8:	08007725 	.word	0x08007725
 80076fc:	0800773b 	.word	0x0800773b
 8007700:	0800772b 	.word	0x0800772b
 8007704:	0800773b 	.word	0x0800773b
 8007708:	0800773b 	.word	0x0800773b
 800770c:	0800773b 	.word	0x0800773b
 8007710:	08007733 	.word	0x08007733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fc f93c 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8007718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800771a:	e014      	b.n	8007746 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800771c:	f7fc f94c 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8007720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007722:	e010      	b.n	8007746 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007724:	4b1a      	ldr	r3, [pc, #104]	@ (8007790 <UART_SetConfig+0x5c8>)
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007728:	e00d      	b.n	8007746 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800772a:	f7fc f87f 	bl	800382c <HAL_RCC_GetSysClockFreq>
 800772e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007730:	e009      	b.n	8007746 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007738:	e005      	b.n	8007746 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007744:	bf00      	nop
    }

    if (pclk != 0U)
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d028      	beq.n	800779e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	4a10      	ldr	r2, [pc, #64]	@ (8007794 <UART_SetConfig+0x5cc>)
 8007752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007756:	461a      	mov	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	fbb3 f2f2 	udiv	r2, r3, r2
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	441a      	add	r2, r3
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	fbb2 f3f3 	udiv	r3, r2, r3
 800776e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	2b0f      	cmp	r3, #15
 8007774:	d910      	bls.n	8007798 <UART_SetConfig+0x5d0>
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777c:	d20c      	bcs.n	8007798 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	b29a      	uxth	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60da      	str	r2, [r3, #12]
 8007788:	e009      	b.n	800779e <UART_SetConfig+0x5d6>
 800778a:	bf00      	nop
 800778c:	40008000 	.word	0x40008000
 8007790:	00f42400 	.word	0x00f42400
 8007794:	080088a8 	.word	0x080088a8
      }
      else
      {
        ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2200      	movs	r2, #0
 80077b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3730      	adds	r7, #48	@ 0x30
 80077c2:	46bd      	mov	sp, r7
 80077c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00a      	beq.n	80077f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01a      	beq.n	80078de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c6:	d10a      	bne.n	80078de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b098      	sub	sp, #96	@ 0x60
 8007910:	af02      	add	r7, sp, #8
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800791c:	f7fa f890 	bl	8001a40 <HAL_GetTick>
 8007920:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b08      	cmp	r3, #8
 800792e:	d12f      	bne.n	8007990 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007938:	2200      	movs	r2, #0
 800793a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f88e 	bl	8007a60 <UART_WaitOnFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d022      	beq.n	8007990 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800795e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007968:	647b      	str	r3, [r7, #68]	@ 0x44
 800796a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800796e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e6      	bne.n	800794a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e063      	b.n	8007a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b04      	cmp	r3, #4
 800799c:	d149      	bne.n	8007a32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a6:	2200      	movs	r2, #0
 80079a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f857 	bl	8007a60 <UART_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d03c      	beq.n	8007a32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	623b      	str	r3, [r7, #32]
   return(result);
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a0a:	61fa      	str	r2, [r7, #28]
 8007a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	69b9      	ldr	r1, [r7, #24]
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	617b      	str	r3, [r7, #20]
   return(result);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e012      	b.n	8007a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3758      	adds	r7, #88	@ 0x58
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a70:	e04f      	b.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d04b      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7a:	f7f9 ffe1 	bl	8001a40 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d302      	bcc.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e04e      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d037      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b80      	cmp	r3, #128	@ 0x80
 8007aa6:	d034      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d031      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d110      	bne.n	8007ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f838 	bl	8007b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2208      	movs	r2, #8
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e029      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aec:	d111      	bne.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f81e 	bl	8007b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e00f      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	bf0c      	ite	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	2300      	movne	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d0a0      	beq.n	8007a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b095      	sub	sp, #84	@ 0x54
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e6      	bne.n	8007b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e3      	bne.n	8007b74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d118      	bne.n	8007be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f023 0310 	bic.w	r3, r3, #16
 8007bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	613b      	str	r3, [r7, #16]
   return(result);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e6      	bne.n	8007bb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bfa:	bf00      	nop
 8007bfc:	3754      	adds	r7, #84	@ 0x54
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fab9 	bl	800719c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b088      	sub	sp, #32
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fa84 	bl	8007188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c80:	bf00      	nop
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_UARTEx_DisableFifoMode+0x16>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e027      	b.n	8007d2a <HAL_UARTEx_DisableFifoMode+0x66>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2224      	movs	r2, #36	@ 0x24
 8007ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0201 	bic.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e02d      	b.n	8007daa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2224      	movs	r2, #36	@ 0x24
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f850 	bl	8007e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e02d      	b.n	8007e26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2224      	movs	r2, #36	@ 0x24
 8007dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0201 	bic.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f812 	bl	8007e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d108      	bne.n	8007e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e50:	e031      	b.n	8007eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e52:	2308      	movs	r3, #8
 8007e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e56:	2308      	movs	r3, #8
 8007e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	0e5b      	lsrs	r3, r3, #25
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	0f5b      	lsrs	r3, r3, #29
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	7b3a      	ldrb	r2, [r7, #12]
 8007e7e:	4911      	ldr	r1, [pc, #68]	@ (8007ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e80:	5c8a      	ldrb	r2, [r1, r2]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e86:	7b3a      	ldrb	r2, [r7, #12]
 8007e88:	490f      	ldr	r1, [pc, #60]	@ (8007ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8007e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	7b7a      	ldrb	r2, [r7, #13]
 8007e9c:	4909      	ldr	r1, [pc, #36]	@ (8007ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e9e:	5c8a      	ldrb	r2, [r1, r2]
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ea4:	7b7a      	ldrb	r2, [r7, #13]
 8007ea6:	4908      	ldr	r1, [pc, #32]	@ (8007ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	080088c0 	.word	0x080088c0
 8007ec8:	080088c8 	.word	0x080088c8

08007ecc <siprintf>:
 8007ecc:	b40e      	push	{r1, r2, r3}
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	b09d      	sub	sp, #116	@ 0x74
 8007ed2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ed6:	2400      	movs	r4, #0
 8007ed8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007eda:	9002      	str	r0, [sp, #8]
 8007edc:	9006      	str	r0, [sp, #24]
 8007ede:	9107      	str	r1, [sp, #28]
 8007ee0:	9104      	str	r1, [sp, #16]
 8007ee2:	4809      	ldr	r0, [pc, #36]	@ (8007f08 <siprintf+0x3c>)
 8007ee4:	4909      	ldr	r1, [pc, #36]	@ (8007f0c <siprintf+0x40>)
 8007ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eea:	9105      	str	r1, [sp, #20]
 8007eec:	a902      	add	r1, sp, #8
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007ef4:	f000 f994 	bl	8008220 <_svfiprintf_r>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	701c      	strb	r4, [r3, #0]
 8007efc:	b01d      	add	sp, #116	@ 0x74
 8007efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f02:	b003      	add	sp, #12
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	2000000c 	.word	0x2000000c
 8007f0c:	ffff0208 	.word	0xffff0208

08007f10 <memset>:
 8007f10:	4402      	add	r2, r0
 8007f12:	4603      	mov	r3, r0
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d100      	bne.n	8007f1a <memset+0xa>
 8007f18:	4770      	bx	lr
 8007f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1e:	e7f9      	b.n	8007f14 <memset+0x4>

08007f20 <__errno>:
 8007f20:	4b01      	ldr	r3, [pc, #4]	@ (8007f28 <__errno+0x8>)
 8007f22:	6818      	ldr	r0, [r3, #0]
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	2000000c 	.word	0x2000000c

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f64 <__libc_init_array+0x38>)
 8007f30:	2600      	movs	r6, #0
 8007f32:	4c0d      	ldr	r4, [pc, #52]	@ (8007f68 <__libc_init_array+0x3c>)
 8007f34:	1b64      	subs	r4, r4, r5
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	42a6      	cmp	r6, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f6c <__libc_init_array+0x40>)
 8007f3e:	2600      	movs	r6, #0
 8007f40:	4c0b      	ldr	r4, [pc, #44]	@ (8007f70 <__libc_init_array+0x44>)
 8007f42:	f000 fc75 	bl	8008830 <_init>
 8007f46:	1b64      	subs	r4, r4, r5
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	42a6      	cmp	r6, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f54:	3601      	adds	r6, #1
 8007f56:	4798      	blx	r3
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5e:	3601      	adds	r6, #1
 8007f60:	4798      	blx	r3
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	0800890c 	.word	0x0800890c
 8007f68:	0800890c 	.word	0x0800890c
 8007f6c:	0800890c 	.word	0x0800890c
 8007f70:	08008910 	.word	0x08008910

08007f74 <__retarget_lock_acquire_recursive>:
 8007f74:	4770      	bx	lr

08007f76 <__retarget_lock_release_recursive>:
 8007f76:	4770      	bx	lr

08007f78 <_free_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d041      	beq.n	8008004 <_free_r+0x8c>
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f0c      	subs	r4, r1, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfb8      	it	lt
 8007f8a:	18e4      	addlt	r4, r4, r3
 8007f8c:	f000 f8e0 	bl	8008150 <__malloc_lock>
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <_free_r+0x90>)
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	b933      	cbnz	r3, 8007fa4 <_free_r+0x2c>
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	6014      	str	r4, [r2, #0]
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa0:	f000 b8dc 	b.w	800815c <__malloc_unlock>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d908      	bls.n	8007fba <_free_r+0x42>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	1821      	adds	r1, r4, r0
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf01      	itttt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	1809      	addeq	r1, r1, r0
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	e7ed      	b.n	8007f96 <_free_r+0x1e>
 8007fba:	461a      	mov	r2, r3
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b10b      	cbz	r3, 8007fc4 <_free_r+0x4c>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d9fa      	bls.n	8007fba <_free_r+0x42>
 8007fc4:	6811      	ldr	r1, [r2, #0]
 8007fc6:	1850      	adds	r0, r2, r1
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d10b      	bne.n	8007fe4 <_free_r+0x6c>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	4401      	add	r1, r0
 8007fd0:	1850      	adds	r0, r2, r1
 8007fd2:	6011      	str	r1, [r2, #0]
 8007fd4:	4283      	cmp	r3, r0
 8007fd6:	d1e0      	bne.n	8007f9a <_free_r+0x22>
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4408      	add	r0, r1
 8007fde:	6053      	str	r3, [r2, #4]
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	e7da      	b.n	8007f9a <_free_r+0x22>
 8007fe4:	d902      	bls.n	8007fec <_free_r+0x74>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d6      	b.n	8007f9a <_free_r+0x22>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf02      	ittt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	1809      	addeq	r1, r1, r0
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	bf08      	it	eq
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	6054      	str	r4, [r2, #4]
 8008002:	e7ca      	b.n	8007f9a <_free_r+0x22>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	200004a4 	.word	0x200004a4

0800800c <sbrk_aligned>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4e0f      	ldr	r6, [pc, #60]	@ (800804c <sbrk_aligned+0x40>)
 8008010:	460c      	mov	r4, r1
 8008012:	4605      	mov	r5, r0
 8008014:	6831      	ldr	r1, [r6, #0]
 8008016:	b911      	cbnz	r1, 800801e <sbrk_aligned+0x12>
 8008018:	f000 fba8 	bl	800876c <_sbrk_r>
 800801c:	6030      	str	r0, [r6, #0]
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fba3 	bl	800876c <_sbrk_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d103      	bne.n	8008032 <sbrk_aligned+0x26>
 800802a:	f04f 34ff 	mov.w	r4, #4294967295
 800802e:	4620      	mov	r0, r4
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0f8      	beq.n	800802e <sbrk_aligned+0x22>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fb94 	bl	800876c <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1f2      	bne.n	800802e <sbrk_aligned+0x22>
 8008048:	e7ef      	b.n	800802a <sbrk_aligned+0x1e>
 800804a:	bf00      	nop
 800804c:	200004a0 	.word	0x200004a0

08008050 <_malloc_r>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	1ccd      	adds	r5, r1, #3
 8008056:	4606      	mov	r6, r0
 8008058:	f025 0503 	bic.w	r5, r5, #3
 800805c:	3508      	adds	r5, #8
 800805e:	2d0c      	cmp	r5, #12
 8008060:	bf38      	it	cc
 8008062:	250c      	movcc	r5, #12
 8008064:	2d00      	cmp	r5, #0
 8008066:	db01      	blt.n	800806c <_malloc_r+0x1c>
 8008068:	42a9      	cmp	r1, r5
 800806a:	d904      	bls.n	8008076 <_malloc_r+0x26>
 800806c:	230c      	movs	r3, #12
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800814c <_malloc_r+0xfc>
 800807a:	f000 f869 	bl	8008150 <__malloc_lock>
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	461c      	mov	r4, r3
 8008084:	bb44      	cbnz	r4, 80080d8 <_malloc_r+0x88>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ffbf 	bl	800800c <sbrk_aligned>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	4604      	mov	r4, r0
 8008092:	d158      	bne.n	8008146 <_malloc_r+0xf6>
 8008094:	f8d8 4000 	ldr.w	r4, [r8]
 8008098:	4627      	mov	r7, r4
 800809a:	2f00      	cmp	r7, #0
 800809c:	d143      	bne.n	8008126 <_malloc_r+0xd6>
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d04b      	beq.n	800813a <_malloc_r+0xea>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4639      	mov	r1, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	eb04 0903 	add.w	r9, r4, r3
 80080ac:	f000 fb5e 	bl	800876c <_sbrk_r>
 80080b0:	4581      	cmp	r9, r0
 80080b2:	d142      	bne.n	800813a <_malloc_r+0xea>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	4630      	mov	r0, r6
 80080b8:	1a6d      	subs	r5, r5, r1
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7ff ffa6 	bl	800800c <sbrk_aligned>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d03a      	beq.n	800813a <_malloc_r+0xea>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	442b      	add	r3, r5
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	f8d8 3000 	ldr.w	r3, [r8]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	bb62      	cbnz	r2, 800812c <_malloc_r+0xdc>
 80080d2:	f8c8 7000 	str.w	r7, [r8]
 80080d6:	e00f      	b.n	80080f8 <_malloc_r+0xa8>
 80080d8:	6822      	ldr	r2, [r4, #0]
 80080da:	1b52      	subs	r2, r2, r5
 80080dc:	d420      	bmi.n	8008120 <_malloc_r+0xd0>
 80080de:	2a0b      	cmp	r2, #11
 80080e0:	d917      	bls.n	8008112 <_malloc_r+0xc2>
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	bf18      	it	ne
 80080ea:	6059      	strne	r1, [r3, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	bf08      	it	eq
 80080f0:	f8c8 1000 	streq.w	r1, [r8]
 80080f4:	5162      	str	r2, [r4, r5]
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 f82f 	bl	800815c <__malloc_unlock>
 80080fe:	f104 000b 	add.w	r0, r4, #11
 8008102:	1d23      	adds	r3, r4, #4
 8008104:	f020 0007 	bic.w	r0, r0, #7
 8008108:	1ac2      	subs	r2, r0, r3
 800810a:	bf1c      	itt	ne
 800810c:	1a1b      	subne	r3, r3, r0
 800810e:	50a3      	strne	r3, [r4, r2]
 8008110:	e7af      	b.n	8008072 <_malloc_r+0x22>
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	bf0c      	ite	eq
 8008118:	f8c8 2000 	streq.w	r2, [r8]
 800811c:	605a      	strne	r2, [r3, #4]
 800811e:	e7eb      	b.n	80080f8 <_malloc_r+0xa8>
 8008120:	4623      	mov	r3, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7ae      	b.n	8008084 <_malloc_r+0x34>
 8008126:	463c      	mov	r4, r7
 8008128:	687f      	ldr	r7, [r7, #4]
 800812a:	e7b6      	b.n	800809a <_malloc_r+0x4a>
 800812c:	461a      	mov	r2, r3
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	d1fb      	bne.n	800812c <_malloc_r+0xdc>
 8008134:	2300      	movs	r3, #0
 8008136:	6053      	str	r3, [r2, #4]
 8008138:	e7de      	b.n	80080f8 <_malloc_r+0xa8>
 800813a:	230c      	movs	r3, #12
 800813c:	4630      	mov	r0, r6
 800813e:	6033      	str	r3, [r6, #0]
 8008140:	f000 f80c 	bl	800815c <__malloc_unlock>
 8008144:	e794      	b.n	8008070 <_malloc_r+0x20>
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	e7d6      	b.n	80080f8 <_malloc_r+0xa8>
 800814a:	bf00      	nop
 800814c:	200004a4 	.word	0x200004a4

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	@ (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bf0f 	b.w	8007f74 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	2000049c 	.word	0x2000049c

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	@ (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff bf0a 	b.w	8007f76 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	2000049c 	.word	0x2000049c

08008168 <__ssputs_r>:
 8008168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	461f      	mov	r7, r3
 800816e:	688e      	ldr	r6, [r1, #8]
 8008170:	4682      	mov	sl, r0
 8008172:	460c      	mov	r4, r1
 8008174:	42be      	cmp	r6, r7
 8008176:	4690      	mov	r8, r2
 8008178:	680b      	ldr	r3, [r1, #0]
 800817a:	d82d      	bhi.n	80081d8 <__ssputs_r+0x70>
 800817c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008180:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008184:	d026      	beq.n	80081d4 <__ssputs_r+0x6c>
 8008186:	6965      	ldr	r5, [r4, #20]
 8008188:	6909      	ldr	r1, [r1, #16]
 800818a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800818e:	eba3 0901 	sub.w	r9, r3, r1
 8008192:	1c7b      	adds	r3, r7, #1
 8008194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008198:	444b      	add	r3, r9
 800819a:	106d      	asrs	r5, r5, #1
 800819c:	429d      	cmp	r5, r3
 800819e:	bf38      	it	cc
 80081a0:	461d      	movcc	r5, r3
 80081a2:	0553      	lsls	r3, r2, #21
 80081a4:	d527      	bpl.n	80081f6 <__ssputs_r+0x8e>
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7ff ff52 	bl	8008050 <_malloc_r>
 80081ac:	4606      	mov	r6, r0
 80081ae:	b360      	cbz	r0, 800820a <__ssputs_r+0xa2>
 80081b0:	464a      	mov	r2, r9
 80081b2:	6921      	ldr	r1, [r4, #16]
 80081b4:	f000 faf8 	bl	80087a8 <memcpy>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	6126      	str	r6, [r4, #16]
 80081c6:	444e      	add	r6, r9
 80081c8:	6165      	str	r5, [r4, #20]
 80081ca:	eba5 0509 	sub.w	r5, r5, r9
 80081ce:	6026      	str	r6, [r4, #0]
 80081d0:	463e      	mov	r6, r7
 80081d2:	60a5      	str	r5, [r4, #8]
 80081d4:	42be      	cmp	r6, r7
 80081d6:	d900      	bls.n	80081da <__ssputs_r+0x72>
 80081d8:	463e      	mov	r6, r7
 80081da:	4632      	mov	r2, r6
 80081dc:	4641      	mov	r1, r8
 80081de:	6820      	ldr	r0, [r4, #0]
 80081e0:	f000 faaa 	bl	8008738 <memmove>
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	2000      	movs	r0, #0
 80081e8:	1b9b      	subs	r3, r3, r6
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	4433      	add	r3, r6
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f6:	462a      	mov	r2, r5
 80081f8:	f000 fae3 	bl	80087c2 <_realloc_r>
 80081fc:	4606      	mov	r6, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1e0      	bne.n	80081c4 <__ssputs_r+0x5c>
 8008202:	6921      	ldr	r1, [r4, #16]
 8008204:	4650      	mov	r0, sl
 8008206:	f7ff feb7 	bl	8007f78 <_free_r>
 800820a:	230c      	movs	r3, #12
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	f8ca 3000 	str.w	r3, [sl]
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	e7e9      	b.n	80081f2 <__ssputs_r+0x8a>
	...

08008220 <_svfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	4698      	mov	r8, r3
 8008226:	898b      	ldrh	r3, [r1, #12]
 8008228:	b09d      	sub	sp, #116	@ 0x74
 800822a:	4607      	mov	r7, r0
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	460d      	mov	r5, r1
 8008230:	4614      	mov	r4, r2
 8008232:	d510      	bpl.n	8008256 <_svfiprintf_r+0x36>
 8008234:	690b      	ldr	r3, [r1, #16]
 8008236:	b973      	cbnz	r3, 8008256 <_svfiprintf_r+0x36>
 8008238:	2140      	movs	r1, #64	@ 0x40
 800823a:	f7ff ff09 	bl	8008050 <_malloc_r>
 800823e:	6028      	str	r0, [r5, #0]
 8008240:	6128      	str	r0, [r5, #16]
 8008242:	b930      	cbnz	r0, 8008252 <_svfiprintf_r+0x32>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	b01d      	add	sp, #116	@ 0x74
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	2340      	movs	r3, #64	@ 0x40
 8008254:	616b      	str	r3, [r5, #20]
 8008256:	2300      	movs	r3, #0
 8008258:	f8cd 800c 	str.w	r8, [sp, #12]
 800825c:	f04f 0901 	mov.w	r9, #1
 8008260:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8008404 <_svfiprintf_r+0x1e4>
 8008264:	9309      	str	r3, [sp, #36]	@ 0x24
 8008266:	2320      	movs	r3, #32
 8008268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800826c:	2330      	movs	r3, #48	@ 0x30
 800826e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008272:	4623      	mov	r3, r4
 8008274:	469a      	mov	sl, r3
 8008276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800827a:	b10a      	cbz	r2, 8008280 <_svfiprintf_r+0x60>
 800827c:	2a25      	cmp	r2, #37	@ 0x25
 800827e:	d1f9      	bne.n	8008274 <_svfiprintf_r+0x54>
 8008280:	ebba 0b04 	subs.w	fp, sl, r4
 8008284:	d00b      	beq.n	800829e <_svfiprintf_r+0x7e>
 8008286:	465b      	mov	r3, fp
 8008288:	4622      	mov	r2, r4
 800828a:	4629      	mov	r1, r5
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff ff6b 	bl	8008168 <__ssputs_r>
 8008292:	3001      	adds	r0, #1
 8008294:	f000 80a7 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 8008298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800829a:	445a      	add	r2, fp
 800829c:	9209      	str	r2, [sp, #36]	@ 0x24
 800829e:	f89a 3000 	ldrb.w	r3, [sl]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 809f 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 80082a8:	2300      	movs	r3, #0
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295
 80082ae:	f10a 0a01 	add.w	sl, sl, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80082bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082c0:	4654      	mov	r4, sl
 80082c2:	2205      	movs	r2, #5
 80082c4:	484f      	ldr	r0, [pc, #316]	@ (8008404 <_svfiprintf_r+0x1e4>)
 80082c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ca:	f000 fa5f 	bl	800878c <memchr>
 80082ce:	9a04      	ldr	r2, [sp, #16]
 80082d0:	b9d8      	cbnz	r0, 800830a <_svfiprintf_r+0xea>
 80082d2:	06d0      	lsls	r0, r2, #27
 80082d4:	bf44      	itt	mi
 80082d6:	2320      	movmi	r3, #32
 80082d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082dc:	0711      	lsls	r1, r2, #28
 80082de:	bf44      	itt	mi
 80082e0:	232b      	movmi	r3, #43	@ 0x2b
 80082e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082e6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ec:	d015      	beq.n	800831a <_svfiprintf_r+0xfa>
 80082ee:	9a07      	ldr	r2, [sp, #28]
 80082f0:	4654      	mov	r4, sl
 80082f2:	2000      	movs	r0, #0
 80082f4:	f04f 0c0a 	mov.w	ip, #10
 80082f8:	4621      	mov	r1, r4
 80082fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fe:	3b30      	subs	r3, #48	@ 0x30
 8008300:	2b09      	cmp	r3, #9
 8008302:	d94b      	bls.n	800839c <_svfiprintf_r+0x17c>
 8008304:	b1b0      	cbz	r0, 8008334 <_svfiprintf_r+0x114>
 8008306:	9207      	str	r2, [sp, #28]
 8008308:	e014      	b.n	8008334 <_svfiprintf_r+0x114>
 800830a:	eba0 0308 	sub.w	r3, r0, r8
 800830e:	46a2      	mov	sl, r4
 8008310:	fa09 f303 	lsl.w	r3, r9, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	e7d2      	b.n	80082c0 <_svfiprintf_r+0xa0>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	1d19      	adds	r1, r3, #4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	9103      	str	r1, [sp, #12]
 8008324:	bfbb      	ittet	lt
 8008326:	425b      	neglt	r3, r3
 8008328:	f042 0202 	orrlt.w	r2, r2, #2
 800832c:	9307      	strge	r3, [sp, #28]
 800832e:	9307      	strlt	r3, [sp, #28]
 8008330:	bfb8      	it	lt
 8008332:	9204      	strlt	r2, [sp, #16]
 8008334:	7823      	ldrb	r3, [r4, #0]
 8008336:	2b2e      	cmp	r3, #46	@ 0x2e
 8008338:	d10a      	bne.n	8008350 <_svfiprintf_r+0x130>
 800833a:	7863      	ldrb	r3, [r4, #1]
 800833c:	2b2a      	cmp	r3, #42	@ 0x2a
 800833e:	d132      	bne.n	80083a6 <_svfiprintf_r+0x186>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	3402      	adds	r4, #2
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008414 <_svfiprintf_r+0x1f4>
 8008354:	2203      	movs	r2, #3
 8008356:	7821      	ldrb	r1, [r4, #0]
 8008358:	4650      	mov	r0, sl
 800835a:	f000 fa17 	bl	800878c <memchr>
 800835e:	b138      	cbz	r0, 8008370 <_svfiprintf_r+0x150>
 8008360:	eba0 000a 	sub.w	r0, r0, sl
 8008364:	2240      	movs	r2, #64	@ 0x40
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	3401      	adds	r4, #1
 800836a:	4082      	lsls	r2, r0
 800836c:	4313      	orrs	r3, r2
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	2206      	movs	r2, #6
 8008376:	4824      	ldr	r0, [pc, #144]	@ (8008408 <_svfiprintf_r+0x1e8>)
 8008378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800837c:	f000 fa06 	bl	800878c <memchr>
 8008380:	2800      	cmp	r0, #0
 8008382:	d036      	beq.n	80083f2 <_svfiprintf_r+0x1d2>
 8008384:	4b21      	ldr	r3, [pc, #132]	@ (800840c <_svfiprintf_r+0x1ec>)
 8008386:	bb1b      	cbnz	r3, 80083d0 <_svfiprintf_r+0x1b0>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	3307      	adds	r3, #7
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008396:	4433      	add	r3, r6
 8008398:	9309      	str	r3, [sp, #36]	@ 0x24
 800839a:	e76a      	b.n	8008272 <_svfiprintf_r+0x52>
 800839c:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a0:	460c      	mov	r4, r1
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7a8      	b.n	80082f8 <_svfiprintf_r+0xd8>
 80083a6:	2300      	movs	r3, #0
 80083a8:	3401      	adds	r4, #1
 80083aa:	f04f 0c0a 	mov.w	ip, #10
 80083ae:	4619      	mov	r1, r3
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	@ 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_svfiprintf_r+0x1a6>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c6      	beq.n	8008350 <_svfiprintf_r+0x130>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c4      	b.n	8008350 <_svfiprintf_r+0x130>
 80083c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ca:	4604      	mov	r4, r0
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7f0      	b.n	80083b2 <_svfiprintf_r+0x192>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	462a      	mov	r2, r5
 80083d4:	a904      	add	r1, sp, #16
 80083d6:	4638      	mov	r0, r7
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4b0d      	ldr	r3, [pc, #52]	@ (8008410 <_svfiprintf_r+0x1f0>)
 80083dc:	f3af 8000 	nop.w
 80083e0:	1c42      	adds	r2, r0, #1
 80083e2:	4606      	mov	r6, r0
 80083e4:	d1d6      	bne.n	8008394 <_svfiprintf_r+0x174>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	065b      	lsls	r3, r3, #25
 80083ea:	f53f af2d 	bmi.w	8008248 <_svfiprintf_r+0x28>
 80083ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f0:	e72c      	b.n	800824c <_svfiprintf_r+0x2c>
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	462a      	mov	r2, r5
 80083f6:	a904      	add	r1, sp, #16
 80083f8:	4638      	mov	r0, r7
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <_svfiprintf_r+0x1f0>)
 80083fe:	f000 f87d 	bl	80084fc <_printf_i>
 8008402:	e7ed      	b.n	80083e0 <_svfiprintf_r+0x1c0>
 8008404:	080088d0 	.word	0x080088d0
 8008408:	080088da 	.word	0x080088da
 800840c:	00000000 	.word	0x00000000
 8008410:	08008169 	.word	0x08008169
 8008414:	080088d6 	.word	0x080088d6

08008418 <_printf_common>:
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	4616      	mov	r6, r2
 800841e:	4698      	mov	r8, r3
 8008420:	688a      	ldr	r2, [r1, #8]
 8008422:	4607      	mov	r7, r0
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	460c      	mov	r4, r1
 8008428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800842c:	4293      	cmp	r3, r2
 800842e:	bfb8      	it	lt
 8008430:	4613      	movlt	r3, r2
 8008432:	6033      	str	r3, [r6, #0]
 8008434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008438:	b10a      	cbz	r2, 800843e <_printf_common+0x26>
 800843a:	3301      	adds	r3, #1
 800843c:	6033      	str	r3, [r6, #0]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	0699      	lsls	r1, r3, #26
 8008442:	bf42      	ittt	mi
 8008444:	6833      	ldrmi	r3, [r6, #0]
 8008446:	3302      	addmi	r3, #2
 8008448:	6033      	strmi	r3, [r6, #0]
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	f015 0506 	ands.w	r5, r5, #6
 8008450:	d106      	bne.n	8008460 <_printf_common+0x48>
 8008452:	f104 0a19 	add.w	sl, r4, #25
 8008456:	68e3      	ldr	r3, [r4, #12]
 8008458:	6832      	ldr	r2, [r6, #0]
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	42ab      	cmp	r3, r5
 800845e:	dc2b      	bgt.n	80084b8 <_printf_common+0xa0>
 8008460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	3b00      	subs	r3, #0
 8008468:	bf18      	it	ne
 800846a:	2301      	movne	r3, #1
 800846c:	0692      	lsls	r2, r2, #26
 800846e:	d430      	bmi.n	80084d2 <_printf_common+0xba>
 8008470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008474:	4641      	mov	r1, r8
 8008476:	4638      	mov	r0, r7
 8008478:	47c8      	blx	r9
 800847a:	3001      	adds	r0, #1
 800847c:	d023      	beq.n	80084c6 <_printf_common+0xae>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	341a      	adds	r4, #26
 8008482:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008486:	f003 0306 	and.w	r3, r3, #6
 800848a:	2b04      	cmp	r3, #4
 800848c:	bf0a      	itet	eq
 800848e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008492:	2500      	movne	r5, #0
 8008494:	6833      	ldreq	r3, [r6, #0]
 8008496:	f04f 0600 	mov.w	r6, #0
 800849a:	bf08      	it	eq
 800849c:	1aed      	subeq	r5, r5, r3
 800849e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80084a2:	bf08      	it	eq
 80084a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bfc4      	itt	gt
 80084ac:	1a9b      	subgt	r3, r3, r2
 80084ae:	18ed      	addgt	r5, r5, r3
 80084b0:	42b5      	cmp	r5, r6
 80084b2:	d11a      	bne.n	80084ea <_printf_common+0xd2>
 80084b4:	2000      	movs	r0, #0
 80084b6:	e008      	b.n	80084ca <_printf_common+0xb2>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4641      	mov	r1, r8
 80084be:	4638      	mov	r0, r7
 80084c0:	47c8      	blx	r9
 80084c2:	3001      	adds	r0, #1
 80084c4:	d103      	bne.n	80084ce <_printf_common+0xb6>
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	3501      	adds	r5, #1
 80084d0:	e7c1      	b.n	8008456 <_printf_common+0x3e>
 80084d2:	18e1      	adds	r1, r4, r3
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	2030      	movs	r0, #48	@ 0x30
 80084d8:	3302      	adds	r3, #2
 80084da:	4422      	add	r2, r4
 80084dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e8:	e7c2      	b.n	8008470 <_printf_common+0x58>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4622      	mov	r2, r4
 80084ee:	4641      	mov	r1, r8
 80084f0:	4638      	mov	r0, r7
 80084f2:	47c8      	blx	r9
 80084f4:	3001      	adds	r0, #1
 80084f6:	d0e6      	beq.n	80084c6 <_printf_common+0xae>
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7d9      	b.n	80084b0 <_printf_common+0x98>

080084fc <_printf_i>:
 80084fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	7e0f      	ldrb	r7, [r1, #24]
 8008502:	4691      	mov	r9, r2
 8008504:	4680      	mov	r8, r0
 8008506:	460c      	mov	r4, r1
 8008508:	2f78      	cmp	r7, #120	@ 0x78
 800850a:	469a      	mov	sl, r3
 800850c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800850e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008512:	d807      	bhi.n	8008524 <_printf_i+0x28>
 8008514:	2f62      	cmp	r7, #98	@ 0x62
 8008516:	d80a      	bhi.n	800852e <_printf_i+0x32>
 8008518:	2f00      	cmp	r7, #0
 800851a:	f000 80d1 	beq.w	80086c0 <_printf_i+0x1c4>
 800851e:	2f58      	cmp	r7, #88	@ 0x58
 8008520:	f000 80b8 	beq.w	8008694 <_printf_i+0x198>
 8008524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800852c:	e03a      	b.n	80085a4 <_printf_i+0xa8>
 800852e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008532:	2b15      	cmp	r3, #21
 8008534:	d8f6      	bhi.n	8008524 <_printf_i+0x28>
 8008536:	a101      	add	r1, pc, #4	@ (adr r1, 800853c <_printf_i+0x40>)
 8008538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800853c:	08008595 	.word	0x08008595
 8008540:	080085a9 	.word	0x080085a9
 8008544:	08008525 	.word	0x08008525
 8008548:	08008525 	.word	0x08008525
 800854c:	08008525 	.word	0x08008525
 8008550:	08008525 	.word	0x08008525
 8008554:	080085a9 	.word	0x080085a9
 8008558:	08008525 	.word	0x08008525
 800855c:	08008525 	.word	0x08008525
 8008560:	08008525 	.word	0x08008525
 8008564:	08008525 	.word	0x08008525
 8008568:	080086a7 	.word	0x080086a7
 800856c:	080085d3 	.word	0x080085d3
 8008570:	08008661 	.word	0x08008661
 8008574:	08008525 	.word	0x08008525
 8008578:	08008525 	.word	0x08008525
 800857c:	080086c9 	.word	0x080086c9
 8008580:	08008525 	.word	0x08008525
 8008584:	080085d3 	.word	0x080085d3
 8008588:	08008525 	.word	0x08008525
 800858c:	08008525 	.word	0x08008525
 8008590:	08008669 	.word	0x08008669
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	1d1a      	adds	r2, r3, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6032      	str	r2, [r6, #0]
 800859c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a4:	2301      	movs	r3, #1
 80085a6:	e09c      	b.n	80086e2 <_printf_i+0x1e6>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	6031      	str	r1, [r6, #0]
 80085b0:	0606      	lsls	r6, r0, #24
 80085b2:	d501      	bpl.n	80085b8 <_printf_i+0xbc>
 80085b4:	681d      	ldr	r5, [r3, #0]
 80085b6:	e003      	b.n	80085c0 <_printf_i+0xc4>
 80085b8:	0645      	lsls	r5, r0, #25
 80085ba:	d5fb      	bpl.n	80085b4 <_printf_i+0xb8>
 80085bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	da03      	bge.n	80085cc <_printf_i+0xd0>
 80085c4:	232d      	movs	r3, #45	@ 0x2d
 80085c6:	426d      	negs	r5, r5
 80085c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085cc:	4858      	ldr	r0, [pc, #352]	@ (8008730 <_printf_i+0x234>)
 80085ce:	230a      	movs	r3, #10
 80085d0:	e011      	b.n	80085f6 <_printf_i+0xfa>
 80085d2:	6821      	ldr	r1, [r4, #0]
 80085d4:	6833      	ldr	r3, [r6, #0]
 80085d6:	0608      	lsls	r0, r1, #24
 80085d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80085dc:	d402      	bmi.n	80085e4 <_printf_i+0xe8>
 80085de:	0649      	lsls	r1, r1, #25
 80085e0:	bf48      	it	mi
 80085e2:	b2ad      	uxthmi	r5, r5
 80085e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80085e6:	6033      	str	r3, [r6, #0]
 80085e8:	4851      	ldr	r0, [pc, #324]	@ (8008730 <_printf_i+0x234>)
 80085ea:	bf14      	ite	ne
 80085ec:	230a      	movne	r3, #10
 80085ee:	2308      	moveq	r3, #8
 80085f0:	2100      	movs	r1, #0
 80085f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085f6:	6866      	ldr	r6, [r4, #4]
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	60a6      	str	r6, [r4, #8]
 80085fc:	db05      	blt.n	800860a <_printf_i+0x10e>
 80085fe:	6821      	ldr	r1, [r4, #0]
 8008600:	432e      	orrs	r6, r5
 8008602:	f021 0104 	bic.w	r1, r1, #4
 8008606:	6021      	str	r1, [r4, #0]
 8008608:	d04b      	beq.n	80086a2 <_printf_i+0x1a6>
 800860a:	4616      	mov	r6, r2
 800860c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008610:	fb03 5711 	mls	r7, r3, r1, r5
 8008614:	5dc7      	ldrb	r7, [r0, r7]
 8008616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800861a:	462f      	mov	r7, r5
 800861c:	460d      	mov	r5, r1
 800861e:	42bb      	cmp	r3, r7
 8008620:	d9f4      	bls.n	800860c <_printf_i+0x110>
 8008622:	2b08      	cmp	r3, #8
 8008624:	d10b      	bne.n	800863e <_printf_i+0x142>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	07df      	lsls	r7, r3, #31
 800862a:	d508      	bpl.n	800863e <_printf_i+0x142>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	4299      	cmp	r1, r3
 8008632:	bfde      	ittt	le
 8008634:	2330      	movle	r3, #48	@ 0x30
 8008636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800863a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800863e:	1b92      	subs	r2, r2, r6
 8008640:	6122      	str	r2, [r4, #16]
 8008642:	464b      	mov	r3, r9
 8008644:	aa03      	add	r2, sp, #12
 8008646:	4621      	mov	r1, r4
 8008648:	4640      	mov	r0, r8
 800864a:	f8cd a000 	str.w	sl, [sp]
 800864e:	f7ff fee3 	bl	8008418 <_printf_common>
 8008652:	3001      	adds	r0, #1
 8008654:	d14a      	bne.n	80086ec <_printf_i+0x1f0>
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	b004      	add	sp, #16
 800865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	f043 0320 	orr.w	r3, r3, #32
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	2778      	movs	r7, #120	@ 0x78
 800866a:	4832      	ldr	r0, [pc, #200]	@ (8008734 <_printf_i+0x238>)
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008672:	061f      	lsls	r7, r3, #24
 8008674:	6831      	ldr	r1, [r6, #0]
 8008676:	f851 5b04 	ldr.w	r5, [r1], #4
 800867a:	d402      	bmi.n	8008682 <_printf_i+0x186>
 800867c:	065f      	lsls	r7, r3, #25
 800867e:	bf48      	it	mi
 8008680:	b2ad      	uxthmi	r5, r5
 8008682:	6031      	str	r1, [r6, #0]
 8008684:	07d9      	lsls	r1, r3, #31
 8008686:	bf44      	itt	mi
 8008688:	f043 0320 	orrmi.w	r3, r3, #32
 800868c:	6023      	strmi	r3, [r4, #0]
 800868e:	b11d      	cbz	r5, 8008698 <_printf_i+0x19c>
 8008690:	2310      	movs	r3, #16
 8008692:	e7ad      	b.n	80085f0 <_printf_i+0xf4>
 8008694:	4826      	ldr	r0, [pc, #152]	@ (8008730 <_printf_i+0x234>)
 8008696:	e7e9      	b.n	800866c <_printf_i+0x170>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	f023 0320 	bic.w	r3, r3, #32
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	e7f6      	b.n	8008690 <_printf_i+0x194>
 80086a2:	4616      	mov	r6, r2
 80086a4:	e7bd      	b.n	8008622 <_printf_i+0x126>
 80086a6:	6833      	ldr	r3, [r6, #0]
 80086a8:	6825      	ldr	r5, [r4, #0]
 80086aa:	1d18      	adds	r0, r3, #4
 80086ac:	6961      	ldr	r1, [r4, #20]
 80086ae:	6030      	str	r0, [r6, #0]
 80086b0:	062e      	lsls	r6, r5, #24
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	d501      	bpl.n	80086ba <_printf_i+0x1be>
 80086b6:	6019      	str	r1, [r3, #0]
 80086b8:	e002      	b.n	80086c0 <_printf_i+0x1c4>
 80086ba:	0668      	lsls	r0, r5, #25
 80086bc:	d5fb      	bpl.n	80086b6 <_printf_i+0x1ba>
 80086be:	8019      	strh	r1, [r3, #0]
 80086c0:	2300      	movs	r3, #0
 80086c2:	4616      	mov	r6, r2
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	e7bc      	b.n	8008642 <_printf_i+0x146>
 80086c8:	6833      	ldr	r3, [r6, #0]
 80086ca:	2100      	movs	r1, #0
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	6032      	str	r2, [r6, #0]
 80086d0:	681e      	ldr	r6, [r3, #0]
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	4630      	mov	r0, r6
 80086d6:	f000 f859 	bl	800878c <memchr>
 80086da:	b108      	cbz	r0, 80086e0 <_printf_i+0x1e4>
 80086dc:	1b80      	subs	r0, r0, r6
 80086de:	6060      	str	r0, [r4, #4]
 80086e0:	6863      	ldr	r3, [r4, #4]
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	2300      	movs	r3, #0
 80086e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ea:	e7aa      	b.n	8008642 <_printf_i+0x146>
 80086ec:	6923      	ldr	r3, [r4, #16]
 80086ee:	4632      	mov	r2, r6
 80086f0:	4649      	mov	r1, r9
 80086f2:	4640      	mov	r0, r8
 80086f4:	47d0      	blx	sl
 80086f6:	3001      	adds	r0, #1
 80086f8:	d0ad      	beq.n	8008656 <_printf_i+0x15a>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	079b      	lsls	r3, r3, #30
 80086fe:	d413      	bmi.n	8008728 <_printf_i+0x22c>
 8008700:	68e0      	ldr	r0, [r4, #12]
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	4298      	cmp	r0, r3
 8008706:	bfb8      	it	lt
 8008708:	4618      	movlt	r0, r3
 800870a:	e7a6      	b.n	800865a <_printf_i+0x15e>
 800870c:	2301      	movs	r3, #1
 800870e:	4632      	mov	r2, r6
 8008710:	4649      	mov	r1, r9
 8008712:	4640      	mov	r0, r8
 8008714:	47d0      	blx	sl
 8008716:	3001      	adds	r0, #1
 8008718:	d09d      	beq.n	8008656 <_printf_i+0x15a>
 800871a:	3501      	adds	r5, #1
 800871c:	68e3      	ldr	r3, [r4, #12]
 800871e:	9903      	ldr	r1, [sp, #12]
 8008720:	1a5b      	subs	r3, r3, r1
 8008722:	42ab      	cmp	r3, r5
 8008724:	dcf2      	bgt.n	800870c <_printf_i+0x210>
 8008726:	e7eb      	b.n	8008700 <_printf_i+0x204>
 8008728:	2500      	movs	r5, #0
 800872a:	f104 0619 	add.w	r6, r4, #25
 800872e:	e7f5      	b.n	800871c <_printf_i+0x220>
 8008730:	080088e1 	.word	0x080088e1
 8008734:	080088f2 	.word	0x080088f2

08008738 <memmove>:
 8008738:	4288      	cmp	r0, r1
 800873a:	b510      	push	{r4, lr}
 800873c:	eb01 0402 	add.w	r4, r1, r2
 8008740:	d902      	bls.n	8008748 <memmove+0x10>
 8008742:	4284      	cmp	r4, r0
 8008744:	4623      	mov	r3, r4
 8008746:	d807      	bhi.n	8008758 <memmove+0x20>
 8008748:	1e43      	subs	r3, r0, #1
 800874a:	42a1      	cmp	r1, r4
 800874c:	d008      	beq.n	8008760 <memmove+0x28>
 800874e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008756:	e7f8      	b.n	800874a <memmove+0x12>
 8008758:	4402      	add	r2, r0
 800875a:	4601      	mov	r1, r0
 800875c:	428a      	cmp	r2, r1
 800875e:	d100      	bne.n	8008762 <memmove+0x2a>
 8008760:	bd10      	pop	{r4, pc}
 8008762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800876a:	e7f7      	b.n	800875c <memmove+0x24>

0800876c <_sbrk_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	2300      	movs	r3, #0
 8008770:	4d05      	ldr	r5, [pc, #20]	@ (8008788 <_sbrk_r+0x1c>)
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	602b      	str	r3, [r5, #0]
 8008778:	f7f8 ffd8 	bl	800172c <_sbrk>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_sbrk_r+0x1a>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_sbrk_r+0x1a>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20000498 	.word	0x20000498

0800878c <memchr>:
 800878c:	b2c9      	uxtb	r1, r1
 800878e:	4603      	mov	r3, r0
 8008790:	4402      	add	r2, r0
 8008792:	b510      	push	{r4, lr}
 8008794:	4293      	cmp	r3, r2
 8008796:	4618      	mov	r0, r3
 8008798:	d101      	bne.n	800879e <memchr+0x12>
 800879a:	2000      	movs	r0, #0
 800879c:	e003      	b.n	80087a6 <memchr+0x1a>
 800879e:	7804      	ldrb	r4, [r0, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	428c      	cmp	r4, r1
 80087a4:	d1f6      	bne.n	8008794 <memchr+0x8>
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	1e43      	subs	r3, r0, #1
 80087ac:	4291      	cmp	r1, r2
 80087ae:	d100      	bne.n	80087b2 <memcpy+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	b510      	push	{r4, lr}
 80087b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b8:	4291      	cmp	r1, r2
 80087ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087be:	d1f9      	bne.n	80087b4 <memcpy+0xc>
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <_realloc_r>:
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	4607      	mov	r7, r0
 80087c8:	4614      	mov	r4, r2
 80087ca:	460d      	mov	r5, r1
 80087cc:	b921      	cbnz	r1, 80087d8 <_realloc_r+0x16>
 80087ce:	4611      	mov	r1, r2
 80087d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	f7ff bc3c 	b.w	8008050 <_malloc_r>
 80087d8:	b92a      	cbnz	r2, 80087e6 <_realloc_r+0x24>
 80087da:	4625      	mov	r5, r4
 80087dc:	f7ff fbcc 	bl	8007f78 <_free_r>
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e6:	f000 f81a 	bl	800881e <_malloc_usable_size_r>
 80087ea:	4284      	cmp	r4, r0
 80087ec:	4606      	mov	r6, r0
 80087ee:	d802      	bhi.n	80087f6 <_realloc_r+0x34>
 80087f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087f4:	d8f4      	bhi.n	80087e0 <_realloc_r+0x1e>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff fc29 	bl	8008050 <_malloc_r>
 80087fe:	4680      	mov	r8, r0
 8008800:	b908      	cbnz	r0, 8008806 <_realloc_r+0x44>
 8008802:	4645      	mov	r5, r8
 8008804:	e7ec      	b.n	80087e0 <_realloc_r+0x1e>
 8008806:	42b4      	cmp	r4, r6
 8008808:	4622      	mov	r2, r4
 800880a:	4629      	mov	r1, r5
 800880c:	bf28      	it	cs
 800880e:	4632      	movcs	r2, r6
 8008810:	f7ff ffca 	bl	80087a8 <memcpy>
 8008814:	4629      	mov	r1, r5
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff fbae 	bl	8007f78 <_free_r>
 800881c:	e7f1      	b.n	8008802 <_realloc_r+0x40>

0800881e <_malloc_usable_size_r>:
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	1f18      	subs	r0, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfbc      	itt	lt
 8008828:	580b      	ldrlt	r3, [r1, r0]
 800882a:	18c0      	addlt	r0, r0, r3
 800882c:	4770      	bx	lr
	...

08008830 <_init>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr

0800883c <_fini>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr
