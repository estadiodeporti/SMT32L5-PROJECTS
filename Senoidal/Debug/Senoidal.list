
Senoidal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008998  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08008b90  08008b90  00009b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e70  08008e70  0000a090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e70  08008e70  00009e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e78  08008e78  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e7c  08008e7c  00009e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08008e80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000090  08008f10  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008f10  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c91  00000000  00000000  0000a0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  0001fd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00022bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dac  00000000  00000000  00023de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b987  00000000  00000000  00024b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015240  00000000  00000000  00050513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115a13  00000000  00000000  00065753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  0017b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001809d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000090 	.word	0x20000090
 8000214:	00000000 	.word	0x00000000
 8000218:	08008b78 	.word	0x08008b78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000094 	.word	0x20000094
 8000234:	08008b78 	.word	0x08008b78

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b9b0 	b.w	8000eec <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000baa:	4688      	mov	r8, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	468e      	mov	lr, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d95f      	bls.n	8000c7a <__udivmoddi4+0xd6>
 8000bba:	fab2 f682 	clz	r6, r2
 8000bbe:	b14e      	cbz	r6, 8000bd4 <__udivmoddi4+0x30>
 8000bc0:	f1c6 0320 	rsb	r3, r6, #32
 8000bc4:	fa01 fe06 	lsl.w	lr, r1, r6
 8000bc8:	40b7      	lsls	r7, r6
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	ea43 0e0e 	orr.w	lr, r3, lr
 8000bd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	0c23      	lsrs	r3, r4, #16
 8000bde:	fbbe f1f8 	udiv	r1, lr, r8
 8000be2:	fb08 ee11 	mls	lr, r8, r1, lr
 8000be6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x5e>
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x5c>
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	f200 8154 	bhi.w	8000ea8 <__udivmoddi4+0x304>
 8000c00:	4601      	mov	r1, r0
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	b2a2      	uxth	r2, r4
 8000c06:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0a:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c16:	4594      	cmp	ip, r2
 8000c18:	d90b      	bls.n	8000c32 <__udivmoddi4+0x8e>
 8000c1a:	18ba      	adds	r2, r7, r2
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c20:	bf2c      	ite	cs
 8000c22:	2401      	movcs	r4, #1
 8000c24:	2400      	movcc	r4, #0
 8000c26:	4594      	cmp	ip, r2
 8000c28:	d902      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	f000 813f 	beq.w	8000eae <__udivmoddi4+0x30a>
 8000c30:	4618      	mov	r0, r3
 8000c32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c36:	eba2 020c 	sub.w	r2, r2, ip
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11d      	cbz	r5, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40f2      	lsrs	r2, r6
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c5 2300 	strd	r2, r3, [r5]
 8000c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d905      	bls.n	8000c5a <__udivmoddi4+0xb6>
 8000c4e:	b10d      	cbz	r5, 8000c54 <__udivmoddi4+0xb0>
 8000c50:	e9c5 0100 	strd	r0, r1, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4608      	mov	r0, r1
 8000c58:	e7f5      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c5a:	fab3 f183 	clz	r1, r3
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d14e      	bne.n	8000d00 <__udivmoddi4+0x15c>
 8000c62:	4543      	cmp	r3, r8
 8000c64:	f0c0 8112 	bcc.w	8000e8c <__udivmoddi4+0x2e8>
 8000c68:	4282      	cmp	r2, r0
 8000c6a:	f240 810f 	bls.w	8000e8c <__udivmoddi4+0x2e8>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e8      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c74:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c78:	e7e5      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f000 80ac 	beq.w	8000dd8 <__udivmoddi4+0x234>
 8000c80:	fab2 f682 	clz	r6, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	f040 80bb 	bne.w	8000e00 <__udivmoddi4+0x25c>
 8000c8a:	1a8b      	subs	r3, r1, r2
 8000c8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c90:	b2bc      	uxth	r4, r7
 8000c92:	2101      	movs	r1, #1
 8000c94:	0c02      	lsrs	r2, r0, #16
 8000c96:	b280      	uxth	r0, r0
 8000c98:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ca4:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d90e      	bls.n	8000cca <__udivmoddi4+0x126>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb2:	bf2c      	ite	cs
 8000cb4:	f04f 0901 	movcs.w	r9, #1
 8000cb8:	f04f 0900 	movcc.w	r9, #0
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d903      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cc0:	f1b9 0f00 	cmp.w	r9, #0
 8000cc4:	f000 80ec 	beq.w	8000ea0 <__udivmoddi4+0x2fc>
 8000cc8:	46c4      	mov	ip, r8
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd4:	fb04 f408 	mul.w	r4, r4, r8
 8000cd8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000cdc:	4294      	cmp	r4, r2
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x154>
 8000ce0:	18ba      	adds	r2, r7, r2
 8000ce2:	f108 33ff 	add.w	r3, r8, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	2001      	movcs	r0, #1
 8000cea:	2000      	movcc	r0, #0
 8000cec:	4294      	cmp	r4, r2
 8000cee:	d902      	bls.n	8000cf6 <__udivmoddi4+0x152>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	f000 80d1 	beq.w	8000e98 <__udivmoddi4+0x2f4>
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	1b12      	subs	r2, r2, r4
 8000cfa:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000cfe:	e79d      	b.n	8000c3c <__udivmoddi4+0x98>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa08 f401 	lsl.w	r4, r8, r1
 8000d0a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	fa28 f806 	lsr.w	r8, r8, r6
 8000d16:	408a      	lsls	r2, r1
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fa1f fc87 	uxth.w	ip, r7
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	fbb8 fef0 	udiv	lr, r8, r0
 8000d2c:	fb00 881e 	mls	r8, r0, lr, r8
 8000d30:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d34:	fb0e f80c 	mul.w	r8, lr, ip
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d90e      	bls.n	8000d5a <__udivmoddi4+0x1b6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0b01 	movcs.w	fp, #1
 8000d48:	f04f 0b00 	movcc.w	fp, #0
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x1b4>
 8000d50:	f1bb 0f00 	cmp.w	fp, #0
 8000d54:	f000 80b8 	beq.w	8000ec8 <__udivmoddi4+0x324>
 8000d58:	46d6      	mov	lr, sl
 8000d5a:	eba4 0408 	sub.w	r4, r4, r8
 8000d5e:	fa1f f883 	uxth.w	r8, r3
 8000d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d66:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d90e      	bls.n	8000d94 <__udivmoddi4+0x1f0>
 8000d76:	193c      	adds	r4, r7, r4
 8000d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d7c:	bf2c      	ite	cs
 8000d7e:	f04f 0801 	movcs.w	r8, #1
 8000d82:	f04f 0800 	movcc.w	r8, #0
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d903      	bls.n	8000d92 <__udivmoddi4+0x1ee>
 8000d8a:	f1b8 0f00 	cmp.w	r8, #0
 8000d8e:	f000 809f 	beq.w	8000ed0 <__udivmoddi4+0x32c>
 8000d92:	4603      	mov	r3, r0
 8000d94:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da0:	4564      	cmp	r4, ip
 8000da2:	4673      	mov	r3, lr
 8000da4:	46e0      	mov	r8, ip
 8000da6:	d302      	bcc.n	8000dae <__udivmoddi4+0x20a>
 8000da8:	d107      	bne.n	8000dba <__udivmoddi4+0x216>
 8000daa:	45f1      	cmp	r9, lr
 8000dac:	d205      	bcs.n	8000dba <__udivmoddi4+0x216>
 8000dae:	ebbe 0302 	subs.w	r3, lr, r2
 8000db2:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000db6:	3801      	subs	r0, #1
 8000db8:	46e0      	mov	r8, ip
 8000dba:	b15d      	cbz	r5, 8000dd4 <__udivmoddi4+0x230>
 8000dbc:	ebb9 0203 	subs.w	r2, r9, r3
 8000dc0:	eb64 0408 	sbc.w	r4, r4, r8
 8000dc4:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e736      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000dd8:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ddc:	0c01      	lsrs	r1, r0, #16
 8000dde:	4614      	mov	r4, r2
 8000de0:	b280      	uxth	r0, r0
 8000de2:	4696      	mov	lr, r2
 8000de4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000de8:	2620      	movs	r6, #32
 8000dea:	4690      	mov	r8, r2
 8000dec:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000df0:	4610      	mov	r0, r2
 8000df2:	fbb1 f1f2 	udiv	r1, r1, r2
 8000df6:	eba3 0308 	sub.w	r3, r3, r8
 8000dfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfe:	e74b      	b.n	8000c98 <__udivmoddi4+0xf4>
 8000e00:	40b7      	lsls	r7, r6
 8000e02:	f1c6 0320 	rsb	r3, r6, #32
 8000e06:	fa01 f206 	lsl.w	r2, r1, r6
 8000e0a:	fa21 f803 	lsr.w	r8, r1, r3
 8000e0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e12:	fa20 f303 	lsr.w	r3, r0, r3
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	40b0      	lsls	r0, r6
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	0c19      	lsrs	r1, r3, #16
 8000e20:	b280      	uxth	r0, r0
 8000e22:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e26:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e2a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e2e:	fb09 f804 	mul.w	r8, r9, r4
 8000e32:	4588      	cmp	r8, r1
 8000e34:	d951      	bls.n	8000eda <__udivmoddi4+0x336>
 8000e36:	1879      	adds	r1, r7, r1
 8000e38:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0a01 	movcs.w	sl, #1
 8000e42:	f04f 0a00 	movcc.w	sl, #0
 8000e46:	4588      	cmp	r8, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000e4a:	f1ba 0f00 	cmp.w	sl, #0
 8000e4e:	d031      	beq.n	8000eb4 <__udivmoddi4+0x310>
 8000e50:	eba1 0108 	sub.w	r1, r1, r8
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	4543      	cmp	r3, r8
 8000e68:	d235      	bcs.n	8000ed6 <__udivmoddi4+0x332>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e70:	bf2c      	ite	cs
 8000e72:	f04f 0a01 	movcs.w	sl, #1
 8000e76:	f04f 0a00 	movcc.w	sl, #0
 8000e7a:	4543      	cmp	r3, r8
 8000e7c:	d2bb      	bcs.n	8000df6 <__udivmoddi4+0x252>
 8000e7e:	f1ba 0f00 	cmp.w	sl, #0
 8000e82:	d1b8      	bne.n	8000df6 <__udivmoddi4+0x252>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443b      	add	r3, r7
 8000e8a:	e7b4      	b.n	8000df6 <__udivmoddi4+0x252>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb68 0203 	sbc.w	r2, r8, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	4696      	mov	lr, r2
 8000e96:	e6eb      	b.n	8000c70 <__udivmoddi4+0xcc>
 8000e98:	443a      	add	r2, r7
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	e72b      	b.n	8000cf8 <__udivmoddi4+0x154>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	443b      	add	r3, r7
 8000ea6:	e710      	b.n	8000cca <__udivmoddi4+0x126>
 8000ea8:	3902      	subs	r1, #2
 8000eaa:	443b      	add	r3, r7
 8000eac:	e6a9      	b.n	8000c02 <__udivmoddi4+0x5e>
 8000eae:	443a      	add	r2, r7
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e6be      	b.n	8000c32 <__udivmoddi4+0x8e>
 8000eb4:	eba7 0808 	sub.w	r8, r7, r8
 8000eb8:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ebc:	4441      	add	r1, r8
 8000ebe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec2:	fb09 f804 	mul.w	r8, r9, r4
 8000ec6:	e7c9      	b.n	8000e5c <__udivmoddi4+0x2b8>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	e744      	b.n	8000d5a <__udivmoddi4+0x1b6>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e75e      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	e78d      	b.n	8000df6 <__udivmoddi4+0x252>
 8000eda:	eba1 0108 	sub.w	r1, r1, r8
 8000ede:	46cc      	mov	ip, r9
 8000ee0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee4:	fb09 f804 	mul.w	r8, r9, r4
 8000ee8:	e7b8      	b.n	8000e5c <__udivmoddi4+0x2b8>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 6dc6 	sub.w	sp, sp, #1584	@ 0x630
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 f8d0 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f906 	bl	800110c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 faac 	bl	800145c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000f04:	f000 f9fe 	bl	8001304 <MX_ICACHE_Init>
  MX_ADC1_Init();
 8000f08:	f000 f952 	bl	80011b0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f0c:	f000 f9c6 	bl	800129c <MX_DAC1_Init>
  MX_UART4_Init();
 8000f10:	f000 fa0c 	bl	800132c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000f14:	f000 fa56 	bl	80013c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t y = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
  uint32_t numero = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
  uint16_t contador = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
  uint32_t buffer[360];
  uint16_t valor_temporal = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
  char msg[128];

  for(uint16_t x=0; x<360; x++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
 8000f36:	e042      	b.n	8000fbe <main+0xce>
	  buffer[x]= (uint16_t)(127 * sin(2*	3.141592 *x/360) + 127); //Adaptar al maximo valor DAC
 8000f38:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff facd 	bl	80004dc <__aeabi_i2d>
 8000f42:	a370      	add	r3, pc, #448	@ (adr r3, 8001104 <main+0x214>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb32 	bl	80005b0 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b61      	ldr	r3, [pc, #388]	@ (80010e0 <main+0x1f0>)
 8000f5a:	f7ff fc53 	bl	8000804 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	ec43 2b17 	vmov	d7, r2, r3
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	eef0 0a67 	vmov.f32	s1, s15
 8000f6e:	f006 fddb 	bl	8007b28 <sin>
 8000f72:	ec51 0b10 	vmov	r0, r1, d0
 8000f76:	a358      	add	r3, pc, #352	@ (adr r3, 80010d8 <main+0x1e8>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fb18 	bl	80005b0 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	a353      	add	r3, pc, #332	@ (adr r3, 80010d8 <main+0x1e8>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff f959 	bl	8000244 <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fdcb 	bl	8000b34 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f8b7 262c 	ldrh.w	r2, [r7, #1580]	@ 0x62c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8000fac:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint16_t x=0; x<360; x++){
 8000fb4:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
 8000fbe:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000fc2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000fc6:	d3b7      	bcc.n	8000f38 <main+0x48>
  }

  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_8B_R, 0x0);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2208      	movs	r2, #8
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4845      	ldr	r0, [pc, #276]	@ (80010e4 <main+0x1f4>)
 8000fd0:	f002 fc4b 	bl	800386a <HAL_DAC_SetValue>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)buffer, 360, DAC_ALIGN_8B_R);
  HAL_UART_Init(&huart4);
 8000fd4:	4844      	ldr	r0, [pc, #272]	@ (80010e8 <main+0x1f8>)
 8000fd6:	f004 fd91 	bl	8005afc <HAL_UART_Init>
  HAL_UART_Init(&huart3);
 8000fda:	4844      	ldr	r0, [pc, #272]	@ (80010ec <main+0x1fc>)
 8000fdc:	f004 fd8e 	bl	8005afc <HAL_UART_Init>
  HAL_ADC_Init(&hadc1);
 8000fe0:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <main+0x200>)
 8000fe2:	f001 faeb 	bl	80025bc <HAL_ADC_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fd94 	bl	8001b14 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 fd91 	bl	8001b14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 fd8e 	bl	8001b14 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fde8 	bl	8001bd0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001000:	4b3c      	ldr	r3, [pc, #240]	@ (80010f4 <main+0x204>)
 8001002:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001006:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001008:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <main+0x204>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800100e:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <main+0x204>)
 8001010:	2200      	movs	r2, #0
 8001012:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001014:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <main+0x204>)
 8001016:	2200      	movs	r2, #0
 8001018:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800101a:	4b36      	ldr	r3, [pc, #216]	@ (80010f4 <main+0x204>)
 800101c:	2200      	movs	r2, #0
 800101e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001020:	4934      	ldr	r1, [pc, #208]	@ (80010f4 <main+0x204>)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 fe90 	bl	8001d48 <BSP_COM_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d045      	beq.n	80010ba <main+0x1ca>
  {
    Error_Handler();
 800102e:	f000 fa45 	bl	80014bc <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* el codigo de pablo lo que hace es guardar en un buffer los puntos de la funcion y usar HAL_DACEx_DualStart_DMA para representar los puntos del buffer,
	  así no hay que repetir los calculos una vez hechos	*/
	  while(contador<360){
 8001032:	e042      	b.n	80010ba <main+0x1ca>

	  valor_temporal = buffer[contador];
 8001034:	f8b7 262e 	ldrh.w	r2, [r7, #1582]	@ 0x62e
 8001038:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 800103c:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_8B_R, buffer[contador]);
 8001048:	f8b7 262e 	ldrh.w	r2, [r7, #1582]	@ 0x62e
 800104c:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8001050:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	2208      	movs	r2, #8
 800105a:	2100      	movs	r1, #0
 800105c:	4821      	ldr	r0, [pc, #132]	@ (80010e4 <main+0x1f4>)
 800105e:	f002 fc04 	bl	800386a <HAL_DAC_SetValue>
	  HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001066:	f001 f88f 	bl	8002188 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800106a:	4821      	ldr	r0, [pc, #132]	@ (80010f0 <main+0x200>)
 800106c:	f001 fbf2 	bl	8002854 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10000);
 8001070:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001074:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <main+0x200>)
 8001076:	f001 fca7 	bl	80029c8 <HAL_ADC_PollForConversion>
	  numero = HAL_ADC_GetValue(&hadc1);
 800107a:	481d      	ldr	r0, [pc, #116]	@ (80010f0 <main+0x200>)
 800107c:	f001 fd7c 	bl	8002b78 <HAL_ADC_GetValue>
 8001080:	f8c7 0624 	str.w	r0, [r7, #1572]	@ 0x624

	  sprintf(msg, "Medido: %lu\r\n",numero);
 8001084:	463b      	mov	r3, r7
 8001086:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 800108a:	491b      	ldr	r1, [pc, #108]	@ (80010f8 <main+0x208>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fd09 	bl	8006aa4 <siprintf>
	  printf(msg);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f005 fcf3 	bl	8006a80 <iprintf>
	  sprintf(msg, "Original: %lu\r\n",valor_temporal);
 800109a:	f8b7 2622 	ldrh.w	r2, [r7, #1570]	@ 0x622
 800109e:	463b      	mov	r3, r7
 80010a0:	4916      	ldr	r1, [pc, #88]	@ (80010fc <main+0x20c>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 fcfe 	bl	8006aa4 <siprintf>
	  printf(msg);
 80010a8:	463b      	mov	r3, r7
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fce8 	bl	8006a80 <iprintf>

	  contador++;
 80010b0:	f8b7 362e 	ldrh.w	r3, [r7, #1582]	@ 0x62e
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
	  while(contador<360){
 80010ba:	f8b7 362e 	ldrh.w	r3, [r7, #1582]	@ 0x62e
 80010be:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80010c2:	d3b7      	bcc.n	8001034 <main+0x144>
	  }
	  sprintf(msg, "FIN");
 80010c4:	463b      	mov	r3, r7
 80010c6:	490e      	ldr	r1, [pc, #56]	@ (8001100 <main+0x210>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fceb 	bl	8006aa4 <siprintf>
	  printf(msg);
 80010ce:	463b      	mov	r3, r7
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fcd5 	bl	8006a80 <iprintf>
	  while(contador<360){
 80010d6:	e7f0      	b.n	80010ba <main+0x1ca>
 80010d8:	00000000 	.word	0x00000000
 80010dc:	405fc000 	.word	0x405fc000
 80010e0:	40768000 	.word	0x40768000
 80010e4:	20000124 	.word	0x20000124
 80010e8:	20000138 	.word	0x20000138
 80010ec:	200001cc 	.word	0x200001cc
 80010f0:	200000bc 	.word	0x200000bc
 80010f4:	200000ac 	.word	0x200000ac
 80010f8:	08008b90 	.word	0x08008b90
 80010fc:	08008ba0 	.word	0x08008ba0
 8001100:	08008bb0 	.word	0x08008bb0
 8001104:	fc8b007a 	.word	0xfc8b007a
 8001108:	401921fa 	.word	0x401921fa

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	@ 0x60
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	2248      	movs	r2, #72	@ 0x48
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 fd27 	bl	8006b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f002 ff74 	bl	800401c <HAL_PWREx_ControlVoltageScaling>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800113a:	f000 f9bf 	bl	80014bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800113e:	2310      	movs	r3, #16
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001142:	2301      	movs	r3, #1
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800114a:	2360      	movs	r3, #96	@ 0x60
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001152:	2301      	movs	r3, #1
 8001154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800115a:	2337      	movs	r3, #55	@ 0x37
 800115c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800115e:	2307      	movs	r3, #7
 8001160:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fff4 	bl	800415c <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800117a:	f000 f99f 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2303      	movs	r3, #3
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2105      	movs	r1, #5
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fcb6 	bl	8004b08 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011a2:	f000 f98b 	bl	80014bc <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3760      	adds	r7, #96	@ 0x60
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <MX_ADC1_Init+0xe4>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_ADC1_Init+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_ADC1_Init+0xe0>)
 8001204:	2201      	movs	r2, #1
 8001206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_ADC1_Init+0xe0>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_ADC1_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_ADC1_Init+0xe0>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_ADC1_Init+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_ADC1_Init+0xe0>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_ADC1_Init+0xe0>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001232:	4817      	ldr	r0, [pc, #92]	@ (8001290 <MX_ADC1_Init+0xe0>)
 8001234:	f001 f9c2 	bl	80025bc <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800123e:	f000 f93d 	bl	80014bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	@ (8001290 <MX_ADC1_Init+0xe0>)
 800124e:	f002 f937 	bl	80034c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001258:	f000 f930 	bl	80014bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_ADC1_Init+0xe8>)
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001260:	2306      	movs	r3, #6
 8001262:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001268:	237f      	movs	r3, #127	@ 0x7f
 800126a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126c:	2304      	movs	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_ADC1_Init+0xe0>)
 800127a:	f001 fc8b 	bl	8002b94 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001284:	f000 f91a 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000bc 	.word	0x200000bc
 8001294:	42028000 	.word	0x42028000
 8001298:	04300002 	.word	0x04300002

0800129c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2228      	movs	r2, #40	@ 0x28
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fc60 	bl	8006b6e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_DAC1_Init+0x60>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <MX_DAC1_Init+0x64>)
 80012b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_DAC1_Init+0x60>)
 80012b6:	f002 fab6 	bl	8003826 <HAL_DAC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012c0:	f000 f8fc 	bl	80014bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80012cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_DAC1_Init+0x60>)
 80012e6:	f002 faeb 	bl	80038c0 <HAL_DAC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80012f0:	f000 f8e4 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000124 	.word	0x20000124
 8001300:	40007400 	.word	0x40007400

08001304 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001308:	2000      	movs	r0, #0
 800130a:	f002 fe49 	bl	8003fa0 <HAL_ICACHE_ConfigAssociativityMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001314:	f000 f8d2 	bl	80014bc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001318:	f002 fe62 	bl	8003fe0 <HAL_ICACHE_Enable>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001322:	f000 f8cb 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_UART4_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <MX_UART4_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_UART4_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <MX_UART4_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_UART4_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_UART4_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_UART4_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_UART4_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_UART4_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <MX_UART4_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_UART4_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <MX_UART4_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	@ (80013bc <MX_UART4_Init+0x90>)
 8001376:	f004 fbc1 	bl	8005afc <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 f89c 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_UART4_Init+0x90>)
 8001388:	f005 f9ee 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 f893 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	@ (80013bc <MX_UART4_Init+0x90>)
 800139a:	f005 fa23 	bl	80067e4 <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 f88a 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_UART4_Init+0x90>)
 80013aa:	f005 f9a4 	bl	80066f6 <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 f882 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000138 	.word	0x20000138
 80013c0:	40004c00 	.word	0x40004c00

080013c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <MX_USART3_UART_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 800140e:	f004 fb75 	bl	8005afc <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001418:	f000 f850 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 8001420:	f005 f9a2 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800142a:	f000 f847 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 8001432:	f005 f9d7 	bl	80067e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f83e 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_USART3_UART_Init+0x90>)
 8001442:	f005 f958 	bl	80066f6 <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f836 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001cc 	.word	0x200001cc
 8001458:	40004800 	.word	0x40004800

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_GPIO_Init+0x5c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_MspInit+0x44>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_MspInit+0x44>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_MspInit+0x44>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <HAL_MspInit+0x44>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fe:	f002 fdf9 	bl	80040f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ae      	sub	sp, #184	@ 0xb8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	2294      	movs	r2, #148	@ 0x94
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fb1c 	bl	8006b6e <memset>
  if(hadc->Instance==ADC1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_ADC_MspInit+0xa8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d137      	bne.n	80015b0 <HAL_ADC_MspInit+0xa0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001540:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001544:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001546:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800154a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fdbc 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800155e:	f7ff ffad 	bl	80014bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 8001568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_ADC_MspInit+0xac>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001592:	2301      	movs	r3, #1
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_ADC_MspInit+0xb0>)
 80015ac:	f002 fb60 	bl	8003c70 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015b0:	bf00      	nop
 80015b2:	37b8      	adds	r7, #184	@ 0xb8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	42028000 	.word	0x42028000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	42020800 	.word	0x42020800

080015c4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <HAL_DAC_MspInit+0x74>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d123      	bne.n	800162e <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_DAC_MspInit+0x78>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	4a14      	ldr	r2, [pc, #80]	@ (800163c <HAL_DAC_MspInit+0x78>)
 80015ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_DAC_MspInit+0x78>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_DAC_MspInit+0x78>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <HAL_DAC_MspInit+0x78>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_DAC_MspInit+0x78>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001616:	2310      	movs	r3, #16
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161a:	2303      	movs	r3, #3
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <HAL_DAC_MspInit+0x7c>)
 800162a:	f002 fb21 	bl	8003c70 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40007400 	.word	0x40007400
 800163c:	40021000 	.word	0x40021000
 8001640:	42020000 	.word	0x42020000

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b0      	sub	sp, #192	@ 0xc0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2294      	movs	r2, #148	@ 0x94
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f005 fa82 	bl	8006b6e <memset>
  if(huart->Instance==UART4)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a42      	ldr	r2, [pc, #264]	@ (8001778 <HAL_UART_MspInit+0x134>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d13b      	bne.n	80016ec <HAL_UART_MspInit+0xa8>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001674:	2308      	movs	r3, #8
 8001676:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fd25 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800168c:	f7ff ff16 	bl	80014bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001690:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	4a39      	ldr	r2, [pc, #228]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001696:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800169a:	6593      	str	r3, [r2, #88]	@ 0x58
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_UART_MspInit+0x138>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	@ (800177c <HAL_UART_MspInit+0x138>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a33      	ldr	r2, [pc, #204]	@ (800177c <HAL_UART_MspInit+0x138>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b31      	ldr	r3, [pc, #196]	@ (800177c <HAL_UART_MspInit+0x138>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016d8:	2308      	movs	r3, #8
 80016da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016e2:	4619      	mov	r1, r3
 80016e4:	4826      	ldr	r0, [pc, #152]	@ (8001780 <HAL_UART_MspInit+0x13c>)
 80016e6:	f002 fac3 	bl	8003c70 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ea:	e040      	b.n	800176e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <HAL_UART_MspInit+0x140>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d13b      	bne.n	800176e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f6:	2304      	movs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fce4 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800170e:	f7ff fed5 	bl	80014bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	4a19      	ldr	r2, [pc, #100]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171c:	6593      	str	r3, [r2, #88]	@ 0x58
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_UART_MspInit+0x138>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_UART_MspInit+0x138>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001742:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800175c:	2307      	movs	r3, #7
 800175e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001766:	4619      	mov	r1, r3
 8001768:	4807      	ldr	r0, [pc, #28]	@ (8001788 <HAL_UART_MspInit+0x144>)
 800176a:	f002 fa81 	bl	8003c70 <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	37c0      	adds	r7, #192	@ 0xc0
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40004c00 	.word	0x40004c00
 800177c:	40021000 	.word	0x40021000
 8001780:	42020000 	.word	0x42020000
 8001784:	40004800 	.word	0x40004800
 8001788:	42020400 	.word	0x42020400

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 fcb1 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}

080017ea <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 fa94 	bl	8001d1c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
  }

  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 facf 	bl	8001df0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
  }
  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f005 f982 	bl	8006c0c <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20030000 	.word	0x20030000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000260 	.word	0x20000260
 800193c:	200004f0 	.word	0x200004f0

08001940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800196a:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001976:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e005      	b.n	8001992 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001986:	4b48      	ldr	r3, [pc, #288]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001992:	4a46      	ldr	r2, [pc, #280]	@ (8001aac <SystemCoreClockUpdate+0x148>)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b42      	ldr	r3, [pc, #264]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d866      	bhi.n	8001a76 <SystemCoreClockUpdate+0x112>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <SystemCoreClockUpdate+0x4c>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019e5 	.word	0x080019e5
 80019b4:	08001a77 	.word	0x08001a77
 80019b8:	08001a77 	.word	0x08001a77
 80019bc:	08001a77 	.word	0x08001a77
 80019c0:	080019ed 	.word	0x080019ed
 80019c4:	08001a77 	.word	0x08001a77
 80019c8:	08001a77 	.word	0x08001a77
 80019cc:	08001a77 	.word	0x08001a77
 80019d0:	080019f5 	.word	0x080019f5
 80019d4:	08001a77 	.word	0x08001a77
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	080019fd 	.word	0x080019fd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80019e4:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	6013      	str	r3, [r2, #0]
      break;
 80019ea:	e048      	b.n	8001a7e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80019ec:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 80019ee:	4a31      	ldr	r2, [pc, #196]	@ (8001ab4 <SystemCoreClockUpdate+0x150>)
 80019f0:	601a      	str	r2, [r3, #0]
      break;
 80019f2:	e044      	b.n	8001a7e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 80019f6:	4a30      	ldr	r2, [pc, #192]	@ (8001ab8 <SystemCoreClockUpdate+0x154>)
 80019f8:	601a      	str	r2, [r3, #0]
      break;
 80019fa:	e040      	b.n	8001a7e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001a06:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	3301      	adds	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <SystemCoreClockUpdate+0xbe>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d006      	beq.n	8001a2e <SystemCoreClockUpdate+0xca>
 8001a20:	e00b      	b.n	8001a3a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <SystemCoreClockUpdate+0x150>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	613b      	str	r3, [r7, #16]
          break;
 8001a2c:	e00b      	b.n	8001a46 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a2e:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <SystemCoreClockUpdate+0x154>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	613b      	str	r3, [r7, #16]
          break;
 8001a38:	e005      	b.n	8001a46 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	613b      	str	r3, [r7, #16]
          break;
 8001a44:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0e5b      	lsrs	r3, r3, #25
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 8001a72:	6013      	str	r3, [r2, #0]
      break;
 8001a74:	e003      	b.n	8001a7e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001a76:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	6013      	str	r3, [r2, #0]
      break;
 8001a7c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <SystemCoreClockUpdate+0x144>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <SystemCoreClockUpdate+0x158>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <SystemCoreClockUpdate+0x14c>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08008bf8 	.word	0x08008bf8
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200
 8001abc:	08008be0 	.word	0x08008be0

08001ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ac4:	f7ff ff3c 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ac8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aca:	e003      	b.n	8001ad4 <LoopCopyDataInit>

08001acc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ace:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ad0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ad2:	3104      	adds	r1, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ad4:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ad8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ada:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001adc:	d3f6      	bcc.n	8001acc <CopyDataInit>
	ldr	r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ae0:	e002      	b.n	8001ae8 <LoopFillZerobss>

08001ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ae2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ae4:	f842 3b04 	str.w	r3, [r2], #4

08001ae8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <LoopForever+0x16>)
	cmp	r2, r3
 8001aea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aec:	d3f9      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001aee:	f005 f893 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af2:	f7ff f9fd 	bl	8000ef0 <main>

08001af6 <LoopForever>:

LoopForever:
    b LoopForever
 8001af6:	e7fe      	b.n	8001af6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001af8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001afc:	08008e80 	.word	0x08008e80
	ldr	r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b04:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8001b08:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8001b0c:	200004ec 	.word	0x200004ec

08001b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC1_2_IRQHandler>
	...

08001b14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10c      	bne.n	8001b3e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b28:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	e01b      	b.n	8001b76 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10c      	bne.n	8001b5e <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b50:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	e00b      	b.n	8001b76 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a18      	ldr	r2, [pc, #96]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <BSP_LED_Init+0xb0>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <BSP_LED_Init+0xb4>)
 8001b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <BSP_LED_Init+0xb8>)
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	f107 0214 	add.w	r2, r7, #20
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 f868 	bl	8003c70 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <BSP_LED_Init+0xb8>)
 8001ba4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <BSP_LED_Init+0xb4>)
 8001bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f002 f9dc 	bl	8003f70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8001be4:	230f      	movs	r3, #15
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <BSP_PB_Init+0x118>)
 8001bea:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8001bec:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <BSP_PB_Init+0x11c>)
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf0 <BSP_PB_Init+0x120>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf0 <BSP_PB_Init+0x120>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf0 <BSP_PB_Init+0x120>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf4 <BSP_PB_Init+0x124>)
 8001c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2302      	movs	r3, #2
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4a34      	ldr	r2, [pc, #208]	@ (8001cf8 <BSP_PB_Init+0x128>)
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	f107 0218 	add.w	r2, r7, #24
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 f81c 	bl	8003c70 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d14f      	bne.n	8001cde <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8001c3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf8 <BSP_PB_Init+0x128>)
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	f107 0218 	add.w	r2, r7, #24
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 f80c 	bl	8003c70 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8001c58:	79fa      	ldrb	r2, [r7, #7]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <BSP_PB_Init+0x12c>)
 8001c64:	441a      	add	r2, r3
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	3330      	adds	r3, #48	@ 0x30
 8001c6c:	443b      	add	r3, r7
 8001c6e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f001 ff9f 	bl	8003bb8 <HAL_EXTI_GetHandle>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d12b      	bne.n	8001cd8 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8001c80:	79fa      	ldrb	r2, [r7, #7]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <BSP_PB_Init+0x12c>)
 8001c8c:	1898      	adds	r0, r3, r2
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3330      	adds	r3, #48	@ 0x30
 8001c94:	443b      	add	r3, r7
 8001c96:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	f001 ff5f 	bl	8003b60 <HAL_EXTI_RegisterCallback>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d113      	bne.n	8001cd0 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a15      	ldr	r2, [pc, #84]	@ (8001d00 <BSP_PB_Init+0x130>)
 8001cac:	56d0      	ldrsb	r0, [r2, r3]
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3330      	adds	r3, #48	@ 0x30
 8001cb4:	443b      	add	r3, r7
 8001cb6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f001 fd7e 	bl	80037be <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <BSP_PB_Init+0x130>)
 8001cc6:	56d3      	ldrsb	r3, [r2, r3]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 fd92 	bl	80037f2 <HAL_NVIC_EnableIRQ>
 8001cce:	e006      	b.n	8001cde <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001cd0:	f06f 0303 	mvn.w	r3, #3
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd6:	e002      	b.n	8001cde <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8001cd8:	f06f 0303 	mvn.w	r3, #3
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	0600000d 	.word	0x0600000d
 8001cec:	08001eed 	.word	0x08001eed
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	20000018 	.word	0x20000018
 8001cf8:	2000001c 	.word	0x2000001c
 8001cfc:	2000038c 	.word	0x2000038c
 8001d00:	20000020 	.word	0x20000020

08001d04 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <BSP_PB_IRQHandler+0x28>)
 8001d32:	4413      	add	r3, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 ff53 	bl	8003be0 <HAL_EXTI_IRQHandler>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000038c 	.word	0x2000038c

08001d48 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d5e:	f06f 0301 	mvn.w	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e03a      	b.n	8001ddc <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	491f      	ldr	r1, [pc, #124]	@ (8001de8 <BSP_COM_Init+0xa0>)
 8001d6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d70:	491e      	ldr	r1, [pc, #120]	@ (8001dec <BSP_COM_Init+0xa4>)
 8001d72:	2094      	movs	r0, #148	@ 0x94
 8001d74:	fb00 f303 	mul.w	r3, r0, r3
 8001d78:	440b      	add	r3, r1
 8001d7a:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2294      	movs	r2, #148	@ 0x94
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <BSP_COM_Init+0xa4>)
 8001d86:	4413      	add	r3, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f8b7 	bl	8001efc <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d123      	bne.n	8001ddc <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d110      	bne.n	8001dbc <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2294      	movs	r2, #148	@ 0x94
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <BSP_COM_Init+0xa4>)
 8001da4:	4413      	add	r3, r2
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f83d 	bl	8001e28 <MX_LPUART1_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8001db4:	f06f 0303 	mvn.w	r3, #3
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e00f      	b.n	8001ddc <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2294      	movs	r2, #148	@ 0x94
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <BSP_COM_Init+0xa4>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f85d 	bl	8001e8a <MX_USART3_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8001dd6:	f06f 0303 	mvn.w	r3, #3
 8001dda:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000024 	.word	0x20000024
 8001dec:	20000264 	.word	0x20000264

08001df0 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <__io_putchar+0x30>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2394      	movs	r3, #148	@ 0x94
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <__io_putchar+0x34>)
 8001e06:	1898      	adds	r0, r3, r2
 8001e08:	1d39      	adds	r1, r7, #4
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f003 fec4 	bl	8005b9c <HAL_UART_Transmit>
  return ch;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000398 	.word	0x20000398
 8001e24:	20000264 	.word	0x20000264

08001e28 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	891b      	ldrh	r3, [r3, #8]
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	895b      	ldrh	r3, [r3, #10]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	899b      	ldrh	r3, [r3, #12]
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e6c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f003 fe3e 	bl	8005afc <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	891b      	ldrh	r3, [r3, #8]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	895b      	ldrh	r3, [r3, #10]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	899b      	ldrh	r3, [r3, #12]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ece:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f003 fe0d 	bl	8005afc <HAL_UART_Init>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff07 	bl	8001d04 <BSP_PB_Callback>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b098      	sub	sp, #96	@ 0x60
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8001f04:	4a60      	ldr	r2, [pc, #384]	@ (8002088 <UART_MspInit+0x18c>)
 8001f06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0e:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8001f12:	4a5d      	ldr	r2, [pc, #372]	@ (8002088 <UART_MspInit+0x18c>)
 8001f14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f1c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8001f20:	4b5a      	ldr	r3, [pc, #360]	@ (800208c <UART_MspInit+0x190>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8001f26:	4b5a      	ldr	r3, [pc, #360]	@ (8002090 <UART_MspInit+0x194>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8001f2c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001f30:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8001f32:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001f36:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a55      	ldr	r2, [pc, #340]	@ (8002094 <UART_MspInit+0x198>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8001f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d132      	bne.n	8001fba <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <UART_MspInit+0x19c>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <UART_MspInit+0x19c>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f60:	4b4d      	ldr	r3, [pc, #308]	@ (8002098 <UART_MspInit+0x19c>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8001f6c:	f002 f8b2 	bl	80040d4 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8001f70:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <UART_MspInit+0x19c>)
 8001f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f74:	4a48      	ldr	r2, [pc, #288]	@ (8002098 <UART_MspInit+0x19c>)
 8001f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7c:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <UART_MspInit+0x19c>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8001f88:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <UART_MspInit+0x19c>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	4a42      	ldr	r2, [pc, #264]	@ (8002098 <UART_MspInit+0x19c>)
 8001f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f94:	4b40      	ldr	r3, [pc, #256]	@ (8002098 <UART_MspInit+0x19c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <UART_MspInit+0x19c>)
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <UART_MspInit+0x19c>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fac:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <UART_MspInit+0x19c>)
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	e023      	b.n	8002002 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8001fba:	4b37      	ldr	r3, [pc, #220]	@ (8002098 <UART_MspInit+0x19c>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a36      	ldr	r2, [pc, #216]	@ (8002098 <UART_MspInit+0x19c>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <UART_MspInit+0x19c>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <UART_MspInit+0x19c>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	4a30      	ldr	r2, [pc, #192]	@ (8002098 <UART_MspInit+0x19c>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <UART_MspInit+0x19c>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <UART_MspInit+0x19c>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <UART_MspInit+0x19c>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff6:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <UART_MspInit+0x19c>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8002002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	3360      	adds	r3, #96	@ 0x60
 800200a:	443b      	add	r3, r7
 800200c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8002010:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002016:	2302      	movs	r3, #2
 8002018:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 800201a:	2301      	movs	r3, #1
 800201c:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 800201e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002022:	3360      	adds	r3, #96	@ 0x60
 8002024:	443b      	add	r3, r7
 8002026:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800202a:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 800202c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	3360      	adds	r3, #96	@ 0x60
 8002034:	443b      	add	r3, r7
 8002036:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800203a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f001 fe15 	bl	8003c70 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8002046:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	3360      	adds	r3, #96	@ 0x60
 800204e:	443b      	add	r3, r7
 8002050:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002054:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8002056:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800205a:	3360      	adds	r3, #96	@ 0x60
 800205c:	443b      	add	r3, r7
 800205e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002062:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8002064:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3360      	adds	r3, #96	@ 0x60
 800206c:	443b      	add	r3, r7
 800206e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002072:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fdf9 	bl	8003c70 <HAL_GPIO_Init>
}
 800207e:	bf00      	nop
 8002080:	3760      	adds	r7, #96	@ 0x60
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	08008bd0 	.word	0x08008bd0
 800208c:	08008bd8 	.word	0x08008bd8
 8002090:	08008bdc 	.word	0x08008bdc
 8002094:	40008000 	.word	0x40008000
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80020a6:	2004      	movs	r0, #4
 80020a8:	f001 fb7e 	bl	80037a8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80020ac:	f7ff fc5a 	bl	8001964 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f80d 	bl	80020d0 <HAL_InitTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	e001      	b.n	80020c6 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020c2:	f7ff fa01 	bl	80014c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c6:	79fb      	ldrb	r3, [r7, #7]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020dc:	4b17      	ldr	r3, [pc, #92]	@ (800213c <HAL_InitTick+0x6c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_InitTick+0x70>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_InitTick+0x6c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 fb87 	bl	800380e <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b07      	cmp	r3, #7
 800210a:	d809      	bhi.n	8002120 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f001 fb53 	bl	80037be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_InitTick+0x74>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e007      	b.n	8002130 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e004      	b.n	8002130 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e001      	b.n	8002130 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000030 	.word	0x20000030
 8002140:	20000000 	.word	0x20000000
 8002144:	2000002c 	.word	0x2000002c

08002148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000030 	.word	0x20000030
 800216c:	2000039c 	.word	0x2000039c

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000039c 	.word	0x2000039c

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000030 	.word	0x20000030

080021d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3360      	adds	r3, #96	@ 0x60
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <LL_ADC_SetOffset+0x44>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	4313      	orrs	r3, r2
 8002268:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	03fff000 	.word	0x03fff000

08002280 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3360      	adds	r3, #96	@ 0x60
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3360      	adds	r3, #96	@ 0x60
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	615a      	str	r2, [r3, #20]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800232e:	b480      	push	{r7}
 8002330:	b087      	sub	sp, #28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3330      	adds	r3, #48	@ 0x30
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	211f      	movs	r1, #31
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 011f 	and.w	r1, r3, #31
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3314      	adds	r3, #20
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0e5b      	lsrs	r3, r3, #25
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0d1b      	lsrs	r3, r3, #20
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2107      	movs	r1, #7
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	401a      	ands	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0d1b      	lsrs	r3, r3, #20
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0318 	and.w	r3, r3, #24
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002400:	40d9      	lsrs	r1, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	400b      	ands	r3, r1
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	0007ffff 	.word	0x0007ffff

08002424 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 031f 	and.w	r3, r3, #31
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002494:	d101      	bne.n	800249a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002508:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <LL_ADC_IsEnabled+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_ADC_IsEnabled+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002556:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800255a:	f043 0204 	orr.w	r2, r3, #4
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d101      	bne.n	8002586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d101      	bne.n	80025ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e12e      	b.n	8002834 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe ff93 	bl	8001510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff3f 	bl	8002480 <LL_ADC_IsDeepPowerDownEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff25 	bl	800245c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff5a 	bl	80024d0 <LL_ADC_IsInternalRegulatorEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff3e 	bl	80024a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800262c:	4b83      	ldr	r3, [pc, #524]	@ (800283c <HAL_ADC_Init+0x280>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	4a83      	ldr	r2, [pc, #524]	@ (8002840 <HAL_ADC_Init+0x284>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff3c 	bl	80024d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff75 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80c7 	bne.w	8002822 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80c3 	bne.w	8002822 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff35 	bl	8002520 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d110      	bne.n	80026de <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026bc:	4861      	ldr	r0, [pc, #388]	@ (8002844 <HAL_ADC_Init+0x288>)
 80026be:	f7ff ff2f 	bl	8002520 <LL_ADC_IsEnabled>
 80026c2:	4604      	mov	r4, r0
 80026c4:	4860      	ldr	r0, [pc, #384]	@ (8002848 <HAL_ADC_Init+0x28c>)
 80026c6:	f7ff ff2b 	bl	8002520 <LL_ADC_IsEnabled>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4323      	orrs	r3, r4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4619      	mov	r1, r3
 80026d8:	485c      	ldr	r0, [pc, #368]	@ (800284c <HAL_ADC_Init+0x290>)
 80026da:	f7ff fd79 	bl	80021d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e5b      	ldrb	r3, [r3, #25]
 80026e2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026ee:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026f4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	3b01      	subs	r3, #1
 8002712:	045b      	lsls	r3, r3, #17
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b44      	ldr	r3, [pc, #272]	@ (8002850 <HAL_ADC_Init+0x294>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	430b      	orrs	r3, r1
 8002748:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff20 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 8002754:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d140      	bne.n	80027de <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d13d      	bne.n	80027de <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7e1b      	ldrb	r3, [r3, #24]
 800276a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002774:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002784:	f023 0306 	bic.w	r3, r3, #6
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002798:	2b01      	cmp	r3, #1
 800279a:	d118      	bne.n	80027ce <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027be:	430a      	orrs	r2, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	e007      	b.n	80027de <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	f023 010f 	bic.w	r1, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80027fe:	e007      	b.n	8002810 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 020f 	bic.w	r2, r2, #15
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002820:	e007      	b.n	8002832 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002832:	7ffb      	ldrb	r3, [r7, #31]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3724      	adds	r7, #36	@ 0x24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	20000000 	.word	0x20000000
 8002840:	053e2d63 	.word	0x053e2d63
 8002844:	42028000 	.word	0x42028000
 8002848:	42028100 	.word	0x42028100
 800284c:	42028300 	.word	0x42028300
 8002850:	fff0c007 	.word	0xfff0c007

08002854 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800285c:	4857      	ldr	r0, [pc, #348]	@ (80029bc <HAL_ADC_Start+0x168>)
 800285e:	f7ff fde1 	bl	8002424 <LL_ADC_GetMultimode>
 8002862:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe80 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 809c 	bne.w	80029ae <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_ADC_Start+0x30>
 8002880:	2302      	movs	r3, #2
 8002882:	e097      	b.n	80029b4 <HAL_ADC_Start+0x160>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fd6b 	bl	8003368 <ADC_Enable>
 8002892:	4603      	mov	r3, r0
 8002894:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 8083 	bne.w	80029a4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a42      	ldr	r2, [pc, #264]	@ (80029c0 <HAL_ADC_Start+0x16c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_Start+0x6e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	e000      	b.n	80028c4 <HAL_ADC_Start+0x70>
 80028c2:	4b40      	ldr	r3, [pc, #256]	@ (80029c4 <HAL_ADC_Start+0x170>)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d002      	beq.n	80028d2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	f023 0206 	bic.w	r2, r3, #6
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028f8:	e002      	b.n	8002900 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	221c      	movs	r2, #28
 8002906:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2a      	ldr	r2, [pc, #168]	@ (80029c0 <HAL_ADC_Start+0x16c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d002      	beq.n	8002920 <HAL_ADC_Start+0xcc>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e000      	b.n	8002922 <HAL_ADC_Start+0xce>
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_ADC_Start+0x170>)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	d008      	beq.n	800293c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d002      	beq.n	800293c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d114      	bne.n	8002966 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002952:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fdf1 	bl	8002546 <LL_ADC_REG_StartConversion>
 8002964:	e025      	b.n	80029b2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_ADC_Start+0x16c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d002      	beq.n	8002982 <HAL_ADC_Start+0x12e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e000      	b.n	8002984 <HAL_ADC_Start+0x130>
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_ADC_Start+0x170>)
 8002984:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00f      	beq.n	80029b2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800299a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80029a2:	e006      	b.n	80029b2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80029ac:	e001      	b.n	80029b2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	42028300 	.word	0x42028300
 80029c0:	42028100 	.word	0x42028100
 80029c4:	42028000 	.word	0x42028000

080029c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d2:	4866      	ldr	r0, [pc, #408]	@ (8002b6c <HAL_ADC_PollForConversion+0x1a4>)
 80029d4:	f7ff fd26 	bl	8002424 <LL_ADC_GetMultimode>
 80029d8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d102      	bne.n	80029e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029e2:	2308      	movs	r3, #8
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e02a      	b.n	8002a3e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d002      	beq.n	80029fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	d111      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0a4      	b.n	8002b62 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a18:	2304      	movs	r3, #4
 8002a1a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a1c:	e00f      	b.n	8002a3e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a1e:	4853      	ldr	r0, [pc, #332]	@ (8002b6c <HAL_ADC_PollForConversion+0x1a4>)
 8002a20:	f7ff fd0e 	bl	8002440 <LL_ADC_GetMultiDMATransfer>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e093      	b.n	8002b62 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a3e:	f7ff fb97 	bl	8002170 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a44:	e021      	b.n	8002a8a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d01d      	beq.n	8002a8a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a4e:	f7ff fb8f 	bl	8002170 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <HAL_ADC_PollForConversion+0x9c>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d112      	bne.n	8002a8a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e06b      	b.n	8002b62 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0d6      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fc2d 	bl	8002308 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e5b      	ldrb	r3, [r3, #25]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d118      	bne.n	8002aee <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_ADC_PollForConversion+0x1a8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d002      	beq.n	8002afe <HAL_ADC_PollForConversion+0x136>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_PollForConversion+0x138>
 8002afe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_ADC_PollForConversion+0x1ac>)
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d008      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d104      	bne.n	8002b24 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e00c      	b.n	8002b3e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_ADC_PollForConversion+0x1a8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_ADC_PollForConversion+0x16c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_PollForConversion+0x16e>
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_ADC_PollForConversion+0x1ac>)
 8002b36:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d104      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e008      	b.n	8002b60 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	220c      	movs	r2, #12
 8002b5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	42028300 	.word	0x42028300
 8002b70:	42028100 	.word	0x42028100
 8002b74:	42028000 	.word	0x42028000

08002b78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b0b7      	sub	sp, #220	@ 0xdc
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x22>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e3c1      	b.n	800333a <HAL_ADC_ConfigChannel+0x7a6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fcd3 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 83a6 	bne.w	800331c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f7ff fba6 	bl	800232e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fcc1 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002bec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fccd 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 8002bfa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 81c1 	bne.w	8002f8a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 81bc 	bne.w	8002f8a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c1a:	d10f      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff fbad 	bl	8002386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fb54 	bl	80022e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c3a:	e00e      	b.n	8002c5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f7ff fb9c 	bl	8002386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fb44 	bl	80022e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00a      	beq.n	8002c92 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6919      	ldr	r1, [r3, #16]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c8c:	f7ff fad4 	bl	8002238 <LL_ADC_SetOffset>
 8002c90:	e17b      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff faf1 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x12a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fae6 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	e01e      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x168>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fadb 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	e004      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x180>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	e018      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1b2>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e004      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d106      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff faaa 	bl	80022ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa8e 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1f0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fa83 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 021f 	and.w	r2, r3, #31
 8002d82:	e01e      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x22e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fa78 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e004      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x246>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	e018      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x278>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fa47 	bl	80022ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa2b 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x2b6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa20 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	e01e      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x2f4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fa15 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e004      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x30c>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	e016      	b.n	8002ece <HAL_ADC_ConfigChannel+0x33a>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e004      	b.n	8002ece <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f9e6 	bl	80022ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f9ca 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x378>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2103      	movs	r1, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f9bf 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	f003 021f 	and.w	r2, r3, #31
 8002f0a:	e017      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x3a8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2103      	movs	r1, #3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f9b4 	bl	8002280 <LL_ADC_GetOffsetChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f26:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e003      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x3c0>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	e011      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x3e4>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d106      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2103      	movs	r1, #3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f991 	bl	80022ac <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fac6 	bl	8002520 <LL_ADC_IsEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 81c9 	bne.w	800332e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f7ff fa17 	bl	80023dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80031f0 <HAL_ADC_ConfigChannel+0x65c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	f040 8131 	bne.w	800321c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x44e>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	bf94      	ite	ls
 8002fda:	2301      	movls	r3, #1
 8002fdc:	2300      	movhi	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e019      	b.n	8003016 <HAL_ADC_ConfigChannel+0x482>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e003      	b.n	8003006 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2b09      	cmp	r3, #9
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003016:	2b00      	cmp	r3, #0
 8003018:	d079      	beq.n	800310e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x4a2>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	3301      	adds	r3, #1
 800302e:	069b      	lsls	r3, r3, #26
 8003030:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003034:	e015      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4ce>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003046:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3301      	adds	r3, #1
 800305c:	069b      	lsls	r3, r3, #26
 800305e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4ee>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	3301      	adds	r3, #1
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	e017      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x51e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800309e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x544>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 021f 	and.w	r2, r3, #31
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	051b      	lsls	r3, r3, #20
 80030d6:	e018      	b.n	800310a <HAL_ADC_ConfigChannel+0x576>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	e003      	b.n	80030fc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80030f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310a:	430b      	orrs	r3, r1
 800310c:	e081      	b.n	8003212 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_ADC_ConfigChannel+0x596>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	3301      	adds	r3, #1
 8003122:	069b      	lsls	r3, r3, #26
 8003124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003128:	e015      	b.n	8003156 <HAL_ADC_ConfigChannel+0x5c2>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	069b      	lsls	r3, r3, #26
 8003152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x5e2>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	3301      	adds	r3, #1
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	e017      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x612>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	61fb      	str	r3, [r7, #28]
  return result;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	ea42 0103 	orr.w	r1, r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x63e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	f003 021f 	and.w	r2, r3, #31
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	3b1e      	subs	r3, #30
 80031ca:	051b      	lsls	r3, r3, #20
 80031cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031d0:	e01e      	b.n	8003210 <HAL_ADC_ConfigChannel+0x67c>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	613b      	str	r3, [r7, #16]
  return result;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e006      	b.n	80031fc <HAL_ADC_ConfigChannel+0x668>
 80031ee:	bf00      	nop
 80031f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f003 021f 	and.w	r2, r3, #31
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	3b1e      	subs	r3, #30
 800320a:	051b      	lsls	r3, r3, #20
 800320c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003210:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003216:	4619      	mov	r1, r3
 8003218:	f7ff f8b5 	bl	8002386 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b48      	ldr	r3, [pc, #288]	@ (8003344 <HAL_ADC_ConfigChannel+0x7b0>)
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8082 	beq.w	800332e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800322a:	4847      	ldr	r0, [pc, #284]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b4>)
 800322c:	f7fe fff6 	bl	800221c <LL_ADC_GetCommonPathInternalCh>
 8003230:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003234:	4845      	ldr	r0, [pc, #276]	@ (800334c <HAL_ADC_ConfigChannel+0x7b8>)
 8003236:	f7ff f973 	bl	8002520 <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	4844      	ldr	r0, [pc, #272]	@ (8003350 <HAL_ADC_ConfigChannel+0x7bc>)
 800323e:	f7ff f96f 	bl	8002520 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	4323      	orrs	r3, r4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d15e      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <HAL_ADC_ConfigChannel+0x7c0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d127      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d121      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a39      	ldr	r2, [pc, #228]	@ (800334c <HAL_ADC_ConfigChannel+0x7b8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d161      	bne.n	800332e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800326e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003272:	4619      	mov	r1, r3
 8003274:	4834      	ldr	r0, [pc, #208]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b4>)
 8003276:	f7fe ffbe 	bl	80021f6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327a:	4b37      	ldr	r3, [pc, #220]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_ADC_ConfigChannel+0x7c8>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003292:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003294:	e002      	b.n	800329c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b01      	subs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f9      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032a2:	e044      	b.n	800332e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <HAL_ADC_ConfigChannel+0x7cc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d113      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a23      	ldr	r2, [pc, #140]	@ (800334c <HAL_ADC_ConfigChannel+0x7b8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d134      	bne.n	800332e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032cc:	4619      	mov	r1, r3
 80032ce:	481e      	ldr	r0, [pc, #120]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b4>)
 80032d0:	f7fe ff91 	bl	80021f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032d4:	e02b      	b.n	800332e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a22      	ldr	r2, [pc, #136]	@ (8003364 <HAL_ADC_ConfigChannel+0x7d0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d126      	bne.n	800332e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d120      	bne.n	800332e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a16      	ldr	r2, [pc, #88]	@ (800334c <HAL_ADC_ConfigChannel+0x7b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d11b      	bne.n	800332e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032fe:	4619      	mov	r1, r3
 8003300:	4811      	ldr	r0, [pc, #68]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b4>)
 8003302:	f7fe ff78 	bl	80021f6 <LL_ADC_SetCommonPathInternalCh>
 8003306:	e012      	b.n	800332e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800331a:	e008      	b.n	800332e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003336:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800333a:	4618      	mov	r0, r3
 800333c:	37dc      	adds	r7, #220	@ 0xdc
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}
 8003342:	bf00      	nop
 8003344:	80080000 	.word	0x80080000
 8003348:	42028300 	.word	0x42028300
 800334c:	42028000 	.word	0x42028000
 8003350:	42028100 	.word	0x42028100
 8003354:	c7520000 	.word	0xc7520000
 8003358:	20000000 	.word	0x20000000
 800335c:	053e2d63 	.word	0x053e2d63
 8003360:	cb840000 	.word	0xcb840000
 8003364:	80000001 	.word	0x80000001

08003368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f8d1 	bl	8002520 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d169      	bne.n	8003458 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <ADC_Enable+0xfc>)
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e055      	b.n	800345a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f8a0 	bl	80024f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033b8:	482b      	ldr	r0, [pc, #172]	@ (8003468 <ADC_Enable+0x100>)
 80033ba:	f7fe ff2f 	bl	800221c <LL_ADC_GetCommonPathInternalCh>
 80033be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c8:	4b28      	ldr	r3, [pc, #160]	@ (800346c <ADC_Enable+0x104>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	4a28      	ldr	r2, [pc, #160]	@ (8003470 <ADC_Enable+0x108>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033e2:	e002      	b.n	80033ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033f0:	f7fe febe 	bl	8002170 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f6:	e028      	b.n	800344a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff f88f 	bl	8002520 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f873 	bl	80024f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003412:	f7fe fead 	bl	8002170 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d914      	bls.n	800344a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d00d      	beq.n	800344a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f043 0210 	orr.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d1cf      	bne.n	80033f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	8000003f 	.word	0x8000003f
 8003468:	42028300 	.word	0x42028300
 800346c:	20000000 	.word	0x20000000
 8003470:	053e2d63 	.word	0x053e2d63

08003474 <LL_ADC_IsEnabled>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <LL_ADC_IsEnabled+0x18>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <LL_ADC_IsEnabled+0x1a>
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_ADC_REG_IsConversionOngoing>:
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d101      	bne.n	80034b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b0a1      	sub	sp, #132	@ 0x84
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e089      	b.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034e6:	2300      	movs	r3, #0
 80034e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034ea:	2300      	movs	r3, #0
 80034ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034f8:	4b41      	ldr	r3, [pc, #260]	@ (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e001      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e068      	b.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffb9 	bl	800349a <LL_ADC_REG_IsConversionOngoing>
 8003528:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffb3 	bl	800349a <LL_ADC_REG_IsConversionOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d14a      	bne.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800353a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800353c:	2b00      	cmp	r3, #0
 800353e:	d147      	bne.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003540:	4b30      	ldr	r3, [pc, #192]	@ (8003604 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003542:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d027      	beq.n	800359c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800354c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800355e:	035b      	lsls	r3, r3, #13
 8003560:	430b      	orrs	r3, r1
 8003562:	431a      	orrs	r2, r3
 8003564:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003566:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003568:	4824      	ldr	r0, [pc, #144]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800356a:	f7ff ff83 	bl	8003474 <LL_ADC_IsEnabled>
 800356e:	4604      	mov	r4, r0
 8003570:	4823      	ldr	r0, [pc, #140]	@ (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003572:	f7ff ff7f 	bl	8003474 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	4323      	orrs	r3, r4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d132      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800357e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003586:	f023 030f 	bic.w	r3, r3, #15
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	430a      	orrs	r2, r1
 8003594:	431a      	orrs	r2, r3
 8003596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003598:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800359a:	e023      	b.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800359c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a8:	4814      	ldr	r0, [pc, #80]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80035aa:	f7ff ff63 	bl	8003474 <LL_ADC_IsEnabled>
 80035ae:	4604      	mov	r4, r0
 80035b0:	4813      	ldr	r0, [pc, #76]	@ (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035b2:	f7ff ff5f 	bl	8003474 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4323      	orrs	r3, r4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d112      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035c6:	f023 030f 	bic.w	r3, r3, #15
 80035ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035ce:	e009      	b.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035e2:	e000      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80035ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3784      	adds	r7, #132	@ 0x84
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	42028000 	.word	0x42028000
 8003600:	42028100 	.word	0x42028100
 8003604:	42028300 	.word	0x42028300

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363a:	4a04      	ldr	r2, [pc, #16]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	60d3      	str	r3, [r2, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	@ (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	@ (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	0152      	lsls	r2, r2, #5
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	@ (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0152      	lsls	r2, r2, #5
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	@ 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b03      	cmp	r3, #3
 8003718:	bf28      	it	cs
 800371a:	2303      	movcs	r3, #3
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3303      	adds	r3, #3
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b04      	subs	r3, #4
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
         );
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	@ 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003774:	d301      	bcc.n	800377a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003776:	2301      	movs	r3, #1
 8003778:	e00f      	b.n	800379a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377a:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <SysTick_Config+0x40>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003782:	2107      	movs	r1, #7
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	f7ff ff8e 	bl	80036a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <SysTick_Config+0x40>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <SysTick_Config+0x40>)
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff29 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff40 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff90 	bl	80036fc <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5f 	bl	80036a8 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff33 	bl	800366c <__NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa4 	bl	8003764 <SysTick_Config>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e014      	b.n	8003862 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	791b      	ldrb	r3, [r3, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fd febb 	bl	80015c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800386a:	b480      	push	{r7}
 800386c:	b087      	sub	sp, #28
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e015      	b.n	80038b2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	3308      	adds	r3, #8
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e004      	b.n	80038a8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3314      	adds	r3, #20
 80038a6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	461a      	mov	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t pclk1freq;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_DAC_ConfigChannel+0x1e>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e137      	b.n	8003b52 <HAL_DAC_ConfigChannel+0x292>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_DAC_ConfigChannel+0x2e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e131      	b.n	8003b52 <HAL_DAC_ConfigChannel+0x292>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d17a      	bne.n	80039f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003902:	f7fe fc35 	bl	8002170 <HAL_GetTick>
 8003906:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d13d      	bne.n	800398a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800390e:	e018      	b.n	8003942 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003910:	f7fe fc2e 	bl	8002170 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d911      	bls.n	8003942 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f043 0208 	orr.w	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2203      	movs	r2, #3
 800393c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e107      	b.n	8003b52 <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1df      	bne.n	8003910 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	69d2      	ldr	r2, [r2, #28]
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40
 800395a:	e020      	b.n	800399e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800395c:	f7fe fc08 	bl	8002170 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d90f      	bls.n	800398a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	2b00      	cmp	r3, #0
 8003972:	da0a      	bge.n	800398a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f043 0208 	orr.w	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2203      	movs	r2, #3
 8003984:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0e3      	b.n	8003b52 <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003990:	2b00      	cmp	r3, #0
 8003992:	dbe3      	blt.n	800395c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	69d2      	ldr	r2, [r2, #28]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	ea02 0103 	and.w	r1, r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	409a      	lsls	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	21ff      	movs	r1, #255	@ 0xff
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	ea02 0103 	and.w	r1, r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	409a      	lsls	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d11d      	bne.n	8003a3c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	221f      	movs	r2, #31
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a18:	4013      	ands	r3, r2
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2207      	movs	r2, #7
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a54:	4013      	ands	r3, r2
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003abc:	4013      	ands	r3, r2
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	d104      	bne.n	8003aec <HAL_DAC_ConfigChannel+0x22c>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	e018      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x25e>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_DAC_ConfigChannel+0x23e>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afc:	e00f      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x25e>
    }
    else /* Automatic selection */
    {
      pclk1freq  = HAL_RCC_GetPCLK1Freq();
 8003afe:	f001 f9ed 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8003b02:	6178      	str	r0, [r7, #20]
      if (pclk1freq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <HAL_DAC_ConfigChannel+0x29c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d904      	bls.n	8003b16 <HAL_DAC_ConfigChannel+0x256>
      {
        /* High frequency enable when PCLK frequency higher than 80   */
        tmpreg1 |= DAC_CR_HFSEL;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e003      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x25e>
      }
      else
      {
        /* High frequency disable when PCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6819      	ldr	r1, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	22c0      	movs	r2, #192	@ 0xc0
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	400a      	ands	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	@ 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	04c4b400 	.word	0x04c4b400

08003b60 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d011      	beq.n	8003b9c <HAL_EXTI_RegisterCallback+0x3c>
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	dc13      	bgt.n	8003ba4 <HAL_EXTI_RegisterCallback+0x44>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_EXTI_RegisterCallback+0x26>
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d007      	beq.n	8003b94 <HAL_EXTI_RegisterCallback+0x34>
 8003b84:	e00e      	b.n	8003ba4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
      break;
 8003b92:	e00a      	b.n	8003baa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	605a      	str	r2, [r3, #4]
      break;
 8003b9a:	e006      	b.n	8003baa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	bf00      	nop
  }

  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e003      	b.n	8003bd4 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <HAL_EXTI_IRQHandler+0x88>)
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <HAL_EXTI_IRQHandler+0x8c>)
 8003c38:	4413      	add	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4798      	blx	r3
    }
  }
}
 8003c60:	bf00      	nop
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	4002f40c 	.word	0x4002f40c
 8003c6c:	4002f410 	.word	0x4002f410

08003c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c7e:	e158      	b.n	8003f32 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 814a 	beq.w	8003f2c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d005      	beq.n	8003cb0 <HAL_GPIO_Init+0x40>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d130      	bne.n	8003d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0201 	and.w	r2, r3, #1
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d017      	beq.n	8003d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d123      	bne.n	8003da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	6939      	ldr	r1, [r7, #16]
 8003d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0203 	and.w	r2, r3, #3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a4 	beq.w	8003f2c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003de4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3318      	adds	r3, #24
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_GPIO_Init+0x2e4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d025      	beq.n	8003e5c <HAL_GPIO_Init+0x1ec>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a51      	ldr	r2, [pc, #324]	@ (8003f58 <HAL_GPIO_Init+0x2e8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01f      	beq.n	8003e58 <HAL_GPIO_Init+0x1e8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a50      	ldr	r2, [pc, #320]	@ (8003f5c <HAL_GPIO_Init+0x2ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d019      	beq.n	8003e54 <HAL_GPIO_Init+0x1e4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4f      	ldr	r2, [pc, #316]	@ (8003f60 <HAL_GPIO_Init+0x2f0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_GPIO_Init+0x1e0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <HAL_GPIO_Init+0x2f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1dc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a4d      	ldr	r2, [pc, #308]	@ (8003f68 <HAL_GPIO_Init+0x2f8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1d8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a4c      	ldr	r2, [pc, #304]	@ (8003f6c <HAL_GPIO_Init+0x2fc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1d4>
 8003e40:	2306      	movs	r3, #6
 8003e42:	e00c      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e00a      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e48:	2305      	movs	r3, #5
 8003e4a:	e008      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e006      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e50:	2303      	movs	r3, #3
 8003e52:	e004      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e002      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_GPIO_Init+0x1ee>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	f002 0203 	and.w	r2, r2, #3
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	4093      	lsls	r3, r2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003e6e:	4938      	ldr	r1, [pc, #224]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3318      	adds	r3, #24
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e7c:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eca:	4a21      	ldr	r2, [pc, #132]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003efe:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <HAL_GPIO_Init+0x2e0>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f ae9f 	bne.w	8003c80 <HAL_GPIO_Init+0x10>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	4002f400 	.word	0x4002f400
 8003f54:	42020000 	.word	0x42020000
 8003f58:	42020400 	.word	0x42020400
 8003f5c:	42020800 	.word	0x42020800
 8003f60:	42020c00 	.word	0x42020c00
 8003f64:	42021000 	.word	0x42021000
 8003f68:	42021400 	.word	0x42021400
 8003f6c:	42021800 	.word	0x42021800

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003fac:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e007      	b.n	8003fce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0204 	bic.w	r2, r3, #4
 8003fc6:	4905      	ldr	r1, [pc, #20]	@ (8003fdc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40030400 	.word	0x40030400

08003fe0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_ICACHE_Enable+0x1c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <HAL_ICACHE_Enable+0x1c>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40030400 	.word	0x40030400

08004000 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <HAL_PWREx_GetVoltageRange+0x18>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000

0800401c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004024:	4b27      	ldr	r3, [pc, #156]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800402c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800402e:	f000 f871 	bl	8004114 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004032:	4603      	mov	r3, r0
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004038:	d101      	bne.n	800403e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e03e      	b.n	80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800403e:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404a:	d101      	bne.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e035      	b.n	80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d101      	bne.n	800405c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e02f      	b.n	80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800405c:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004064:	4917      	ldr	r1, [pc, #92]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800406c:	4b16      	ldr	r3, [pc, #88]	@ (80040c8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	2232      	movs	r2, #50	@ 0x32
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	4a13      	ldr	r2, [pc, #76]	@ (80040d0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	08db      	lsrs	r3, r3, #3
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408c:	e002      	b.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b01      	subs	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a0:	d102      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f2      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b4:	d101      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e000      	b.n	80040bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40007000 	.word	0x40007000
 80040c8:	20000000 	.word	0x20000000
 80040cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80040d0:	cccccccd 	.word	0xcccccccd

080040d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040e2:	6053      	str	r3, [r2, #4]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004102:	6093      	str	r3, [r2, #8]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800412a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	e00a      	b.n	8004148 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800413c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	e001      	b.n	8004148 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004144:	2300      	movs	r3, #0
 8004146:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004148:	687b      	ldr	r3, [r7, #4]
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f000 bcc2 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004170:	4b99      	ldr	r3, [pc, #612]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417a:	4b97      	ldr	r3, [pc, #604]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80e9 	beq.w	8004364 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <HAL_RCC_OscConfig+0x4a>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	f040 8083 	bne.w	80042a6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d17f      	bne.n	80042a6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041a6:	4b8c      	ldr	r3, [pc, #560]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <HAL_RCC_OscConfig+0x64>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f000 bc9a 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c4:	4b84      	ldr	r3, [pc, #528]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCC_OscConfig+0x7e>
 80041d0:	4b81      	ldr	r3, [pc, #516]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d8:	e005      	b.n	80041e6 <HAL_RCC_OscConfig+0x8a>
 80041da:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d224      	bcs.n	8004234 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fe9c 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f000 bc7a 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004200:	4b75      	ldr	r3, [pc, #468]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a74      	ldr	r2, [pc, #464]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b72      	ldr	r3, [pc, #456]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	496f      	ldr	r1, [pc, #444]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421e:	4b6e      	ldr	r3, [pc, #440]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	496a      	ldr	r1, [pc, #424]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
 8004232:	e026      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004234:	4b68      	ldr	r3, [pc, #416]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a67      	ldr	r2, [pc, #412]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800423a:	f043 0308 	orr.w	r3, r3, #8
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b65      	ldr	r3, [pc, #404]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	4962      	ldr	r1, [pc, #392]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004252:	4b61      	ldr	r3, [pc, #388]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	495d      	ldr	r1, [pc, #372]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fe5b 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f000 bc39 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004282:	f000 fe17 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004286:	4603      	mov	r3, r0
 8004288:	4a54      	ldr	r2, [pc, #336]	@ (80043dc <HAL_RCC_OscConfig+0x280>)
 800428a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800428c:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <HAL_RCC_OscConfig+0x284>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd ff1d 	bl	80020d0 <HAL_InitTick>
 8004296:	4603      	mov	r3, r0
 8004298:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d060      	beq.n	8004362 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	f000 bc27 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d039      	beq.n	8004322 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042ae:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a49      	ldr	r2, [pc, #292]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ba:	f7fd ff59 	bl	8002170 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c0:	e00f      	b.n	80042e2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c2:	f7fd ff55 	bl	8002170 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d908      	bls.n	80042e2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d0:	4b41      	ldr	r3, [pc, #260]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	f000 bc09 	b.w	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e2:	4b3d      	ldr	r3, [pc, #244]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0e9      	beq.n	80042c2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ee:	4b3a      	ldr	r3, [pc, #232]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a39      	ldr	r2, [pc, #228]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042f4:	f043 0308 	orr.w	r3, r3, #8
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	4934      	ldr	r1, [pc, #208]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430c:	4b32      	ldr	r3, [pc, #200]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	492f      	ldr	r1, [pc, #188]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
 8004320:	e020      	b.n	8004364 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004322:	4b2d      	ldr	r3, [pc, #180]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2c      	ldr	r2, [pc, #176]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800432e:	f7fd ff1f 	bl	8002170 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004336:	f7fd ff1b 	bl	8002170 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004344:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e3cf      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004354:	4b20      	ldr	r3, [pc, #128]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x1da>
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004362:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d07e      	beq.n	800446e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b08      	cmp	r3, #8
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x226>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d10e      	bne.n	800439a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d10b      	bne.n	800439a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004382:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d06e      	beq.n	800446c <HAL_RCC_OscConfig+0x310>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d16a      	bne.n	800446c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e3ac      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x256>
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0b      	ldr	r2, [pc, #44]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e024      	b.n	80043fc <HAL_RCC_OscConfig+0x2a0>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ba:	d113      	bne.n	80043e4 <HAL_RCC_OscConfig+0x288>
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a05      	ldr	r2, [pc, #20]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a02      	ldr	r2, [pc, #8]	@ (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e012      	b.n	80043fc <HAL_RCC_OscConfig+0x2a0>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	20000000 	.word	0x20000000
 80043e0:	2000002c 	.word	0x2000002c
 80043e4:	4b8b      	ldr	r3, [pc, #556]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a8a      	ldr	r2, [pc, #552]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b88      	ldr	r3, [pc, #544]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a87      	ldr	r2, [pc, #540]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd feb4 	bl	8002170 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440a:	e00e      	b.n	800442a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd feb0 	bl	8002170 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d907      	bls.n	800442a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441a:	4b7e      	ldr	r3, [pc, #504]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e364      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442a:	4b7a      	ldr	r3, [pc, #488]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ea      	beq.n	800440c <HAL_RCC_OscConfig+0x2b0>
 8004436:	e01a      	b.n	800446e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fe9a 	bl	8002170 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	e00e      	b.n	800445e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fe96 	bl	8002170 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d907      	bls.n	800445e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444e:	4b71      	ldr	r3, [pc, #452]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e34a      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	4b6d      	ldr	r3, [pc, #436]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ea      	bne.n	8004440 <HAL_RCC_OscConfig+0x2e4>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d06c      	beq.n	8004554 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x330>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d119      	bne.n	80044ba <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d116      	bne.n	80044ba <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_OscConfig+0x348>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e327      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	4958      	ldr	r1, [pc, #352]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b8:	e04c      	b.n	8004554 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d029      	beq.n	8004516 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c2:	4b54      	ldr	r3, [pc, #336]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a53      	ldr	r2, [pc, #332]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fd fe4f 	bl	8002170 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d4:	e00e      	b.n	80044f4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fd fe4b 	bl	8002170 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d907      	bls.n	80044f4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e2ff      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ea      	beq.n	80044d6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b44      	ldr	r3, [pc, #272]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	4941      	ldr	r1, [pc, #260]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	e01e      	b.n	8004554 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a3e      	ldr	r2, [pc, #248]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd fe25 	bl	8002170 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004528:	e00e      	b.n	8004548 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452a:	f7fd fe21 	bl	8002170 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d907      	bls.n	8004548 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004538:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e2d5      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004548:	4b32      	ldr	r3, [pc, #200]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ea      	bne.n	800452a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d062      	beq.n	8004626 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d038      	beq.n	80045da <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004570:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004576:	4a27      	ldr	r2, [pc, #156]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004578:	f023 0310 	bic.w	r3, r3, #16
 800457c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004580:	e007      	b.n	8004592 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004582:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f043 0310 	orr.w	r3, r3, #16
 800458e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	4b20      	ldr	r3, [pc, #128]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004598:	4a1e      	ldr	r2, [pc, #120]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fd fde5 	bl	8002170 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a8:	e00f      	b.n	80045ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fd fde1 	bl	8002170 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b07      	cmp	r3, #7
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b8:	4b16      	ldr	r3, [pc, #88]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e294      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0e8      	beq.n	80045aa <HAL_RCC_OscConfig+0x44e>
 80045d8:	e025      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045da:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fd fdc1 	bl	8002170 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f0:	e012      	b.n	8004618 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fd fdbd 	bl	8002170 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	d90b      	bls.n	8004618 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004600:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e270      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004618:	4ba8      	ldr	r3, [pc, #672]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 812d 	beq.w	800488e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004638:	4ba0      	ldr	r3, [pc, #640]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b9d      	ldr	r3, [pc, #628]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	4a9c      	ldr	r2, [pc, #624]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004650:	4b9a      	ldr	r3, [pc, #616]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465c:	2301      	movs	r3, #1
 800465e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004660:	4b97      	ldr	r3, [pc, #604]	@ (80048c0 <HAL_RCC_OscConfig+0x764>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11e      	bne.n	80046aa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466c:	4b94      	ldr	r3, [pc, #592]	@ (80048c0 <HAL_RCC_OscConfig+0x764>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a93      	ldr	r2, [pc, #588]	@ (80048c0 <HAL_RCC_OscConfig+0x764>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004676:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004678:	f7fd fd7a 	bl	8002170 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467e:	e00e      	b.n	800469e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004680:	f7fd fd76 	bl	8002170 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d907      	bls.n	800469e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468e:	4b8c      	ldr	r3, [pc, #560]	@ (80048c0 <HAL_RCC_OscConfig+0x764>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e22a      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469e:	4b88      	ldr	r3, [pc, #544]	@ (80048c0 <HAL_RCC_OscConfig+0x764>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ea      	beq.n	8004680 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01f      	beq.n	80046f6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046c2:	4b7e      	ldr	r3, [pc, #504]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	4a7c      	ldr	r2, [pc, #496]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046d2:	4b7a      	ldr	r3, [pc, #488]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	4a78      	ldr	r2, [pc, #480]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046e2:	e018      	b.n	8004716 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046e4:	4b75      	ldr	r3, [pc, #468]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	4a74      	ldr	r2, [pc, #464]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f4:	e00f      	b.n	8004716 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046f6:	4b71      	ldr	r3, [pc, #452]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	4a6f      	ldr	r2, [pc, #444]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004706:	4b6d      	ldr	r3, [pc, #436]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470c:	4a6b      	ldr	r2, [pc, #428]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d068      	beq.n	80047f0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7fd fd27 	bl	8002170 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004724:	e011      	b.n	800474a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd fd23 	bl	8002170 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d908      	bls.n	800474a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004738:	4b60      	ldr	r3, [pc, #384]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1d4      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474a:	4b5c      	ldr	r3, [pc, #368]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0e6      	beq.n	8004726 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d022      	beq.n	80047aa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004764:	4b55      	ldr	r3, [pc, #340]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a54      	ldr	r2, [pc, #336]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800476c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004774:	e011      	b.n	800479a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fd fcfb 	bl	8002170 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d908      	bls.n	800479a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004788:	4b4c      	ldr	r3, [pc, #304]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1ac      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800479a:	4b48      	ldr	r3, [pc, #288]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0e6      	beq.n	8004776 <HAL_RCC_OscConfig+0x61a>
 80047a8:	e068      	b.n	800487c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047aa:	4b44      	ldr	r3, [pc, #272]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b0:	4a42      	ldr	r2, [pc, #264]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80047b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047ba:	e011      	b.n	80047e0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd fcd8 	bl	8002170 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d908      	bls.n	80047e0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047ce:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e189      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047e0:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e6      	bne.n	80047bc <HAL_RCC_OscConfig+0x660>
 80047ee:	e045      	b.n	800487c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd fcbe 	bl	8002170 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f6:	e011      	b.n	800481c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fd fcba 	bl	8002170 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d908      	bls.n	800481c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800480a:	4b2c      	ldr	r3, [pc, #176]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e16b      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800482a:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d021      	beq.n	800487c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004838:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004848:	e011      	b.n	800486e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd fc91 	bl	8002170 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d908      	bls.n	800486e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e142      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800486e:	4b13      	ldr	r3, [pc, #76]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e6      	bne.n	800484a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	4a0d      	ldr	r2, [pc, #52]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04f      	beq.n	800493a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d028      	beq.n	80048f4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a8:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <HAL_RCC_OscConfig+0x760>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd fc5d 	bl	8002170 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048b8:	e014      	b.n	80048e4 <HAL_RCC_OscConfig+0x788>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c4:	f7fd fc54 	bl	8002170 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d908      	bls.n	80048e4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048d2:	4b8a      	ldr	r3, [pc, #552]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80048d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e107      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048e4:	4b85      	ldr	r3, [pc, #532]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0e8      	beq.n	80048c4 <HAL_RCC_OscConfig+0x768>
 80048f2:	e022      	b.n	800493a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048f4:	4b81      	ldr	r3, [pc, #516]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048fa:	4a80      	ldr	r2, [pc, #512]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd fc34 	bl	8002170 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800490a:	e00f      	b.n	800492c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490c:	f7fd fc30 	bl	8002170 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d908      	bls.n	800492c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800491a:	4b78      	ldr	r3, [pc, #480]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800491c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0e3      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800492c:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e8      	bne.n	800490c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80d7 	beq.w	8004af2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004944:	4b6d      	ldr	r3, [pc, #436]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b0c      	cmp	r3, #12
 800494e:	f000 8091 	beq.w	8004a74 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	2b02      	cmp	r3, #2
 8004958:	d166      	bne.n	8004a28 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495a:	4b68      	ldr	r3, [pc, #416]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a67      	ldr	r2, [pc, #412]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd fc03 	bl	8002170 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496c:	e00e      	b.n	800498c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd fbff 	bl	8002170 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d907      	bls.n	800498c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497c:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0b3      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	4b5b      	ldr	r3, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ea      	bne.n	800496e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4b58      	ldr	r3, [pc, #352]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_RCC_OscConfig+0x9a4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049a8:	3a01      	subs	r2, #1
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049b2:	0212      	lsls	r2, r2, #8
 80049b4:	4311      	orrs	r1, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049ba:	0852      	lsrs	r2, r2, #1
 80049bc:	3a01      	subs	r2, #1
 80049be:	0552      	lsls	r2, r2, #21
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049c6:	0852      	lsrs	r2, r2, #1
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0652      	lsls	r2, r2, #25
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049d2:	06d2      	lsls	r2, r2, #27
 80049d4:	430a      	orrs	r2, r1
 80049d6:	4949      	ldr	r1, [pc, #292]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b47      	ldr	r3, [pc, #284]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80049e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e8:	4b44      	ldr	r3, [pc, #272]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a43      	ldr	r2, [pc, #268]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 80049ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fbbc 	bl	8002170 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	e00e      	b.n	8004a1a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fd fbb8 	bl	8002170 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d907      	bls.n	8004a1a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e06c      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ea      	beq.n	80049fc <HAL_RCC_OscConfig+0x8a0>
 8004a26:	e064      	b.n	8004af2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a28:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a33      	ldr	r2, [pc, #204]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fb9c 	bl	8002170 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a3a:	e00e      	b.n	8004a5a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd fb98 	bl	8002170 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d907      	bls.n	8004a5a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04c      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ea      	bne.n	8004a3c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4924      	ldr	r1, [pc, #144]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_OscConfig+0x9a8>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
 8004a72:	e03e      	b.n	8004af2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e039      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_RCC_OscConfig+0x9a0>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0203 	and.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d12c      	bne.n	8004aee <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d123      	bne.n	8004aee <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11b      	bne.n	8004aee <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d113      	bne.n	8004aee <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000
 8004b00:	019f800c 	.word	0x019f800c
 8004b04:	feeefffc 	.word	0xfeeefffc

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e11c      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b90      	ldr	r3, [pc, #576]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	498b      	ldr	r1, [pc, #556]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b89      	ldr	r3, [pc, #548]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e104      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b81      	ldr	r3, [pc, #516]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d908      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	497b      	ldr	r1, [pc, #492]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8085 	beq.w	8004c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d11f      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b94:	4b74      	ldr	r3, [pc, #464]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0da      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ba4:	f000 fa26 	bl	8004ff4 <RCC_GetSysClockFreqFromPLLSource>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a6f      	ldr	r2, [pc, #444]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d947      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d141      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc6:	4a68      	ldr	r2, [pc, #416]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bce:	2380      	movs	r3, #128	@ 0x80
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e036      	b.n	8004c42 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bdc:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d115      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b6      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0aa      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	4b58      	ldr	r3, [pc, #352]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0a2      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c14:	f000 f8b0 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4a53      	ldr	r2, [pc, #332]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d90f      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c22:	4b51      	ldr	r3, [pc, #324]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c36:	4a4c      	ldr	r2, [pc, #304]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c42:	4b49      	ldr	r3, [pc, #292]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f023 0203 	bic.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4946      	ldr	r1, [pc, #280]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fd fa8c 	bl	8002170 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	e013      	b.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5c:	f7fd fa88 	bl	8002170 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d90a      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e06a      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c84:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 020c 	and.w	r2, r3, #12
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d1e2      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b80      	cmp	r3, #128	@ 0x80
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c9c:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a31      	ldr	r2, [pc, #196]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d010      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d208      	bcs.n	8004cd6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4925      	ldr	r1, [pc, #148]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd6:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d210      	bcs.n	8004d06 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 020f 	bic.w	r2, r3, #15
 8004cec:	491d      	ldr	r1, [pc, #116]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCC_ClockConfig+0x25c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d001      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4912      	ldr	r1, [pc, #72]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d30:	4b0d      	ldr	r3, [pc, #52]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	490a      	ldr	r1, [pc, #40]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d44:	f000 f8b6 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x268>)
 8004d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <HAL_RCC_ClockConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd f9bc 	bl	80020d0 <HAL_InitTick>
 8004d58:	4603      	mov	r3, r0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40022000 	.word	0x40022000
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	04c4b400 	.word	0x04c4b400
 8004d70:	20000000 	.word	0x20000000
 8004d74:	2000002c 	.word	0x2000002c

08004d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	@ 0x24
 8004d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d90:	4b44      	ldr	r3, [pc, #272]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x34>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d121      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d11e      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004db8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dc8:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004dd4:	4a34      	ldr	r2, [pc, #208]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x130>)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ddc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d102      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004df0:	4b2e      	ldr	r3, [pc, #184]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x134>)
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e004      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d146      	bne.n	8004e94 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e06:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e10:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d003      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb4>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d00d      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0xce>
 8004e2a:	e019      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x134>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e36:	68d2      	ldr	r2, [r2, #12]
 8004e38:	0a12      	lsrs	r2, r2, #8
 8004e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]
        break;
 8004e44:	e019      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	0a12      	lsrs	r2, r2, #8
 8004e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
        break;
 8004e5e:	e00c      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e6a:	68d2      	ldr	r2, [r2, #12]
 8004e6c:	0a12      	lsrs	r2, r2, #8
 8004e6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	617b      	str	r3, [r7, #20]
        break;
 8004e78:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	0e5b      	lsrs	r3, r3, #25
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	3301      	adds	r3, #1
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e94:	69bb      	ldr	r3, [r7, #24]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	08008bf8 	.word	0x08008bf8
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004eb8:	f7ff ff5e 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetHCLKFreq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	08008be0 	.word	0x08008be0

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff ffe8 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08008bf0 	.word	0x08008bf0

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffd4 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0adb      	lsrs	r3, r3, #11
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	08008bf0 	.word	0x08008bf0

08004f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f38:	4b2c      	ldr	r3, [pc, #176]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f44:	f7ff f85c 	bl	8004000 <HAL_PWREx_GetVoltageRange>
 8004f48:	6138      	str	r0, [r7, #16]
 8004f4a:	e014      	b.n	8004f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f58:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f64:	f7ff f84c 	bl	8004000 <HAL_PWREx_GetVoltageRange>
 8004f68:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b20      	ldr	r3, [pc, #128]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f82:	d10b      	bne.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d919      	bls.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f8e:	d902      	bls.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f90:	2302      	movs	r3, #2
 8004f92:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004f94:	e013      	b.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004f9a:	e010      	b.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b80      	cmp	r3, #128	@ 0x80
 8004fa0:	d902      	bls.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e00a      	b.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d102      	bne.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fae:	2302      	movs	r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e004      	b.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b70      	cmp	r3, #112	@ 0x70
 8004fb8:	d101      	bne.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 020f 	bic.w	r2, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004fce:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40022000 	.word	0x40022000

08004ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ffa:	4b31      	ldr	r3, [pc, #196]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005004:	4b2e      	ldr	r3, [pc, #184]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3301      	adds	r3, #1
 8005010:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d015      	beq.n	8005044 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d839      	bhi.n	8005092 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d01c      	beq.n	800505e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d133      	bne.n	8005092 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800502a:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005034:	68d2      	ldr	r2, [r2, #12]
 8005036:	0a12      	lsrs	r2, r2, #8
 8005038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	613b      	str	r3, [r7, #16]
      break;
 8005042:	e029      	b.n	8005098 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005044:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800504e:	68d2      	ldr	r2, [r2, #12]
 8005050:	0a12      	lsrs	r2, r2, #8
 8005052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	613b      	str	r3, [r7, #16]
      break;
 800505c:	e01c      	b.n	8005098 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d107      	bne.n	800507a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800506a:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800506c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005070:	0a1b      	lsrs	r3, r3, #8
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e005      	b.n	8005086 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800507a:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005086:	4a11      	ldr	r2, [pc, #68]	@ (80050cc <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508e:	613b      	str	r3, [r7, #16]
        break;
 8005090:	e002      	b.n	8005098 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
      break;
 8005096:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	0e5b      	lsrs	r3, r3, #25
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050b2:	683b      	ldr	r3, [r7, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40021000 	.word	0x40021000
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	007a1200 	.word	0x007a1200
 80050cc:	08008bf8 	.word	0x08008bf8

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050dc:	2300      	movs	r3, #0
 80050de:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d040      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f0:	2b80      	cmp	r3, #128	@ 0x80
 80050f2:	d02a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050f4:	2b80      	cmp	r3, #128	@ 0x80
 80050f6:	d825      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050f8:	2b60      	cmp	r3, #96	@ 0x60
 80050fa:	d026      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050fc:	2b60      	cmp	r3, #96	@ 0x60
 80050fe:	d821      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d006      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	d81d      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d010      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005110:	e018      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005112:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4a8e      	ldr	r2, [pc, #568]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800511e:	e015      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	2100      	movs	r1, #0
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb56 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005130:	e00c      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3320      	adds	r3, #32
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fc33 	bl	80059a4 <RCCEx_PLLSAI2_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005142:	e003      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	77fb      	strb	r3, [r7, #31]
        break;
 8005148:	e000      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800514a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514c:	7ffb      	ldrb	r3, [r7, #31]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005152:	4b7f      	ldr	r3, [pc, #508]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005158:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005160:	497b      	ldr	r1, [pc, #492]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005168:	e001      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516a:	7ffb      	ldrb	r3, [r7, #31]
 800516c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d047      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005182:	d030      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005188:	d82a      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800518a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800518e:	d02a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005194:	d824      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519a:	d008      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d81e      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051aa:	d010      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051ac:	e018      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ae:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a67      	ldr	r2, [pc, #412]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051ba:	e015      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fb08 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051cc:	e00c      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3320      	adds	r3, #32
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fbe5 	bl	80059a4 <RCCEx_PLLSAI2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
        break;
 80051e4:	e000      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80051e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ee:	4b58      	ldr	r3, [pc, #352]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fc:	4954      	ldr	r1, [pc, #336]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005204:	e001      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80ab 	beq.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005218:	2300      	movs	r3, #0
 800521a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521c:	4b4c      	ldr	r3, [pc, #304]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10d      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005228:	4b49      	ldr	r3, [pc, #292]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522c:	4a48      	ldr	r2, [pc, #288]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005232:	6593      	str	r3, [r2, #88]	@ 0x58
 8005234:	4b46      	ldr	r3, [pc, #280]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005244:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a42      	ldr	r2, [pc, #264]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800524a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005250:	f7fc ff8e 	bl	8002170 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005256:	e00f      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005258:	f7fc ff8a 	bl	8002170 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d908      	bls.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005266:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005276:	e006      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0e9      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005286:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005288:	7ffb      	ldrb	r3, [r7, #31]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d164      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800528e:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005298:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01f      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d019      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052be:	4a24      	ldr	r2, [pc, #144]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ce:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01f      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fc ff41 	bl	8002170 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f0:	e012      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc ff3d 	bl	8002170 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d909      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005304:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005316:	e007      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005318:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0e5      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005328:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800532a:	7ffb      	ldrb	r3, [r7, #31]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10c      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005330:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005348:	e008      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800534a:	7ffb      	ldrb	r3, [r7, #31]
 800534c:	77bb      	strb	r3, [r7, #30]
 800534e:	e005      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005350:	40021000 	.word	0x40021000
 8005354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b9c      	ldr	r3, [pc, #624]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005366:	4a9b      	ldr	r2, [pc, #620]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537a:	4b96      	ldr	r3, [pc, #600]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005380:	f023 0203 	bic.w	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005388:	4992      	ldr	r1, [pc, #584]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539c:	4b8d      	ldr	r3, [pc, #564]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f023 020c 	bic.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	498a      	ldr	r1, [pc, #552]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053be:	4b85      	ldr	r3, [pc, #532]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	4981      	ldr	r1, [pc, #516]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e0:	4b7c      	ldr	r3, [pc, #496]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	4979      	ldr	r1, [pc, #484]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005402:	4b74      	ldr	r3, [pc, #464]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005410:	4970      	ldr	r1, [pc, #448]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005424:	4b6b      	ldr	r3, [pc, #428]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005432:	4968      	ldr	r1, [pc, #416]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005446:	4b63      	ldr	r3, [pc, #396]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005454:	495f      	ldr	r1, [pc, #380]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005468:	4b5a      	ldr	r3, [pc, #360]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	4957      	ldr	r1, [pc, #348]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800548a:	4b52      	ldr	r3, [pc, #328]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005490:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005498:	494e      	ldr	r1, [pc, #312]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d031      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054b4:	d00e      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ba:	d814      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d015      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80054c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054c4:	d10f      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c6:	4b43      	ldr	r3, [pc, #268]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4a42      	ldr	r2, [pc, #264]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054d0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80054d2:	e00c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f97c 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	77fb      	strb	r3, [r7, #31]
        break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	7ffb      	ldrb	r3, [r7, #31]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054f4:	4b37      	ldr	r3, [pc, #220]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005502:	4934      	ldr	r1, [pc, #208]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800550a:	e001      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7ffb      	ldrb	r3, [r7, #31]
 800550e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551c:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005522:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	492a      	ldr	r1, [pc, #168]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800553e:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005544:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554c:	4921      	ldr	r1, [pc, #132]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005560:	4b1c      	ldr	r3, [pc, #112]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556e:	4919      	ldr	r1, [pc, #100]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005584:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005590:	4910      	ldr	r1, [pc, #64]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02b      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	4908      	ldr	r1, [pc, #32]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055c2:	d109      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c4:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a02      	ldr	r2, [pc, #8]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ce:	60d3      	str	r3, [r2, #12]
 80055d0:	e014      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e0:	d10c      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f8f5 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d04a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800560c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005610:	d108      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005612:	4b70      	ldr	r3, [pc, #448]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005614:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005618:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800561a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800561e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005622:	e012      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005624:	4b6b      	ldr	r3, [pc, #428]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005632:	4968      	ldr	r1, [pc, #416]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800563a:	4b66      	ldr	r3, [pc, #408]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800563c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005640:	4a64      	ldr	r2, [pc, #400]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005646:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800564e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005652:	d10d      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	2101      	movs	r1, #1
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f8bc 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005664:	7ffb      	ldrb	r3, [r7, #31]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d019      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800566a:	7ffb      	ldrb	r3, [r7, #31]
 800566c:	77bb      	strb	r3, [r7, #30]
 800566e:	e016      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005678:	d106      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567a:	4b56      	ldr	r3, [pc, #344]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a55      	ldr	r2, [pc, #340]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005684:	60d3      	str	r3, [r2, #12]
 8005686:	e00a      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800568c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005690:	d105      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005692:	4b50      	ldr	r3, [pc, #320]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	4a4f      	ldr	r2, [pc, #316]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d028      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056aa:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056b8:	4946      	ldr	r1, [pc, #280]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c8:	d106      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ca:	4b42      	ldr	r3, [pc, #264]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a41      	ldr	r2, [pc, #260]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d4:	60d3      	str	r3, [r2, #12]
 80056d6:	e011      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056e0:	d10c      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	2101      	movs	r1, #1
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f875 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
 80056fa:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01e      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005708:	4b32      	ldr	r3, [pc, #200]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005718:	492e      	ldr	r1, [pc, #184]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572a:	d10c      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2102      	movs	r1, #2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f850 	bl	80057d8 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800573c:	7ffb      	ldrb	r3, [r7, #31]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005742:	7ffb      	ldrb	r3, [r7, #31]
 8005744:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005752:	4b20      	ldr	r3, [pc, #128]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005758:	f023 0204 	bic.w	r2, r3, #4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005762:	491c      	ldr	r1, [pc, #112]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005776:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800577c:	f023 0218 	bic.w	r2, r3, #24
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	4913      	ldr	r1, [pc, #76]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800579c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057aa:	490a      	ldr	r1, [pc, #40]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057bc:	d105      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	4a04      	ldr	r2, [pc, #16]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80057ca:	7fbb      	ldrb	r3, [r7, #30]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40021000 	.word	0x40021000

080057d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d018      	beq.n	8005820 <RCCEx_PLLSAI1_Config+0x48>
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d81f      	bhi.n	8005832 <RCCEx_PLLSAI1_Config+0x5a>
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d002      	beq.n	80057fc <RCCEx_PLLSAI1_Config+0x24>
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d009      	beq.n	800580e <RCCEx_PLLSAI1_Config+0x36>
 80057fa:	e01a      	b.n	8005832 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057fc:	4b65      	ldr	r3, [pc, #404]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d117      	bne.n	8005838 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800580c:	e014      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800580e:	4b61      	ldr	r3, [pc, #388]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005816:	2b00      	cmp	r3, #0
 8005818:	d110      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581e:	e00d      	b.n	800583c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005820:	4b5c      	ldr	r3, [pc, #368]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005830:	e006      	b.n	8005840 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e004      	b.n	8005842 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005838:	bf00      	nop
 800583a:	e002      	b.n	8005842 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005840:	bf00      	nop
  }

  if (status == HAL_OK)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f040 809f 	bne.w	8005988 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800584a:	4b52      	ldr	r3, [pc, #328]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a51      	ldr	r2, [pc, #324]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005850:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fc fc8b 	bl	8002170 <HAL_GetTick>
 800585a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800585c:	e00f      	b.n	800587e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800585e:	f7fc fc87 	bl	8002170 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d908      	bls.n	800587e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800586c:	4b49      	ldr	r3, [pc, #292]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800587c:	e006      	b.n	800588c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800587e:	4b45      	ldr	r3, [pc, #276]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e9      	bne.n	800585e <RCCEx_PLLSAI1_Config+0x86>
 800588a:	e000      	b.n	800588e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800588c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d179      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d116      	bne.n	80058c8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589a:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	4b3e      	ldr	r3, [pc, #248]	@ (8005998 <RCCEx_PLLSAI1_Config+0x1c0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	0211      	lsls	r1, r2, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68d2      	ldr	r2, [r2, #12]
 80058ac:	06d2      	lsls	r2, r2, #27
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6852      	ldr	r2, [r2, #4]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	0112      	lsls	r2, r2, #4
 80058b8:	4311      	orrs	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	4934      	ldr	r1, [pc, #208]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
 80058c6:	e033      	b.n	8005930 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d118      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ce:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	4b32      	ldr	r3, [pc, #200]	@ (800599c <RCCEx_PLLSAI1_Config+0x1c4>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	0211      	lsls	r1, r2, #8
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6912      	ldr	r2, [r2, #16]
 80058e0:	0852      	lsrs	r2, r2, #1
 80058e2:	3a01      	subs	r2, #1
 80058e4:	0552      	lsls	r2, r2, #21
 80058e6:	4311      	orrs	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6852      	ldr	r2, [r2, #4]
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	4926      	ldr	r1, [pc, #152]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]
 80058fe:	e017      	b.n	8005930 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005900:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005906:	4013      	ands	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6952      	ldr	r2, [r2, #20]
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	3a01      	subs	r2, #1
 8005916:	0652      	lsls	r2, r2, #25
 8005918:	4311      	orrs	r1, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	3a01      	subs	r2, #1
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	4311      	orrs	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	491a      	ldr	r1, [pc, #104]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005930:	4b18      	ldr	r3, [pc, #96]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005936:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800593a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fc fc18 	bl	8002170 <HAL_GetTick>
 8005940:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005942:	e00f      	b.n	8005964 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005944:	f7fc fc14 	bl	8002170 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d908      	bls.n	8005964 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005962:	e006      	b.n	8005972 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005964:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0e9      	beq.n	8005944 <RCCEx_PLLSAI1_Config+0x16c>
 8005970:	e000      	b.n	8005974 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005972:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800597a:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	4904      	ldr	r1, [pc, #16]	@ (8005994 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	07ff800c 	.word	0x07ff800c
 800599c:	ff9f800c 	.word	0xff9f800c
 80059a0:	f9ff800c 	.word	0xf9ff800c

080059a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d018      	beq.n	80059ec <RCCEx_PLLSAI2_Config+0x48>
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d81f      	bhi.n	80059fe <RCCEx_PLLSAI2_Config+0x5a>
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <RCCEx_PLLSAI2_Config+0x24>
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d009      	beq.n	80059da <RCCEx_PLLSAI2_Config+0x36>
 80059c6:	e01a      	b.n	80059fe <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059c8:	4b4a      	ldr	r3, [pc, #296]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d117      	bne.n	8005a04 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d8:	e014      	b.n	8005a04 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059da:	4b46      	ldr	r3, [pc, #280]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d110      	bne.n	8005a08 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ea:	e00d      	b.n	8005a08 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80059ec:	4b41      	ldr	r3, [pc, #260]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fc:	e006      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
      break;
 8005a02:	e004      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d169      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a14:	4b37      	ldr	r3, [pc, #220]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a36      	ldr	r2, [pc, #216]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7fc fba6 	bl	8002170 <HAL_GetTick>
 8005a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a26:	e00f      	b.n	8005a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a28:	f7fc fba2 	bl	8002170 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d908      	bls.n	8005a48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a36:	4b2f      	ldr	r3, [pc, #188]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a46:	e006      	b.n	8005a56 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a48:	4b2a      	ldr	r3, [pc, #168]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e9      	bne.n	8005a28 <RCCEx_PLLSAI2_Config+0x84>
 8005a54:	e000      	b.n	8005a58 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005a56:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d144      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d115      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a64:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	4b23      	ldr	r3, [pc, #140]	@ (8005af8 <RCCEx_PLLSAI2_Config+0x154>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6892      	ldr	r2, [r2, #8]
 8005a70:	0211      	lsls	r1, r2, #8
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68d2      	ldr	r2, [r2, #12]
 8005a76:	06d2      	lsls	r2, r2, #27
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	0112      	lsls	r2, r2, #4
 8005a82:	4311      	orrs	r1, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	491a      	ldr	r1, [pc, #104]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a90:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fb68 	bl	8002170 <HAL_GetTick>
 8005aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aa2:	e00f      	b.n	8005ac4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aa4:	f7fc fb64 	bl	8002170 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d908      	bls.n	8005ac4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005ac2:	e006      	b.n	8005ad2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0e9      	beq.n	8005aa4 <RCCEx_PLLSAI2_Config+0x100>
 8005ad0:	e000      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005ad2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4904      	ldr	r1, [pc, #16]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x150>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	07ff800c 	.word	0x07ff800c

08005afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e042      	b.n	8005b94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fb fd8f 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	@ 0x24
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fbb6 	bl	80062b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8b3 	bl	8005cb8 <UART_SetConfig>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e01b      	b.n	8005b94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fc35 	bl	80063fc <UART_CheckIdleState>
 8005b92:	4603      	mov	r3, r0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	@ 0x28
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d17b      	bne.n	8005cae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_UART_Transmit+0x26>
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e074      	b.n	8005cb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2221      	movs	r2, #33	@ 0x21
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd6:	f7fc facb 	bl	8002170 <HAL_GetTick>
 8005bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf4:	d108      	bne.n	8005c08 <HAL_UART_Transmit+0x6c>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	e003      	b.n	8005c10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c10:	e030      	b.n	8005c74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2180      	movs	r1, #128	@ 0x80
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fc97 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e03d      	b.n	8005cb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	e007      	b.n	8005c62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1c8      	bne.n	8005c12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2200      	movs	r2, #0
 8005c88:	2140      	movs	r1, #64	@ 0x40
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fc60 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e006      	b.n	8005cb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b08c      	sub	sp, #48	@ 0x30
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4baa      	ldr	r3, [pc, #680]	@ (8005f90 <UART_SetConfig+0x2d8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a9f      	ldr	r2, [pc, #636]	@ (8005f94 <UART_SetConfig+0x2dc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d20:	4313      	orrs	r3, r2
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	f023 010f 	bic.w	r1, r3, #15
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a90      	ldr	r2, [pc, #576]	@ (8005f98 <UART_SetConfig+0x2e0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d125      	bne.n	8005da8 <UART_SetConfig+0xf0>
 8005d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d81a      	bhi.n	8005da0 <UART_SetConfig+0xe8>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0xb8>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d81 	.word	0x08005d81
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d86:	e116      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8e:	e112      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d96:	e10e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9e:	e10a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da6:	e106      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa0 <UART_SetConfig+0x2e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d138      	bne.n	8005e24 <UART_SetConfig+0x16c>
 8005db2:	4b7a      	ldr	r3, [pc, #488]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	d82d      	bhi.n	8005e1c <UART_SetConfig+0x164>
 8005dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0x110>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08005e1d 	.word	0x08005e1d
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e1d 	.word	0x08005e1d
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e0d8      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e0d4      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e0d0      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1a:	e0cc      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e22:	e0c8      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa4 <UART_SetConfig+0x2ec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d125      	bne.n	8005e7a <UART_SetConfig+0x1c2>
 8005e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d016      	beq.n	8005e6a <UART_SetConfig+0x1b2>
 8005e3c:	2b30      	cmp	r3, #48	@ 0x30
 8005e3e:	d818      	bhi.n	8005e72 <UART_SetConfig+0x1ba>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d00a      	beq.n	8005e5a <UART_SetConfig+0x1a2>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d814      	bhi.n	8005e72 <UART_SetConfig+0x1ba>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <UART_SetConfig+0x19a>
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d008      	beq.n	8005e62 <UART_SetConfig+0x1aa>
 8005e50:	e00f      	b.n	8005e72 <UART_SetConfig+0x1ba>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e58:	e0ad      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e60:	e0a9      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e62:	2304      	movs	r3, #4
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e68:	e0a5      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e70:	e0a1      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e72:	2310      	movs	r3, #16
 8005e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e78:	e09d      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa8 <UART_SetConfig+0x2f0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d125      	bne.n	8005ed0 <UART_SetConfig+0x218>
 8005e84:	4b45      	ldr	r3, [pc, #276]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e90:	d016      	beq.n	8005ec0 <UART_SetConfig+0x208>
 8005e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e94:	d818      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d00a      	beq.n	8005eb0 <UART_SetConfig+0x1f8>
 8005e9a:	2b80      	cmp	r3, #128	@ 0x80
 8005e9c:	d814      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <UART_SetConfig+0x1f0>
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d008      	beq.n	8005eb8 <UART_SetConfig+0x200>
 8005ea6:	e00f      	b.n	8005ec8 <UART_SetConfig+0x210>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eae:	e082      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb6:	e07e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ebe:	e07a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec6:	e076      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ece:	e072      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a35      	ldr	r2, [pc, #212]	@ (8005fac <UART_SetConfig+0x2f4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d12a      	bne.n	8005f30 <UART_SetConfig+0x278>
 8005eda:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee8:	d01a      	beq.n	8005f20 <UART_SetConfig+0x268>
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eee:	d81b      	bhi.n	8005f28 <UART_SetConfig+0x270>
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef4:	d00c      	beq.n	8005f10 <UART_SetConfig+0x258>
 8005ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efa:	d815      	bhi.n	8005f28 <UART_SetConfig+0x270>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <UART_SetConfig+0x250>
 8005f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f04:	d008      	beq.n	8005f18 <UART_SetConfig+0x260>
 8005f06:	e00f      	b.n	8005f28 <UART_SetConfig+0x270>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	e052      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f16:	e04e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e04a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f26:	e046      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2e:	e042      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a17      	ldr	r2, [pc, #92]	@ (8005f94 <UART_SetConfig+0x2dc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d13a      	bne.n	8005fb0 <UART_SetConfig+0x2f8>
 8005f3a:	4b18      	ldr	r3, [pc, #96]	@ (8005f9c <UART_SetConfig+0x2e4>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f48:	d01a      	beq.n	8005f80 <UART_SetConfig+0x2c8>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4e:	d81b      	bhi.n	8005f88 <UART_SetConfig+0x2d0>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f54:	d00c      	beq.n	8005f70 <UART_SetConfig+0x2b8>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f5a:	d815      	bhi.n	8005f88 <UART_SetConfig+0x2d0>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x2b0>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d008      	beq.n	8005f78 <UART_SetConfig+0x2c0>
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x2d0>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e022      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e01e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e01a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e016      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e012      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f90:	cfff69f3 	.word	0xcfff69f3
 8005f94:	40008000 	.word	0x40008000
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	40004c00 	.word	0x40004c00
 8005fac:	40005000 	.word	0x40005000
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4ab0      	ldr	r2, [pc, #704]	@ (800627c <UART_SetConfig+0x5c4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	f040 809b 	bne.w	80060f8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d827      	bhi.n	800601a <UART_SetConfig+0x362>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <UART_SetConfig+0x318>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	0800601b 	.word	0x0800601b
 8005fe0:	0800600b 	.word	0x0800600b
 8005fe4:	0800601b 	.word	0x0800601b
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	0800601b 	.word	0x0800601b
 8005ff0:	08006013 	.word	0x08006013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe ff72 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ffa:	e014      	b.n	8006026 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7fe ff82 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8006000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006002:	e010      	b.n	8006026 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006004:	4b9e      	ldr	r3, [pc, #632]	@ (8006280 <UART_SetConfig+0x5c8>)
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006008:	e00d      	b.n	8006026 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600a:	f7fe feb5 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 800600e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006010:	e009      	b.n	8006026 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006018:	e005      	b.n	8006026 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8130 	beq.w	800628e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	4a94      	ldr	r2, [pc, #592]	@ (8006284 <UART_SetConfig+0x5cc>)
 8006034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006038:	461a      	mov	r2, r3
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006040:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	429a      	cmp	r2, r3
 8006050:	d305      	bcc.n	800605e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	429a      	cmp	r2, r3
 800605c:	d903      	bls.n	8006066 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006064:	e113      	b.n	800628e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	2200      	movs	r2, #0
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	60fa      	str	r2, [r7, #12]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	4a84      	ldr	r2, [pc, #528]	@ (8006284 <UART_SetConfig+0x5cc>)
 8006074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006078:	b29b      	uxth	r3, r3
 800607a:	2200      	movs	r2, #0
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006088:	f7fa fd74 	bl	8000b74 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	020b      	lsls	r3, r1, #8
 800609e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060a2:	0202      	lsls	r2, r0, #8
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	6849      	ldr	r1, [r1, #4]
 80060a8:	0849      	lsrs	r1, r1, #1
 80060aa:	2000      	movs	r0, #0
 80060ac:	460c      	mov	r4, r1
 80060ae:	4605      	mov	r5, r0
 80060b0:	eb12 0804 	adds.w	r8, r2, r4
 80060b4:	eb43 0905 	adc.w	r9, r3, r5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	469a      	mov	sl, r3
 80060c0:	4693      	mov	fp, r2
 80060c2:	4652      	mov	r2, sl
 80060c4:	465b      	mov	r3, fp
 80060c6:	4640      	mov	r0, r8
 80060c8:	4649      	mov	r1, r9
 80060ca:	f7fa fd53 	bl	8000b74 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4613      	mov	r3, r2
 80060d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060dc:	d308      	bcc.n	80060f0 <UART_SetConfig+0x438>
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e4:	d204      	bcs.n	80060f0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e0ce      	b.n	800628e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060f6:	e0ca      	b.n	800628e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	d166      	bne.n	80061d0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006102:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006106:	2b08      	cmp	r3, #8
 8006108:	d827      	bhi.n	800615a <UART_SetConfig+0x4a2>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0x458>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006135 	.word	0x08006135
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006145 	.word	0x08006145
 800611c:	0800615b 	.word	0x0800615b
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800615b 	.word	0x0800615b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006134:	f7fe fed2 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8006138:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800613a:	e014      	b.n	8006166 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613c:	f7fe fee2 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8006140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b4e      	ldr	r3, [pc, #312]	@ (8006280 <UART_SetConfig+0x5c8>)
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006148:	e00d      	b.n	8006166 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fe fe15 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 800614e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8090 	beq.w	800628e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	4a44      	ldr	r2, [pc, #272]	@ (8006284 <UART_SetConfig+0x5cc>)
 8006174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006178:	461a      	mov	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006180:	005a      	lsls	r2, r3, #1
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	441a      	add	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d916      	bls.n	80061c8 <UART_SetConfig+0x510>
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a0:	d212      	bcs.n	80061c8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f023 030f 	bic.w	r3, r3, #15
 80061aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	8bfa      	ldrh	r2, [r7, #30]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e062      	b.n	800628e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061ce:	e05e      	b.n	800628e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d828      	bhi.n	800622a <UART_SetConfig+0x572>
 80061d8:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <UART_SetConfig+0x528>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006205 	.word	0x08006205
 80061e4:	0800620d 	.word	0x0800620d
 80061e8:	08006215 	.word	0x08006215
 80061ec:	0800622b 	.word	0x0800622b
 80061f0:	0800621b 	.word	0x0800621b
 80061f4:	0800622b 	.word	0x0800622b
 80061f8:	0800622b 	.word	0x0800622b
 80061fc:	0800622b 	.word	0x0800622b
 8006200:	08006223 	.word	0x08006223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006204:	f7fe fe6a 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8006208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800620a:	e014      	b.n	8006236 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800620c:	f7fe fe7a 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006212:	e010      	b.n	8006236 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006214:	4b1a      	ldr	r3, [pc, #104]	@ (8006280 <UART_SetConfig+0x5c8>)
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006218:	e00d      	b.n	8006236 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621a:	f7fe fdad 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 800621e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006220:	e009      	b.n	8006236 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006228:	e005      	b.n	8006236 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006234:	bf00      	nop
    }

    if (pclk != 0U)
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d028      	beq.n	800628e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	4a10      	ldr	r2, [pc, #64]	@ (8006284 <UART_SetConfig+0x5cc>)
 8006242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006246:	461a      	mov	r2, r3
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	fbb3 f2f2 	udiv	r2, r3, r2
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	441a      	add	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d910      	bls.n	8006288 <UART_SetConfig+0x5d0>
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d20c      	bcs.n	8006288 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	b29a      	uxth	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60da      	str	r2, [r3, #12]
 8006278:	e009      	b.n	800628e <UART_SetConfig+0x5d6>
 800627a:	bf00      	nop
 800627c:	40008000 	.word	0x40008000
 8006280:	00f42400 	.word	0x00f42400
 8006284:	08008c38 	.word	0x08008c38
      }
      else
      {
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2201      	movs	r2, #1
 800629a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3730      	adds	r7, #48	@ 0x30
 80062b2:	46bd      	mov	sp, r7
 80062b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b6:	d10a      	bne.n	80063ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b098      	sub	sp, #96	@ 0x60
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800640c:	f7fb feb0 	bl	8002170 <HAL_GetTick>
 8006410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d12f      	bne.n	8006480 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f88e 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d022      	beq.n	8006480 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800644e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006458:	647b      	str	r3, [r7, #68]	@ 0x44
 800645a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800645e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e063      	b.n	8006548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d149      	bne.n	8006522 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006496:	2200      	movs	r2, #0
 8006498:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f857 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d03c      	beq.n	8006522 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	623b      	str	r3, [r7, #32]
   return(result);
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064fa:	61fa      	str	r2, [r7, #28]
 80064fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	69b9      	ldr	r1, [r7, #24]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	617b      	str	r3, [r7, #20]
   return(result);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e012      	b.n	8006548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3758      	adds	r7, #88	@ 0x58
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006560:	e04f      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d04b      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656a:	f7fb fe01 	bl	8002170 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	429a      	cmp	r2, r3
 8006578:	d302      	bcc.n	8006580 <UART_WaitOnFlagUntilTimeout+0x30>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e04e      	b.n	8006622 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d037      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b80      	cmp	r3, #128	@ 0x80
 8006596:	d034      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d031      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d110      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f838 	bl	800662a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2208      	movs	r2, #8
 80065be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e029      	b.n	8006622 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065dc:	d111      	bne.n	8006602 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f81e 	bl	800662a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e00f      	b.n	8006622 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4013      	ands	r3, r2
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	429a      	cmp	r2, r3
 800661e:	d0a0      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800662a:	b480      	push	{r7}
 800662c:	b095      	sub	sp, #84	@ 0x54
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006650:	643b      	str	r3, [r7, #64]	@ 0x40
 8006652:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006656:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3308      	adds	r3, #8
 800666a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	61fb      	str	r3, [r7, #28]
   return(result);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800668e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e3      	bne.n	8006664 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d118      	bne.n	80066d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 0310 	bic.w	r3, r3, #16
 80066b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6979      	ldr	r1, [r7, #20]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	613b      	str	r3, [r7, #16]
   return(result);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066ea:	bf00      	nop
 80066ec:	3754      	adds	r7, #84	@ 0x54
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_UARTEx_DisableFifoMode+0x16>
 8006708:	2302      	movs	r3, #2
 800670a:	e027      	b.n	800675c <HAL_UARTEx_DisableFifoMode+0x66>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800673a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02d      	b.n	80067dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2224      	movs	r2, #36	@ 0x24
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f84f 	bl	8006860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e02d      	b.n	8006858 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2224      	movs	r2, #36	@ 0x24
 8006808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f811 	bl	8006860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006880:	e031      	b.n	80068e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006882:	2308      	movs	r3, #8
 8006884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006886:	2308      	movs	r3, #8
 8006888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	0e5b      	lsrs	r3, r3, #25
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	0f5b      	lsrs	r3, r3, #29
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	7b3a      	ldrb	r2, [r7, #12]
 80068ae:	4911      	ldr	r1, [pc, #68]	@ (80068f4 <UARTEx_SetNbDataToProcess+0x94>)
 80068b0:	5c8a      	ldrb	r2, [r1, r2]
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068b6:	7b3a      	ldrb	r2, [r7, #12]
 80068b8:	490f      	ldr	r1, [pc, #60]	@ (80068f8 <UARTEx_SetNbDataToProcess+0x98>)
 80068ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	7b7a      	ldrb	r2, [r7, #13]
 80068cc:	4909      	ldr	r1, [pc, #36]	@ (80068f4 <UARTEx_SetNbDataToProcess+0x94>)
 80068ce:	5c8a      	ldrb	r2, [r1, r2]
 80068d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068d4:	7b7a      	ldrb	r2, [r7, #13]
 80068d6:	4908      	ldr	r1, [pc, #32]	@ (80068f8 <UARTEx_SetNbDataToProcess+0x98>)
 80068d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068da:	fb93 f3f2 	sdiv	r3, r3, r2
 80068de:	b29a      	uxth	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	08008c50 	.word	0x08008c50
 80068f8:	08008c58 	.word	0x08008c58

080068fc <std>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	6083      	str	r3, [r0, #8]
 8006904:	8181      	strh	r1, [r0, #12]
 8006906:	4619      	mov	r1, r3
 8006908:	6643      	str	r3, [r0, #100]	@ 0x64
 800690a:	81c2      	strh	r2, [r0, #14]
 800690c:	2208      	movs	r2, #8
 800690e:	6183      	str	r3, [r0, #24]
 8006910:	e9c0 3300 	strd	r3, r3, [r0]
 8006914:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006918:	305c      	adds	r0, #92	@ 0x5c
 800691a:	f000 f928 	bl	8006b6e <memset>
 800691e:	4b0d      	ldr	r3, [pc, #52]	@ (8006954 <std+0x58>)
 8006920:	6224      	str	r4, [r4, #32]
 8006922:	6263      	str	r3, [r4, #36]	@ 0x24
 8006924:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <std+0x5c>)
 8006926:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006928:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <std+0x60>)
 800692a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800692c:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <std+0x64>)
 800692e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006930:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <std+0x68>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d006      	beq.n	8006944 <std+0x48>
 8006936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800693a:	4294      	cmp	r4, r2
 800693c:	d002      	beq.n	8006944 <std+0x48>
 800693e:	33d0      	adds	r3, #208	@ 0xd0
 8006940:	429c      	cmp	r4, r3
 8006942:	d105      	bne.n	8006950 <std+0x54>
 8006944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f000 b988 	b.w	8006c60 <__retarget_lock_init_recursive>
 8006950:	bd10      	pop	{r4, pc}
 8006952:	bf00      	nop
 8006954:	08006ae9 	.word	0x08006ae9
 8006958:	08006b0b 	.word	0x08006b0b
 800695c:	08006b43 	.word	0x08006b43
 8006960:	08006b67 	.word	0x08006b67
 8006964:	200003a0 	.word	0x200003a0

08006968 <stdio_exit_handler>:
 8006968:	4a02      	ldr	r2, [pc, #8]	@ (8006974 <stdio_exit_handler+0xc>)
 800696a:	4903      	ldr	r1, [pc, #12]	@ (8006978 <stdio_exit_handler+0x10>)
 800696c:	4803      	ldr	r0, [pc, #12]	@ (800697c <stdio_exit_handler+0x14>)
 800696e:	f000 b869 	b.w	8006a44 <_fwalk_sglue>
 8006972:	bf00      	nop
 8006974:	20000034 	.word	0x20000034
 8006978:	080077b5 	.word	0x080077b5
 800697c:	20000044 	.word	0x20000044

08006980 <cleanup_stdio>:
 8006980:	6841      	ldr	r1, [r0, #4]
 8006982:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <cleanup_stdio+0x34>)
 8006984:	4299      	cmp	r1, r3
 8006986:	b510      	push	{r4, lr}
 8006988:	4604      	mov	r4, r0
 800698a:	d001      	beq.n	8006990 <cleanup_stdio+0x10>
 800698c:	f000 ff12 	bl	80077b4 <_fflush_r>
 8006990:	68a1      	ldr	r1, [r4, #8]
 8006992:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <cleanup_stdio+0x38>)
 8006994:	4299      	cmp	r1, r3
 8006996:	d002      	beq.n	800699e <cleanup_stdio+0x1e>
 8006998:	4620      	mov	r0, r4
 800699a:	f000 ff0b 	bl	80077b4 <_fflush_r>
 800699e:	68e1      	ldr	r1, [r4, #12]
 80069a0:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <cleanup_stdio+0x3c>)
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d004      	beq.n	80069b0 <cleanup_stdio+0x30>
 80069a6:	4620      	mov	r0, r4
 80069a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ac:	f000 bf02 	b.w	80077b4 <_fflush_r>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	bf00      	nop
 80069b4:	200003a0 	.word	0x200003a0
 80069b8:	20000408 	.word	0x20000408
 80069bc:	20000470 	.word	0x20000470

080069c0 <global_stdio_init.part.0>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <global_stdio_init.part.0+0x30>)
 80069c4:	2104      	movs	r1, #4
 80069c6:	4c0b      	ldr	r4, [pc, #44]	@ (80069f4 <global_stdio_init.part.0+0x34>)
 80069c8:	4a0b      	ldr	r2, [pc, #44]	@ (80069f8 <global_stdio_init.part.0+0x38>)
 80069ca:	4620      	mov	r0, r4
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f7ff ff94 	bl	80068fc <std>
 80069d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069d8:	2201      	movs	r2, #1
 80069da:	2109      	movs	r1, #9
 80069dc:	f7ff ff8e 	bl	80068fc <std>
 80069e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069e4:	2202      	movs	r2, #2
 80069e6:	2112      	movs	r1, #18
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ec:	f7ff bf86 	b.w	80068fc <std>
 80069f0:	200004d8 	.word	0x200004d8
 80069f4:	200003a0 	.word	0x200003a0
 80069f8:	08006969 	.word	0x08006969

080069fc <__sfp_lock_acquire>:
 80069fc:	4801      	ldr	r0, [pc, #4]	@ (8006a04 <__sfp_lock_acquire+0x8>)
 80069fe:	f000 b930 	b.w	8006c62 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	200004e1 	.word	0x200004e1

08006a08 <__sfp_lock_release>:
 8006a08:	4801      	ldr	r0, [pc, #4]	@ (8006a10 <__sfp_lock_release+0x8>)
 8006a0a:	f000 b92b 	b.w	8006c64 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	200004e1 	.word	0x200004e1

08006a14 <__sinit>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
 8006a18:	f7ff fff0 	bl	80069fc <__sfp_lock_acquire>
 8006a1c:	6a23      	ldr	r3, [r4, #32]
 8006a1e:	b11b      	cbz	r3, 8006a28 <__sinit+0x14>
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f7ff bff0 	b.w	8006a08 <__sfp_lock_release>
 8006a28:	4b04      	ldr	r3, [pc, #16]	@ (8006a3c <__sinit+0x28>)
 8006a2a:	6223      	str	r3, [r4, #32]
 8006a2c:	4b04      	ldr	r3, [pc, #16]	@ (8006a40 <__sinit+0x2c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f5      	bne.n	8006a20 <__sinit+0xc>
 8006a34:	f7ff ffc4 	bl	80069c0 <global_stdio_init.part.0>
 8006a38:	e7f2      	b.n	8006a20 <__sinit+0xc>
 8006a3a:	bf00      	nop
 8006a3c:	08006981 	.word	0x08006981
 8006a40:	200004d8 	.word	0x200004d8

08006a44 <_fwalk_sglue>:
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	4607      	mov	r7, r0
 8006a4a:	4688      	mov	r8, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a54:	f1b9 0901 	subs.w	r9, r9, #1
 8006a58:	d505      	bpl.n	8006a66 <_fwalk_sglue+0x22>
 8006a5a:	6824      	ldr	r4, [r4, #0]
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d1f7      	bne.n	8006a50 <_fwalk_sglue+0xc>
 8006a60:	4630      	mov	r0, r6
 8006a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d907      	bls.n	8006a7c <_fwalk_sglue+0x38>
 8006a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a70:	3301      	adds	r3, #1
 8006a72:	d003      	beq.n	8006a7c <_fwalk_sglue+0x38>
 8006a74:	4629      	mov	r1, r5
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	4306      	orrs	r6, r0
 8006a7c:	3568      	adds	r5, #104	@ 0x68
 8006a7e:	e7e9      	b.n	8006a54 <_fwalk_sglue+0x10>

08006a80 <iprintf>:
 8006a80:	b40f      	push	{r0, r1, r2, r3}
 8006a82:	b507      	push	{r0, r1, r2, lr}
 8006a84:	4906      	ldr	r1, [pc, #24]	@ (8006aa0 <iprintf+0x20>)
 8006a86:	ab04      	add	r3, sp, #16
 8006a88:	6808      	ldr	r0, [r1, #0]
 8006a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a8e:	6881      	ldr	r1, [r0, #8]
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	f000 fb63 	bl	800715c <_vfiprintf_r>
 8006a96:	b003      	add	sp, #12
 8006a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
 8006aa0:	20000040 	.word	0x20000040

08006aa4 <siprintf>:
 8006aa4:	b40e      	push	{r1, r2, r3}
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	b09d      	sub	sp, #116	@ 0x74
 8006aaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006aae:	2400      	movs	r4, #0
 8006ab0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ab2:	9002      	str	r0, [sp, #8]
 8006ab4:	9006      	str	r0, [sp, #24]
 8006ab6:	9107      	str	r1, [sp, #28]
 8006ab8:	9104      	str	r1, [sp, #16]
 8006aba:	4809      	ldr	r0, [pc, #36]	@ (8006ae0 <siprintf+0x3c>)
 8006abc:	4909      	ldr	r1, [pc, #36]	@ (8006ae4 <siprintf+0x40>)
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	9105      	str	r1, [sp, #20]
 8006ac4:	a902      	add	r1, sp, #8
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006acc:	f000 fa20 	bl	8006f10 <_svfiprintf_r>
 8006ad0:	9b02      	ldr	r3, [sp, #8]
 8006ad2:	701c      	strb	r4, [r3, #0]
 8006ad4:	b01d      	add	sp, #116	@ 0x74
 8006ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ada:	b003      	add	sp, #12
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000040 	.word	0x20000040
 8006ae4:	ffff0208 	.word	0xffff0208

08006ae8 <__sread>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	f000 f868 	bl	8006bc4 <_read_r>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	bfab      	itete	ge
 8006af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006afa:	89a3      	ldrhlt	r3, [r4, #12]
 8006afc:	181b      	addge	r3, r3, r0
 8006afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b02:	bfac      	ite	ge
 8006b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b06:	81a3      	strhlt	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__swrite>:
 8006b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	461f      	mov	r7, r3
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	4605      	mov	r5, r0
 8006b14:	460c      	mov	r4, r1
 8006b16:	05db      	lsls	r3, r3, #23
 8006b18:	4616      	mov	r6, r2
 8006b1a:	d505      	bpl.n	8006b28 <__swrite+0x1e>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b24:	f000 f83c 	bl	8006ba0 <_lseek_r>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b30:	4628      	mov	r0, r5
 8006b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	463b      	mov	r3, r7
 8006b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	f000 b853 	b.w	8006be8 <_write_r>

08006b42 <__sseek>:
 8006b42:	b510      	push	{r4, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	f000 f829 	bl	8006ba0 <_lseek_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	bf15      	itete	ne
 8006b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b5e:	81a3      	strheq	r3, [r4, #12]
 8006b60:	bf18      	it	ne
 8006b62:	81a3      	strhne	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__sclose>:
 8006b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6a:	f000 b809 	b.w	8006b80 <_close_r>

08006b6e <memset>:
 8006b6e:	4402      	add	r2, r0
 8006b70:	4603      	mov	r3, r0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d100      	bne.n	8006b78 <memset+0xa>
 8006b76:	4770      	bx	lr
 8006b78:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7c:	e7f9      	b.n	8006b72 <memset+0x4>
	...

08006b80 <_close_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	2300      	movs	r3, #0
 8006b84:	4d05      	ldr	r5, [pc, #20]	@ (8006b9c <_close_r+0x1c>)
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f7fa fe6d 	bl	800186a <_close>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_close_r+0x1a>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_close_r+0x1a>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	200004dc 	.word	0x200004dc

08006ba0 <_lseek_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4d06      	ldr	r5, [pc, #24]	@ (8006bc0 <_lseek_r+0x20>)
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fa fe82 	bl	80018b8 <_lseek>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_lseek_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_lseek_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	200004dc 	.word	0x200004dc

08006bc4 <_read_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4d06      	ldr	r5, [pc, #24]	@ (8006be4 <_read_r+0x20>)
 8006bca:	4608      	mov	r0, r1
 8006bcc:	4611      	mov	r1, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	602a      	str	r2, [r5, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f7fa fe10 	bl	80017f8 <_read>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_read_r+0x1e>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_read_r+0x1e>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	200004dc 	.word	0x200004dc

08006be8 <_write_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	4d06      	ldr	r5, [pc, #24]	@ (8006c08 <_write_r+0x20>)
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f7fa fe1b 	bl	8001832 <_write>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_write_r+0x1e>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_write_r+0x1e>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	200004dc 	.word	0x200004dc

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	@ (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000040 	.word	0x20000040

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c50 <__libc_init_array+0x38>)
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	4c0d      	ldr	r4, [pc, #52]	@ (8006c54 <__libc_init_array+0x3c>)
 8006c20:	1b64      	subs	r4, r4, r5
 8006c22:	10a4      	asrs	r4, r4, #2
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	@ (8006c58 <__libc_init_array+0x40>)
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8006c5c <__libc_init_array+0x44>)
 8006c2e:	f001 ffa3 	bl	8008b78 <_init>
 8006c32:	1b64      	subs	r4, r4, r5
 8006c34:	10a4      	asrs	r4, r4, #2
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	3601      	adds	r6, #1
 8006c42:	4798      	blx	r3
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	4798      	blx	r3
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08008e78 	.word	0x08008e78
 8006c54:	08008e78 	.word	0x08008e78
 8006c58:	08008e78 	.word	0x08008e78
 8006c5c:	08008e7c 	.word	0x08008e7c

08006c60 <__retarget_lock_init_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <__retarget_lock_acquire_recursive>:
 8006c62:	4770      	bx	lr

08006c64 <__retarget_lock_release_recursive>:
 8006c64:	4770      	bx	lr
	...

08006c68 <_free_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d041      	beq.n	8006cf4 <_free_r+0x8c>
 8006c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c74:	1f0c      	subs	r4, r1, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfb8      	it	lt
 8006c7a:	18e4      	addlt	r4, r4, r3
 8006c7c:	f000 f8e0 	bl	8006e40 <__malloc_lock>
 8006c80:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <_free_r+0x90>)
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	b933      	cbnz	r3, 8006c94 <_free_r+0x2c>
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	6014      	str	r4, [r2, #0]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c90:	f000 b8dc 	b.w	8006e4c <__malloc_unlock>
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d908      	bls.n	8006caa <_free_r+0x42>
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	1821      	adds	r1, r4, r0
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	bf01      	itttt	eq
 8006ca0:	6819      	ldreq	r1, [r3, #0]
 8006ca2:	685b      	ldreq	r3, [r3, #4]
 8006ca4:	1809      	addeq	r1, r1, r0
 8006ca6:	6021      	streq	r1, [r4, #0]
 8006ca8:	e7ed      	b.n	8006c86 <_free_r+0x1e>
 8006caa:	461a      	mov	r2, r3
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b10b      	cbz	r3, 8006cb4 <_free_r+0x4c>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d9fa      	bls.n	8006caa <_free_r+0x42>
 8006cb4:	6811      	ldr	r1, [r2, #0]
 8006cb6:	1850      	adds	r0, r2, r1
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d10b      	bne.n	8006cd4 <_free_r+0x6c>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	4401      	add	r1, r0
 8006cc0:	1850      	adds	r0, r2, r1
 8006cc2:	6011      	str	r1, [r2, #0]
 8006cc4:	4283      	cmp	r3, r0
 8006cc6:	d1e0      	bne.n	8006c8a <_free_r+0x22>
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4408      	add	r0, r1
 8006cce:	6053      	str	r3, [r2, #4]
 8006cd0:	6010      	str	r0, [r2, #0]
 8006cd2:	e7da      	b.n	8006c8a <_free_r+0x22>
 8006cd4:	d902      	bls.n	8006cdc <_free_r+0x74>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	e7d6      	b.n	8006c8a <_free_r+0x22>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	1821      	adds	r1, r4, r0
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	bf02      	ittt	eq
 8006ce4:	6819      	ldreq	r1, [r3, #0]
 8006ce6:	685b      	ldreq	r3, [r3, #4]
 8006ce8:	1809      	addeq	r1, r1, r0
 8006cea:	6063      	str	r3, [r4, #4]
 8006cec:	bf08      	it	eq
 8006cee:	6021      	streq	r1, [r4, #0]
 8006cf0:	6054      	str	r4, [r2, #4]
 8006cf2:	e7ca      	b.n	8006c8a <_free_r+0x22>
 8006cf4:	bd38      	pop	{r3, r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200004e8 	.word	0x200004e8

08006cfc <sbrk_aligned>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8006d3c <sbrk_aligned+0x40>)
 8006d00:	460c      	mov	r4, r1
 8006d02:	4605      	mov	r5, r0
 8006d04:	6831      	ldr	r1, [r6, #0]
 8006d06:	b911      	cbnz	r1, 8006d0e <sbrk_aligned+0x12>
 8006d08:	f000 fe2a 	bl	8007960 <_sbrk_r>
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fe25 	bl	8007960 <_sbrk_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d103      	bne.n	8006d22 <sbrk_aligned+0x26>
 8006d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d1e:	4620      	mov	r0, r4
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d0f8      	beq.n	8006d1e <sbrk_aligned+0x22>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 fe16 	bl	8007960 <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1f2      	bne.n	8006d1e <sbrk_aligned+0x22>
 8006d38:	e7ef      	b.n	8006d1a <sbrk_aligned+0x1e>
 8006d3a:	bf00      	nop
 8006d3c:	200004e4 	.word	0x200004e4

08006d40 <_malloc_r>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	1ccd      	adds	r5, r1, #3
 8006d46:	4606      	mov	r6, r0
 8006d48:	f025 0503 	bic.w	r5, r5, #3
 8006d4c:	3508      	adds	r5, #8
 8006d4e:	2d0c      	cmp	r5, #12
 8006d50:	bf38      	it	cc
 8006d52:	250c      	movcc	r5, #12
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	db01      	blt.n	8006d5c <_malloc_r+0x1c>
 8006d58:	42a9      	cmp	r1, r5
 8006d5a:	d904      	bls.n	8006d66 <_malloc_r+0x26>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	2000      	movs	r0, #0
 8006d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e3c <_malloc_r+0xfc>
 8006d6a:	f000 f869 	bl	8006e40 <__malloc_lock>
 8006d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d72:	461c      	mov	r4, r3
 8006d74:	bb44      	cbnz	r4, 8006dc8 <_malloc_r+0x88>
 8006d76:	4629      	mov	r1, r5
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff ffbf 	bl	8006cfc <sbrk_aligned>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	4604      	mov	r4, r0
 8006d82:	d158      	bne.n	8006e36 <_malloc_r+0xf6>
 8006d84:	f8d8 4000 	ldr.w	r4, [r8]
 8006d88:	4627      	mov	r7, r4
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	d143      	bne.n	8006e16 <_malloc_r+0xd6>
 8006d8e:	2c00      	cmp	r4, #0
 8006d90:	d04b      	beq.n	8006e2a <_malloc_r+0xea>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	eb04 0903 	add.w	r9, r4, r3
 8006d9c:	f000 fde0 	bl	8007960 <_sbrk_r>
 8006da0:	4581      	cmp	r9, r0
 8006da2:	d142      	bne.n	8006e2a <_malloc_r+0xea>
 8006da4:	6821      	ldr	r1, [r4, #0]
 8006da6:	4630      	mov	r0, r6
 8006da8:	1a6d      	subs	r5, r5, r1
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7ff ffa6 	bl	8006cfc <sbrk_aligned>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d03a      	beq.n	8006e2a <_malloc_r+0xea>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	442b      	add	r3, r5
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	f8d8 3000 	ldr.w	r3, [r8]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	bb62      	cbnz	r2, 8006e1c <_malloc_r+0xdc>
 8006dc2:	f8c8 7000 	str.w	r7, [r8]
 8006dc6:	e00f      	b.n	8006de8 <_malloc_r+0xa8>
 8006dc8:	6822      	ldr	r2, [r4, #0]
 8006dca:	1b52      	subs	r2, r2, r5
 8006dcc:	d420      	bmi.n	8006e10 <_malloc_r+0xd0>
 8006dce:	2a0b      	cmp	r2, #11
 8006dd0:	d917      	bls.n	8006e02 <_malloc_r+0xc2>
 8006dd2:	1961      	adds	r1, r4, r5
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	6025      	str	r5, [r4, #0]
 8006dd8:	bf18      	it	ne
 8006dda:	6059      	strne	r1, [r3, #4]
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	bf08      	it	eq
 8006de0:	f8c8 1000 	streq.w	r1, [r8]
 8006de4:	5162      	str	r2, [r4, r5]
 8006de6:	604b      	str	r3, [r1, #4]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f82f 	bl	8006e4c <__malloc_unlock>
 8006dee:	f104 000b 	add.w	r0, r4, #11
 8006df2:	1d23      	adds	r3, r4, #4
 8006df4:	f020 0007 	bic.w	r0, r0, #7
 8006df8:	1ac2      	subs	r2, r0, r3
 8006dfa:	bf1c      	itt	ne
 8006dfc:	1a1b      	subne	r3, r3, r0
 8006dfe:	50a3      	strne	r3, [r4, r2]
 8006e00:	e7af      	b.n	8006d62 <_malloc_r+0x22>
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	bf0c      	ite	eq
 8006e08:	f8c8 2000 	streq.w	r2, [r8]
 8006e0c:	605a      	strne	r2, [r3, #4]
 8006e0e:	e7eb      	b.n	8006de8 <_malloc_r+0xa8>
 8006e10:	4623      	mov	r3, r4
 8006e12:	6864      	ldr	r4, [r4, #4]
 8006e14:	e7ae      	b.n	8006d74 <_malloc_r+0x34>
 8006e16:	463c      	mov	r4, r7
 8006e18:	687f      	ldr	r7, [r7, #4]
 8006e1a:	e7b6      	b.n	8006d8a <_malloc_r+0x4a>
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d1fb      	bne.n	8006e1c <_malloc_r+0xdc>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6053      	str	r3, [r2, #4]
 8006e28:	e7de      	b.n	8006de8 <_malloc_r+0xa8>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	6033      	str	r3, [r6, #0]
 8006e30:	f000 f80c 	bl	8006e4c <__malloc_unlock>
 8006e34:	e794      	b.n	8006d60 <_malloc_r+0x20>
 8006e36:	6005      	str	r5, [r0, #0]
 8006e38:	e7d6      	b.n	8006de8 <_malloc_r+0xa8>
 8006e3a:	bf00      	nop
 8006e3c:	200004e8 	.word	0x200004e8

08006e40 <__malloc_lock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	@ (8006e48 <__malloc_lock+0x8>)
 8006e42:	f7ff bf0e 	b.w	8006c62 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	200004e0 	.word	0x200004e0

08006e4c <__malloc_unlock>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	@ (8006e54 <__malloc_unlock+0x8>)
 8006e4e:	f7ff bf09 	b.w	8006c64 <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	200004e0 	.word	0x200004e0

08006e58 <__ssputs_r>:
 8006e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	461f      	mov	r7, r3
 8006e5e:	688e      	ldr	r6, [r1, #8]
 8006e60:	4682      	mov	sl, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	42be      	cmp	r6, r7
 8006e66:	4690      	mov	r8, r2
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	d82d      	bhi.n	8006ec8 <__ssputs_r+0x70>
 8006e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e74:	d026      	beq.n	8006ec4 <__ssputs_r+0x6c>
 8006e76:	6965      	ldr	r5, [r4, #20]
 8006e78:	6909      	ldr	r1, [r1, #16]
 8006e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e7e:	eba3 0901 	sub.w	r9, r3, r1
 8006e82:	1c7b      	adds	r3, r7, #1
 8006e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e88:	444b      	add	r3, r9
 8006e8a:	106d      	asrs	r5, r5, #1
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	bf38      	it	cc
 8006e90:	461d      	movcc	r5, r3
 8006e92:	0553      	lsls	r3, r2, #21
 8006e94:	d527      	bpl.n	8006ee6 <__ssputs_r+0x8e>
 8006e96:	4629      	mov	r1, r5
 8006e98:	f7ff ff52 	bl	8006d40 <_malloc_r>
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	b360      	cbz	r0, 8006efa <__ssputs_r+0xa2>
 8006ea0:	464a      	mov	r2, r9
 8006ea2:	6921      	ldr	r1, [r4, #16]
 8006ea4:	f000 fd7a 	bl	800799c <memcpy>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	6126      	str	r6, [r4, #16]
 8006eb6:	444e      	add	r6, r9
 8006eb8:	6165      	str	r5, [r4, #20]
 8006eba:	eba5 0509 	sub.w	r5, r5, r9
 8006ebe:	6026      	str	r6, [r4, #0]
 8006ec0:	463e      	mov	r6, r7
 8006ec2:	60a5      	str	r5, [r4, #8]
 8006ec4:	42be      	cmp	r6, r7
 8006ec6:	d900      	bls.n	8006eca <__ssputs_r+0x72>
 8006ec8:	463e      	mov	r6, r7
 8006eca:	4632      	mov	r2, r6
 8006ecc:	4641      	mov	r1, r8
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	f000 fd2c 	bl	800792c <memmove>
 8006ed4:	68a3      	ldr	r3, [r4, #8]
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	1b9b      	subs	r3, r3, r6
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	4433      	add	r3, r6
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	f000 fd65 	bl	80079b6 <_realloc_r>
 8006eec:	4606      	mov	r6, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d1e0      	bne.n	8006eb4 <__ssputs_r+0x5c>
 8006ef2:	6921      	ldr	r1, [r4, #16]
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	f7ff feb7 	bl	8006c68 <_free_r>
 8006efa:	230c      	movs	r3, #12
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	f8ca 3000 	str.w	r3, [sl]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	e7e9      	b.n	8006ee2 <__ssputs_r+0x8a>
	...

08006f10 <_svfiprintf_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4698      	mov	r8, r3
 8006f16:	898b      	ldrh	r3, [r1, #12]
 8006f18:	b09d      	sub	sp, #116	@ 0x74
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	460d      	mov	r5, r1
 8006f20:	4614      	mov	r4, r2
 8006f22:	d510      	bpl.n	8006f46 <_svfiprintf_r+0x36>
 8006f24:	690b      	ldr	r3, [r1, #16]
 8006f26:	b973      	cbnz	r3, 8006f46 <_svfiprintf_r+0x36>
 8006f28:	2140      	movs	r1, #64	@ 0x40
 8006f2a:	f7ff ff09 	bl	8006d40 <_malloc_r>
 8006f2e:	6028      	str	r0, [r5, #0]
 8006f30:	6128      	str	r0, [r5, #16]
 8006f32:	b930      	cbnz	r0, 8006f42 <_svfiprintf_r+0x32>
 8006f34:	230c      	movs	r3, #12
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	b01d      	add	sp, #116	@ 0x74
 8006f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f42:	2340      	movs	r3, #64	@ 0x40
 8006f44:	616b      	str	r3, [r5, #20]
 8006f46:	2300      	movs	r3, #0
 8006f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4c:	f04f 0901 	mov.w	r9, #1
 8006f50:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80070f4 <_svfiprintf_r+0x1e4>
 8006f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f56:	2320      	movs	r3, #32
 8006f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f5c:	2330      	movs	r3, #48	@ 0x30
 8006f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f62:	4623      	mov	r3, r4
 8006f64:	469a      	mov	sl, r3
 8006f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f6a:	b10a      	cbz	r2, 8006f70 <_svfiprintf_r+0x60>
 8006f6c:	2a25      	cmp	r2, #37	@ 0x25
 8006f6e:	d1f9      	bne.n	8006f64 <_svfiprintf_r+0x54>
 8006f70:	ebba 0b04 	subs.w	fp, sl, r4
 8006f74:	d00b      	beq.n	8006f8e <_svfiprintf_r+0x7e>
 8006f76:	465b      	mov	r3, fp
 8006f78:	4622      	mov	r2, r4
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f7ff ff6b 	bl	8006e58 <__ssputs_r>
 8006f82:	3001      	adds	r0, #1
 8006f84:	f000 80a7 	beq.w	80070d6 <_svfiprintf_r+0x1c6>
 8006f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f8a:	445a      	add	r2, fp
 8006f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 809f 	beq.w	80070d6 <_svfiprintf_r+0x1c6>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9e:	f10a 0a01 	add.w	sl, sl, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006faa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb0:	4654      	mov	r4, sl
 8006fb2:	2205      	movs	r2, #5
 8006fb4:	484f      	ldr	r0, [pc, #316]	@ (80070f4 <_svfiprintf_r+0x1e4>)
 8006fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fba:	f000 fce1 	bl	8007980 <memchr>
 8006fbe:	9a04      	ldr	r2, [sp, #16]
 8006fc0:	b9d8      	cbnz	r0, 8006ffa <_svfiprintf_r+0xea>
 8006fc2:	06d0      	lsls	r0, r2, #27
 8006fc4:	bf44      	itt	mi
 8006fc6:	2320      	movmi	r3, #32
 8006fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fcc:	0711      	lsls	r1, r2, #28
 8006fce:	bf44      	itt	mi
 8006fd0:	232b      	movmi	r3, #43	@ 0x2b
 8006fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fdc:	d015      	beq.n	800700a <_svfiprintf_r+0xfa>
 8006fde:	9a07      	ldr	r2, [sp, #28]
 8006fe0:	4654      	mov	r4, sl
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	f04f 0c0a 	mov.w	ip, #10
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fee:	3b30      	subs	r3, #48	@ 0x30
 8006ff0:	2b09      	cmp	r3, #9
 8006ff2:	d94b      	bls.n	800708c <_svfiprintf_r+0x17c>
 8006ff4:	b1b0      	cbz	r0, 8007024 <_svfiprintf_r+0x114>
 8006ff6:	9207      	str	r2, [sp, #28]
 8006ff8:	e014      	b.n	8007024 <_svfiprintf_r+0x114>
 8006ffa:	eba0 0308 	sub.w	r3, r0, r8
 8006ffe:	46a2      	mov	sl, r4
 8007000:	fa09 f303 	lsl.w	r3, r9, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	e7d2      	b.n	8006fb0 <_svfiprintf_r+0xa0>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	1d19      	adds	r1, r3, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	9103      	str	r1, [sp, #12]
 8007014:	bfbb      	ittet	lt
 8007016:	425b      	neglt	r3, r3
 8007018:	f042 0202 	orrlt.w	r2, r2, #2
 800701c:	9307      	strge	r3, [sp, #28]
 800701e:	9307      	strlt	r3, [sp, #28]
 8007020:	bfb8      	it	lt
 8007022:	9204      	strlt	r2, [sp, #16]
 8007024:	7823      	ldrb	r3, [r4, #0]
 8007026:	2b2e      	cmp	r3, #46	@ 0x2e
 8007028:	d10a      	bne.n	8007040 <_svfiprintf_r+0x130>
 800702a:	7863      	ldrb	r3, [r4, #1]
 800702c:	2b2a      	cmp	r3, #42	@ 0x2a
 800702e:	d132      	bne.n	8007096 <_svfiprintf_r+0x186>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	3402      	adds	r4, #2
 8007034:	1d1a      	adds	r2, r3, #4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	9305      	str	r3, [sp, #20]
 8007040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007104 <_svfiprintf_r+0x1f4>
 8007044:	2203      	movs	r2, #3
 8007046:	7821      	ldrb	r1, [r4, #0]
 8007048:	4650      	mov	r0, sl
 800704a:	f000 fc99 	bl	8007980 <memchr>
 800704e:	b138      	cbz	r0, 8007060 <_svfiprintf_r+0x150>
 8007050:	eba0 000a 	sub.w	r0, r0, sl
 8007054:	2240      	movs	r2, #64	@ 0x40
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	3401      	adds	r4, #1
 800705a:	4082      	lsls	r2, r0
 800705c:	4313      	orrs	r3, r2
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	2206      	movs	r2, #6
 8007066:	4824      	ldr	r0, [pc, #144]	@ (80070f8 <_svfiprintf_r+0x1e8>)
 8007068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800706c:	f000 fc88 	bl	8007980 <memchr>
 8007070:	2800      	cmp	r0, #0
 8007072:	d036      	beq.n	80070e2 <_svfiprintf_r+0x1d2>
 8007074:	4b21      	ldr	r3, [pc, #132]	@ (80070fc <_svfiprintf_r+0x1ec>)
 8007076:	bb1b      	cbnz	r3, 80070c0 <_svfiprintf_r+0x1b0>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	3307      	adds	r3, #7
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	3308      	adds	r3, #8
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007086:	4433      	add	r3, r6
 8007088:	9309      	str	r3, [sp, #36]	@ 0x24
 800708a:	e76a      	b.n	8006f62 <_svfiprintf_r+0x52>
 800708c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007090:	460c      	mov	r4, r1
 8007092:	2001      	movs	r0, #1
 8007094:	e7a8      	b.n	8006fe8 <_svfiprintf_r+0xd8>
 8007096:	2300      	movs	r3, #0
 8007098:	3401      	adds	r4, #1
 800709a:	f04f 0c0a 	mov.w	ip, #10
 800709e:	4619      	mov	r1, r3
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	4620      	mov	r0, r4
 80070a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a8:	3a30      	subs	r2, #48	@ 0x30
 80070aa:	2a09      	cmp	r2, #9
 80070ac:	d903      	bls.n	80070b6 <_svfiprintf_r+0x1a6>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0c6      	beq.n	8007040 <_svfiprintf_r+0x130>
 80070b2:	9105      	str	r1, [sp, #20]
 80070b4:	e7c4      	b.n	8007040 <_svfiprintf_r+0x130>
 80070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ba:	4604      	mov	r4, r0
 80070bc:	2301      	movs	r3, #1
 80070be:	e7f0      	b.n	80070a2 <_svfiprintf_r+0x192>
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	462a      	mov	r2, r5
 80070c4:	a904      	add	r1, sp, #16
 80070c6:	4638      	mov	r0, r7
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <_svfiprintf_r+0x1f0>)
 80070cc:	f3af 8000 	nop.w
 80070d0:	1c42      	adds	r2, r0, #1
 80070d2:	4606      	mov	r6, r0
 80070d4:	d1d6      	bne.n	8007084 <_svfiprintf_r+0x174>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	065b      	lsls	r3, r3, #25
 80070da:	f53f af2d 	bmi.w	8006f38 <_svfiprintf_r+0x28>
 80070de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e0:	e72c      	b.n	8006f3c <_svfiprintf_r+0x2c>
 80070e2:	ab03      	add	r3, sp, #12
 80070e4:	462a      	mov	r2, r5
 80070e6:	a904      	add	r1, sp, #16
 80070e8:	4638      	mov	r0, r7
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4b04      	ldr	r3, [pc, #16]	@ (8007100 <_svfiprintf_r+0x1f0>)
 80070ee:	f000 f9bf 	bl	8007470 <_printf_i>
 80070f2:	e7ed      	b.n	80070d0 <_svfiprintf_r+0x1c0>
 80070f4:	08008c60 	.word	0x08008c60
 80070f8:	08008c6a 	.word	0x08008c6a
 80070fc:	00000000 	.word	0x00000000
 8007100:	08006e59 	.word	0x08006e59
 8007104:	08008c66 	.word	0x08008c66

08007108 <__sfputc_r>:
 8007108:	6893      	ldr	r3, [r2, #8]
 800710a:	3b01      	subs	r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	b410      	push	{r4}
 8007110:	6093      	str	r3, [r2, #8]
 8007112:	da08      	bge.n	8007126 <__sfputc_r+0x1e>
 8007114:	6994      	ldr	r4, [r2, #24]
 8007116:	42a3      	cmp	r3, r4
 8007118:	db01      	blt.n	800711e <__sfputc_r+0x16>
 800711a:	290a      	cmp	r1, #10
 800711c:	d103      	bne.n	8007126 <__sfputc_r+0x1e>
 800711e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007122:	f000 bb6f 	b.w	8007804 <__swbuf_r>
 8007126:	6813      	ldr	r3, [r2, #0]
 8007128:	1c58      	adds	r0, r3, #1
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	4608      	mov	r0, r1
 800712e:	7019      	strb	r1, [r3, #0]
 8007130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007134:	4770      	bx	lr

08007136 <__sfputs_r>:
 8007136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	4614      	mov	r4, r2
 800713e:	18d5      	adds	r5, r2, r3
 8007140:	42ac      	cmp	r4, r5
 8007142:	d101      	bne.n	8007148 <__sfputs_r+0x12>
 8007144:	2000      	movs	r0, #0
 8007146:	e007      	b.n	8007158 <__sfputs_r+0x22>
 8007148:	463a      	mov	r2, r7
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ffda 	bl	8007108 <__sfputc_r>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d1f3      	bne.n	8007140 <__sfputs_r+0xa>
 8007158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800715c <_vfiprintf_r>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	460d      	mov	r5, r1
 8007162:	b09d      	sub	sp, #116	@ 0x74
 8007164:	4614      	mov	r4, r2
 8007166:	4698      	mov	r8, r3
 8007168:	4606      	mov	r6, r0
 800716a:	b118      	cbz	r0, 8007174 <_vfiprintf_r+0x18>
 800716c:	6a03      	ldr	r3, [r0, #32]
 800716e:	b90b      	cbnz	r3, 8007174 <_vfiprintf_r+0x18>
 8007170:	f7ff fc50 	bl	8006a14 <__sinit>
 8007174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007176:	07d9      	lsls	r1, r3, #31
 8007178:	d405      	bmi.n	8007186 <_vfiprintf_r+0x2a>
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	059a      	lsls	r2, r3, #22
 800717e:	d402      	bmi.n	8007186 <_vfiprintf_r+0x2a>
 8007180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007182:	f7ff fd6e 	bl	8006c62 <__retarget_lock_acquire_recursive>
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	071b      	lsls	r3, r3, #28
 800718a:	d501      	bpl.n	8007190 <_vfiprintf_r+0x34>
 800718c:	692b      	ldr	r3, [r5, #16]
 800718e:	b99b      	cbnz	r3, 80071b8 <_vfiprintf_r+0x5c>
 8007190:	4629      	mov	r1, r5
 8007192:	4630      	mov	r0, r6
 8007194:	f000 fb74 	bl	8007880 <__swsetup_r>
 8007198:	b170      	cbz	r0, 80071b8 <_vfiprintf_r+0x5c>
 800719a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800719c:	07dc      	lsls	r4, r3, #31
 800719e:	d504      	bpl.n	80071aa <_vfiprintf_r+0x4e>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	b01d      	add	sp, #116	@ 0x74
 80071a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	0598      	lsls	r0, r3, #22
 80071ae:	d4f7      	bmi.n	80071a0 <_vfiprintf_r+0x44>
 80071b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071b2:	f7ff fd57 	bl	8006c64 <__retarget_lock_release_recursive>
 80071b6:	e7f3      	b.n	80071a0 <_vfiprintf_r+0x44>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80071be:	f04f 0901 	mov.w	r9, #1
 80071c2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8007378 <_vfiprintf_r+0x21c>
 80071c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c8:	2320      	movs	r3, #32
 80071ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ce:	2330      	movs	r3, #48	@ 0x30
 80071d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071d4:	4623      	mov	r3, r4
 80071d6:	469a      	mov	sl, r3
 80071d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071dc:	b10a      	cbz	r2, 80071e2 <_vfiprintf_r+0x86>
 80071de:	2a25      	cmp	r2, #37	@ 0x25
 80071e0:	d1f9      	bne.n	80071d6 <_vfiprintf_r+0x7a>
 80071e2:	ebba 0b04 	subs.w	fp, sl, r4
 80071e6:	d00b      	beq.n	8007200 <_vfiprintf_r+0xa4>
 80071e8:	465b      	mov	r3, fp
 80071ea:	4622      	mov	r2, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ffa1 	bl	8007136 <__sfputs_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	f000 80a7 	beq.w	8007348 <_vfiprintf_r+0x1ec>
 80071fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071fc:	445a      	add	r2, fp
 80071fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007200:	f89a 3000 	ldrb.w	r3, [sl]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 809f 	beq.w	8007348 <_vfiprintf_r+0x1ec>
 800720a:	2300      	movs	r3, #0
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	f10a 0a01 	add.w	sl, sl, #1
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	9307      	str	r3, [sp, #28]
 8007218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800721c:	931a      	str	r3, [sp, #104]	@ 0x68
 800721e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007222:	4654      	mov	r4, sl
 8007224:	2205      	movs	r2, #5
 8007226:	4854      	ldr	r0, [pc, #336]	@ (8007378 <_vfiprintf_r+0x21c>)
 8007228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722c:	f000 fba8 	bl	8007980 <memchr>
 8007230:	9a04      	ldr	r2, [sp, #16]
 8007232:	b9d8      	cbnz	r0, 800726c <_vfiprintf_r+0x110>
 8007234:	06d1      	lsls	r1, r2, #27
 8007236:	bf44      	itt	mi
 8007238:	2320      	movmi	r3, #32
 800723a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800723e:	0713      	lsls	r3, r2, #28
 8007240:	bf44      	itt	mi
 8007242:	232b      	movmi	r3, #43	@ 0x2b
 8007244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007248:	f89a 3000 	ldrb.w	r3, [sl]
 800724c:	2b2a      	cmp	r3, #42	@ 0x2a
 800724e:	d015      	beq.n	800727c <_vfiprintf_r+0x120>
 8007250:	9a07      	ldr	r2, [sp, #28]
 8007252:	4654      	mov	r4, sl
 8007254:	2000      	movs	r0, #0
 8007256:	f04f 0c0a 	mov.w	ip, #10
 800725a:	4621      	mov	r1, r4
 800725c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007260:	3b30      	subs	r3, #48	@ 0x30
 8007262:	2b09      	cmp	r3, #9
 8007264:	d94b      	bls.n	80072fe <_vfiprintf_r+0x1a2>
 8007266:	b1b0      	cbz	r0, 8007296 <_vfiprintf_r+0x13a>
 8007268:	9207      	str	r2, [sp, #28]
 800726a:	e014      	b.n	8007296 <_vfiprintf_r+0x13a>
 800726c:	eba0 0308 	sub.w	r3, r0, r8
 8007270:	46a2      	mov	sl, r4
 8007272:	fa09 f303 	lsl.w	r3, r9, r3
 8007276:	4313      	orrs	r3, r2
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	e7d2      	b.n	8007222 <_vfiprintf_r+0xc6>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	1d19      	adds	r1, r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	9103      	str	r1, [sp, #12]
 8007286:	bfbb      	ittet	lt
 8007288:	425b      	neglt	r3, r3
 800728a:	f042 0202 	orrlt.w	r2, r2, #2
 800728e:	9307      	strge	r3, [sp, #28]
 8007290:	9307      	strlt	r3, [sp, #28]
 8007292:	bfb8      	it	lt
 8007294:	9204      	strlt	r2, [sp, #16]
 8007296:	7823      	ldrb	r3, [r4, #0]
 8007298:	2b2e      	cmp	r3, #46	@ 0x2e
 800729a:	d10a      	bne.n	80072b2 <_vfiprintf_r+0x156>
 800729c:	7863      	ldrb	r3, [r4, #1]
 800729e:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a0:	d132      	bne.n	8007308 <_vfiprintf_r+0x1ac>
 80072a2:	9b03      	ldr	r3, [sp, #12]
 80072a4:	3402      	adds	r4, #2
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ae:	9203      	str	r2, [sp, #12]
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007388 <_vfiprintf_r+0x22c>
 80072b6:	2203      	movs	r2, #3
 80072b8:	7821      	ldrb	r1, [r4, #0]
 80072ba:	4650      	mov	r0, sl
 80072bc:	f000 fb60 	bl	8007980 <memchr>
 80072c0:	b138      	cbz	r0, 80072d2 <_vfiprintf_r+0x176>
 80072c2:	eba0 000a 	sub.w	r0, r0, sl
 80072c6:	2240      	movs	r2, #64	@ 0x40
 80072c8:	9b04      	ldr	r3, [sp, #16]
 80072ca:	3401      	adds	r4, #1
 80072cc:	4082      	lsls	r2, r0
 80072ce:	4313      	orrs	r3, r2
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d6:	2206      	movs	r2, #6
 80072d8:	4828      	ldr	r0, [pc, #160]	@ (800737c <_vfiprintf_r+0x220>)
 80072da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072de:	f000 fb4f 	bl	8007980 <memchr>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d03f      	beq.n	8007366 <_vfiprintf_r+0x20a>
 80072e6:	4b26      	ldr	r3, [pc, #152]	@ (8007380 <_vfiprintf_r+0x224>)
 80072e8:	bb1b      	cbnz	r3, 8007332 <_vfiprintf_r+0x1d6>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	3307      	adds	r3, #7
 80072ee:	f023 0307 	bic.w	r3, r3, #7
 80072f2:	3308      	adds	r3, #8
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f8:	443b      	add	r3, r7
 80072fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fc:	e76a      	b.n	80071d4 <_vfiprintf_r+0x78>
 80072fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007302:	460c      	mov	r4, r1
 8007304:	2001      	movs	r0, #1
 8007306:	e7a8      	b.n	800725a <_vfiprintf_r+0xfe>
 8007308:	2300      	movs	r3, #0
 800730a:	3401      	adds	r4, #1
 800730c:	f04f 0c0a 	mov.w	ip, #10
 8007310:	4619      	mov	r1, r3
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	4620      	mov	r0, r4
 8007316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800731a:	3a30      	subs	r2, #48	@ 0x30
 800731c:	2a09      	cmp	r2, #9
 800731e:	d903      	bls.n	8007328 <_vfiprintf_r+0x1cc>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0c6      	beq.n	80072b2 <_vfiprintf_r+0x156>
 8007324:	9105      	str	r1, [sp, #20]
 8007326:	e7c4      	b.n	80072b2 <_vfiprintf_r+0x156>
 8007328:	fb0c 2101 	mla	r1, ip, r1, r2
 800732c:	4604      	mov	r4, r0
 800732e:	2301      	movs	r3, #1
 8007330:	e7f0      	b.n	8007314 <_vfiprintf_r+0x1b8>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	462a      	mov	r2, r5
 8007336:	a904      	add	r1, sp, #16
 8007338:	4630      	mov	r0, r6
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4b11      	ldr	r3, [pc, #68]	@ (8007384 <_vfiprintf_r+0x228>)
 800733e:	f3af 8000 	nop.w
 8007342:	4607      	mov	r7, r0
 8007344:	1c78      	adds	r0, r7, #1
 8007346:	d1d6      	bne.n	80072f6 <_vfiprintf_r+0x19a>
 8007348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800734a:	07d9      	lsls	r1, r3, #31
 800734c:	d405      	bmi.n	800735a <_vfiprintf_r+0x1fe>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	059a      	lsls	r2, r3, #22
 8007352:	d402      	bmi.n	800735a <_vfiprintf_r+0x1fe>
 8007354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007356:	f7ff fc85 	bl	8006c64 <__retarget_lock_release_recursive>
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	065b      	lsls	r3, r3, #25
 800735e:	f53f af1f 	bmi.w	80071a0 <_vfiprintf_r+0x44>
 8007362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007364:	e71e      	b.n	80071a4 <_vfiprintf_r+0x48>
 8007366:	ab03      	add	r3, sp, #12
 8007368:	462a      	mov	r2, r5
 800736a:	a904      	add	r1, sp, #16
 800736c:	4630      	mov	r0, r6
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <_vfiprintf_r+0x228>)
 8007372:	f000 f87d 	bl	8007470 <_printf_i>
 8007376:	e7e4      	b.n	8007342 <_vfiprintf_r+0x1e6>
 8007378:	08008c60 	.word	0x08008c60
 800737c:	08008c6a 	.word	0x08008c6a
 8007380:	00000000 	.word	0x00000000
 8007384:	08007137 	.word	0x08007137
 8007388:	08008c66 	.word	0x08008c66

0800738c <_printf_common>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	4616      	mov	r6, r2
 8007392:	4698      	mov	r8, r3
 8007394:	688a      	ldr	r2, [r1, #8]
 8007396:	4607      	mov	r7, r0
 8007398:	690b      	ldr	r3, [r1, #16]
 800739a:	460c      	mov	r4, r1
 800739c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfb8      	it	lt
 80073a4:	4613      	movlt	r3, r2
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073ac:	b10a      	cbz	r2, 80073b2 <_printf_common+0x26>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	0699      	lsls	r1, r3, #26
 80073b6:	bf42      	ittt	mi
 80073b8:	6833      	ldrmi	r3, [r6, #0]
 80073ba:	3302      	addmi	r3, #2
 80073bc:	6033      	strmi	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	f015 0506 	ands.w	r5, r5, #6
 80073c4:	d106      	bne.n	80073d4 <_printf_common+0x48>
 80073c6:	f104 0a19 	add.w	sl, r4, #25
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	6832      	ldr	r2, [r6, #0]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc2b      	bgt.n	800742c <_printf_common+0xa0>
 80073d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	3b00      	subs	r3, #0
 80073dc:	bf18      	it	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	0692      	lsls	r2, r2, #26
 80073e2:	d430      	bmi.n	8007446 <_printf_common+0xba>
 80073e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d023      	beq.n	800743a <_printf_common+0xae>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	341a      	adds	r4, #26
 80073f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80073fa:	f003 0306 	and.w	r3, r3, #6
 80073fe:	2b04      	cmp	r3, #4
 8007400:	bf0a      	itet	eq
 8007402:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007406:	2500      	movne	r5, #0
 8007408:	6833      	ldreq	r3, [r6, #0]
 800740a:	f04f 0600 	mov.w	r6, #0
 800740e:	bf08      	it	eq
 8007410:	1aed      	subeq	r5, r5, r3
 8007412:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007416:	bf08      	it	eq
 8007418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800741c:	4293      	cmp	r3, r2
 800741e:	bfc4      	itt	gt
 8007420:	1a9b      	subgt	r3, r3, r2
 8007422:	18ed      	addgt	r5, r5, r3
 8007424:	42b5      	cmp	r5, r6
 8007426:	d11a      	bne.n	800745e <_printf_common+0xd2>
 8007428:	2000      	movs	r0, #0
 800742a:	e008      	b.n	800743e <_printf_common+0xb2>
 800742c:	2301      	movs	r3, #1
 800742e:	4652      	mov	r2, sl
 8007430:	4641      	mov	r1, r8
 8007432:	4638      	mov	r0, r7
 8007434:	47c8      	blx	r9
 8007436:	3001      	adds	r0, #1
 8007438:	d103      	bne.n	8007442 <_printf_common+0xb6>
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	3501      	adds	r5, #1
 8007444:	e7c1      	b.n	80073ca <_printf_common+0x3e>
 8007446:	18e1      	adds	r1, r4, r3
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	2030      	movs	r0, #48	@ 0x30
 800744c:	3302      	adds	r3, #2
 800744e:	4422      	add	r2, r4
 8007450:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800745c:	e7c2      	b.n	80073e4 <_printf_common+0x58>
 800745e:	2301      	movs	r3, #1
 8007460:	4622      	mov	r2, r4
 8007462:	4641      	mov	r1, r8
 8007464:	4638      	mov	r0, r7
 8007466:	47c8      	blx	r9
 8007468:	3001      	adds	r0, #1
 800746a:	d0e6      	beq.n	800743a <_printf_common+0xae>
 800746c:	3601      	adds	r6, #1
 800746e:	e7d9      	b.n	8007424 <_printf_common+0x98>

08007470 <_printf_i>:
 8007470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	7e0f      	ldrb	r7, [r1, #24]
 8007476:	4691      	mov	r9, r2
 8007478:	4680      	mov	r8, r0
 800747a:	460c      	mov	r4, r1
 800747c:	2f78      	cmp	r7, #120	@ 0x78
 800747e:	469a      	mov	sl, r3
 8007480:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007486:	d807      	bhi.n	8007498 <_printf_i+0x28>
 8007488:	2f62      	cmp	r7, #98	@ 0x62
 800748a:	d80a      	bhi.n	80074a2 <_printf_i+0x32>
 800748c:	2f00      	cmp	r7, #0
 800748e:	f000 80d1 	beq.w	8007634 <_printf_i+0x1c4>
 8007492:	2f58      	cmp	r7, #88	@ 0x58
 8007494:	f000 80b8 	beq.w	8007608 <_printf_i+0x198>
 8007498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800749c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a0:	e03a      	b.n	8007518 <_printf_i+0xa8>
 80074a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074a6:	2b15      	cmp	r3, #21
 80074a8:	d8f6      	bhi.n	8007498 <_printf_i+0x28>
 80074aa:	a101      	add	r1, pc, #4	@ (adr r1, 80074b0 <_printf_i+0x40>)
 80074ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b0:	08007509 	.word	0x08007509
 80074b4:	0800751d 	.word	0x0800751d
 80074b8:	08007499 	.word	0x08007499
 80074bc:	08007499 	.word	0x08007499
 80074c0:	08007499 	.word	0x08007499
 80074c4:	08007499 	.word	0x08007499
 80074c8:	0800751d 	.word	0x0800751d
 80074cc:	08007499 	.word	0x08007499
 80074d0:	08007499 	.word	0x08007499
 80074d4:	08007499 	.word	0x08007499
 80074d8:	08007499 	.word	0x08007499
 80074dc:	0800761b 	.word	0x0800761b
 80074e0:	08007547 	.word	0x08007547
 80074e4:	080075d5 	.word	0x080075d5
 80074e8:	08007499 	.word	0x08007499
 80074ec:	08007499 	.word	0x08007499
 80074f0:	0800763d 	.word	0x0800763d
 80074f4:	08007499 	.word	0x08007499
 80074f8:	08007547 	.word	0x08007547
 80074fc:	08007499 	.word	0x08007499
 8007500:	08007499 	.word	0x08007499
 8007504:	080075dd 	.word	0x080075dd
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	1d1a      	adds	r2, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6032      	str	r2, [r6, #0]
 8007510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007518:	2301      	movs	r3, #1
 800751a:	e09c      	b.n	8007656 <_printf_i+0x1e6>
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	6820      	ldr	r0, [r4, #0]
 8007520:	1d19      	adds	r1, r3, #4
 8007522:	6031      	str	r1, [r6, #0]
 8007524:	0606      	lsls	r6, r0, #24
 8007526:	d501      	bpl.n	800752c <_printf_i+0xbc>
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	e003      	b.n	8007534 <_printf_i+0xc4>
 800752c:	0645      	lsls	r5, r0, #25
 800752e:	d5fb      	bpl.n	8007528 <_printf_i+0xb8>
 8007530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007534:	2d00      	cmp	r5, #0
 8007536:	da03      	bge.n	8007540 <_printf_i+0xd0>
 8007538:	232d      	movs	r3, #45	@ 0x2d
 800753a:	426d      	negs	r5, r5
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007540:	4858      	ldr	r0, [pc, #352]	@ (80076a4 <_printf_i+0x234>)
 8007542:	230a      	movs	r3, #10
 8007544:	e011      	b.n	800756a <_printf_i+0xfa>
 8007546:	6821      	ldr	r1, [r4, #0]
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	0608      	lsls	r0, r1, #24
 800754c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007550:	d402      	bmi.n	8007558 <_printf_i+0xe8>
 8007552:	0649      	lsls	r1, r1, #25
 8007554:	bf48      	it	mi
 8007556:	b2ad      	uxthmi	r5, r5
 8007558:	2f6f      	cmp	r7, #111	@ 0x6f
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	4851      	ldr	r0, [pc, #324]	@ (80076a4 <_printf_i+0x234>)
 800755e:	bf14      	ite	ne
 8007560:	230a      	movne	r3, #10
 8007562:	2308      	moveq	r3, #8
 8007564:	2100      	movs	r1, #0
 8007566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800756a:	6866      	ldr	r6, [r4, #4]
 800756c:	2e00      	cmp	r6, #0
 800756e:	60a6      	str	r6, [r4, #8]
 8007570:	db05      	blt.n	800757e <_printf_i+0x10e>
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	432e      	orrs	r6, r5
 8007576:	f021 0104 	bic.w	r1, r1, #4
 800757a:	6021      	str	r1, [r4, #0]
 800757c:	d04b      	beq.n	8007616 <_printf_i+0x1a6>
 800757e:	4616      	mov	r6, r2
 8007580:	fbb5 f1f3 	udiv	r1, r5, r3
 8007584:	fb03 5711 	mls	r7, r3, r1, r5
 8007588:	5dc7      	ldrb	r7, [r0, r7]
 800758a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800758e:	462f      	mov	r7, r5
 8007590:	460d      	mov	r5, r1
 8007592:	42bb      	cmp	r3, r7
 8007594:	d9f4      	bls.n	8007580 <_printf_i+0x110>
 8007596:	2b08      	cmp	r3, #8
 8007598:	d10b      	bne.n	80075b2 <_printf_i+0x142>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	07df      	lsls	r7, r3, #31
 800759e:	d508      	bpl.n	80075b2 <_printf_i+0x142>
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	6861      	ldr	r1, [r4, #4]
 80075a4:	4299      	cmp	r1, r3
 80075a6:	bfde      	ittt	le
 80075a8:	2330      	movle	r3, #48	@ 0x30
 80075aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b2:	1b92      	subs	r2, r2, r6
 80075b4:	6122      	str	r2, [r4, #16]
 80075b6:	464b      	mov	r3, r9
 80075b8:	aa03      	add	r2, sp, #12
 80075ba:	4621      	mov	r1, r4
 80075bc:	4640      	mov	r0, r8
 80075be:	f8cd a000 	str.w	sl, [sp]
 80075c2:	f7ff fee3 	bl	800738c <_printf_common>
 80075c6:	3001      	adds	r0, #1
 80075c8:	d14a      	bne.n	8007660 <_printf_i+0x1f0>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	b004      	add	sp, #16
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	f043 0320 	orr.w	r3, r3, #32
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	2778      	movs	r7, #120	@ 0x78
 80075de:	4832      	ldr	r0, [pc, #200]	@ (80076a8 <_printf_i+0x238>)
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075e6:	061f      	lsls	r7, r3, #24
 80075e8:	6831      	ldr	r1, [r6, #0]
 80075ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80075ee:	d402      	bmi.n	80075f6 <_printf_i+0x186>
 80075f0:	065f      	lsls	r7, r3, #25
 80075f2:	bf48      	it	mi
 80075f4:	b2ad      	uxthmi	r5, r5
 80075f6:	6031      	str	r1, [r6, #0]
 80075f8:	07d9      	lsls	r1, r3, #31
 80075fa:	bf44      	itt	mi
 80075fc:	f043 0320 	orrmi.w	r3, r3, #32
 8007600:	6023      	strmi	r3, [r4, #0]
 8007602:	b11d      	cbz	r5, 800760c <_printf_i+0x19c>
 8007604:	2310      	movs	r3, #16
 8007606:	e7ad      	b.n	8007564 <_printf_i+0xf4>
 8007608:	4826      	ldr	r0, [pc, #152]	@ (80076a4 <_printf_i+0x234>)
 800760a:	e7e9      	b.n	80075e0 <_printf_i+0x170>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	f023 0320 	bic.w	r3, r3, #32
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	e7f6      	b.n	8007604 <_printf_i+0x194>
 8007616:	4616      	mov	r6, r2
 8007618:	e7bd      	b.n	8007596 <_printf_i+0x126>
 800761a:	6833      	ldr	r3, [r6, #0]
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1d18      	adds	r0, r3, #4
 8007620:	6961      	ldr	r1, [r4, #20]
 8007622:	6030      	str	r0, [r6, #0]
 8007624:	062e      	lsls	r6, r5, #24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	d501      	bpl.n	800762e <_printf_i+0x1be>
 800762a:	6019      	str	r1, [r3, #0]
 800762c:	e002      	b.n	8007634 <_printf_i+0x1c4>
 800762e:	0668      	lsls	r0, r5, #25
 8007630:	d5fb      	bpl.n	800762a <_printf_i+0x1ba>
 8007632:	8019      	strh	r1, [r3, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	4616      	mov	r6, r2
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	e7bc      	b.n	80075b6 <_printf_i+0x146>
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	2100      	movs	r1, #0
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	6032      	str	r2, [r6, #0]
 8007644:	681e      	ldr	r6, [r3, #0]
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	4630      	mov	r0, r6
 800764a:	f000 f999 	bl	8007980 <memchr>
 800764e:	b108      	cbz	r0, 8007654 <_printf_i+0x1e4>
 8007650:	1b80      	subs	r0, r0, r6
 8007652:	6060      	str	r0, [r4, #4]
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	2300      	movs	r3, #0
 800765a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800765e:	e7aa      	b.n	80075b6 <_printf_i+0x146>
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	4632      	mov	r2, r6
 8007664:	4649      	mov	r1, r9
 8007666:	4640      	mov	r0, r8
 8007668:	47d0      	blx	sl
 800766a:	3001      	adds	r0, #1
 800766c:	d0ad      	beq.n	80075ca <_printf_i+0x15a>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	079b      	lsls	r3, r3, #30
 8007672:	d413      	bmi.n	800769c <_printf_i+0x22c>
 8007674:	68e0      	ldr	r0, [r4, #12]
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	4298      	cmp	r0, r3
 800767a:	bfb8      	it	lt
 800767c:	4618      	movlt	r0, r3
 800767e:	e7a6      	b.n	80075ce <_printf_i+0x15e>
 8007680:	2301      	movs	r3, #1
 8007682:	4632      	mov	r2, r6
 8007684:	4649      	mov	r1, r9
 8007686:	4640      	mov	r0, r8
 8007688:	47d0      	blx	sl
 800768a:	3001      	adds	r0, #1
 800768c:	d09d      	beq.n	80075ca <_printf_i+0x15a>
 800768e:	3501      	adds	r5, #1
 8007690:	68e3      	ldr	r3, [r4, #12]
 8007692:	9903      	ldr	r1, [sp, #12]
 8007694:	1a5b      	subs	r3, r3, r1
 8007696:	42ab      	cmp	r3, r5
 8007698:	dcf2      	bgt.n	8007680 <_printf_i+0x210>
 800769a:	e7eb      	b.n	8007674 <_printf_i+0x204>
 800769c:	2500      	movs	r5, #0
 800769e:	f104 0619 	add.w	r6, r4, #25
 80076a2:	e7f5      	b.n	8007690 <_printf_i+0x220>
 80076a4:	08008c71 	.word	0x08008c71
 80076a8:	08008c82 	.word	0x08008c82

080076ac <__sflush_r>:
 80076ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	0716      	lsls	r6, r2, #28
 80076b6:	4605      	mov	r5, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	d454      	bmi.n	8007766 <__sflush_r+0xba>
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc02      	bgt.n	80076c8 <__sflush_r+0x1c>
 80076c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dd48      	ble.n	800775a <__sflush_r+0xae>
 80076c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d045      	beq.n	800775a <__sflush_r+0xae>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076d4:	682f      	ldr	r7, [r5, #0]
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	d030      	beq.n	800773e <__sflush_r+0x92>
 80076dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	0759      	lsls	r1, r3, #29
 80076e2:	d505      	bpl.n	80076f0 <__sflush_r+0x44>
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076ea:	b10b      	cbz	r3, 80076f0 <__sflush_r+0x44>
 80076ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	2300      	movs	r3, #0
 80076f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f4:	6a21      	ldr	r1, [r4, #32]
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	d106      	bne.n	800770e <__sflush_r+0x62>
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	291d      	cmp	r1, #29
 8007704:	d82b      	bhi.n	800775e <__sflush_r+0xb2>
 8007706:	4a2a      	ldr	r2, [pc, #168]	@ (80077b0 <__sflush_r+0x104>)
 8007708:	40ca      	lsrs	r2, r1
 800770a:	07d6      	lsls	r6, r2, #31
 800770c:	d527      	bpl.n	800775e <__sflush_r+0xb2>
 800770e:	2200      	movs	r2, #0
 8007710:	04d9      	lsls	r1, r3, #19
 8007712:	6062      	str	r2, [r4, #4]
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	d504      	bpl.n	8007724 <__sflush_r+0x78>
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	d101      	bne.n	8007722 <__sflush_r+0x76>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b903      	cbnz	r3, 8007724 <__sflush_r+0x78>
 8007722:	6560      	str	r0, [r4, #84]	@ 0x54
 8007724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	b1b9      	cbz	r1, 800775a <__sflush_r+0xae>
 800772a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800772e:	4299      	cmp	r1, r3
 8007730:	d002      	beq.n	8007738 <__sflush_r+0x8c>
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff fa98 	bl	8006c68 <_free_r>
 8007738:	2300      	movs	r3, #0
 800773a:	6363      	str	r3, [r4, #52]	@ 0x34
 800773c:	e00d      	b.n	800775a <__sflush_r+0xae>
 800773e:	2301      	movs	r3, #1
 8007740:	4628      	mov	r0, r5
 8007742:	47b0      	blx	r6
 8007744:	4602      	mov	r2, r0
 8007746:	1c50      	adds	r0, r2, #1
 8007748:	d1c9      	bne.n	80076de <__sflush_r+0x32>
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0c6      	beq.n	80076de <__sflush_r+0x32>
 8007750:	2b1d      	cmp	r3, #29
 8007752:	d001      	beq.n	8007758 <__sflush_r+0xac>
 8007754:	2b16      	cmp	r3, #22
 8007756:	d11d      	bne.n	8007794 <__sflush_r+0xe8>
 8007758:	602f      	str	r7, [r5, #0]
 800775a:	2000      	movs	r0, #0
 800775c:	e021      	b.n	80077a2 <__sflush_r+0xf6>
 800775e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007762:	b21b      	sxth	r3, r3
 8007764:	e01a      	b.n	800779c <__sflush_r+0xf0>
 8007766:	690f      	ldr	r7, [r1, #16]
 8007768:	2f00      	cmp	r7, #0
 800776a:	d0f6      	beq.n	800775a <__sflush_r+0xae>
 800776c:	0793      	lsls	r3, r2, #30
 800776e:	680e      	ldr	r6, [r1, #0]
 8007770:	600f      	str	r7, [r1, #0]
 8007772:	bf0c      	ite	eq
 8007774:	694b      	ldreq	r3, [r1, #20]
 8007776:	2300      	movne	r3, #0
 8007778:	eba6 0807 	sub.w	r8, r6, r7
 800777c:	608b      	str	r3, [r1, #8]
 800777e:	f1b8 0f00 	cmp.w	r8, #0
 8007782:	ddea      	ble.n	800775a <__sflush_r+0xae>
 8007784:	4643      	mov	r3, r8
 8007786:	463a      	mov	r2, r7
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	4628      	mov	r0, r5
 800778c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800778e:	47b0      	blx	r6
 8007790:	2800      	cmp	r0, #0
 8007792:	dc08      	bgt.n	80077a6 <__sflush_r+0xfa>
 8007794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a6:	4407      	add	r7, r0
 80077a8:	eba8 0800 	sub.w	r8, r8, r0
 80077ac:	e7e7      	b.n	800777e <__sflush_r+0xd2>
 80077ae:	bf00      	nop
 80077b0:	20400001 	.word	0x20400001

080077b4 <_fflush_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b913      	cbnz	r3, 80077c4 <_fflush_r+0x10>
 80077be:	2500      	movs	r5, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	b118      	cbz	r0, 80077ce <_fflush_r+0x1a>
 80077c6:	6a03      	ldr	r3, [r0, #32]
 80077c8:	b90b      	cbnz	r3, 80077ce <_fflush_r+0x1a>
 80077ca:	f7ff f923 	bl	8006a14 <__sinit>
 80077ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f3      	beq.n	80077be <_fflush_r+0xa>
 80077d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077d8:	07d0      	lsls	r0, r2, #31
 80077da:	d404      	bmi.n	80077e6 <_fflush_r+0x32>
 80077dc:	0599      	lsls	r1, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_fflush_r+0x32>
 80077e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077e2:	f7ff fa3e 	bl	8006c62 <__retarget_lock_acquire_recursive>
 80077e6:	4628      	mov	r0, r5
 80077e8:	4621      	mov	r1, r4
 80077ea:	f7ff ff5f 	bl	80076ac <__sflush_r>
 80077ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f0:	4605      	mov	r5, r0
 80077f2:	07da      	lsls	r2, r3, #31
 80077f4:	d4e4      	bmi.n	80077c0 <_fflush_r+0xc>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	059b      	lsls	r3, r3, #22
 80077fa:	d4e1      	bmi.n	80077c0 <_fflush_r+0xc>
 80077fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077fe:	f7ff fa31 	bl	8006c64 <__retarget_lock_release_recursive>
 8007802:	e7dd      	b.n	80077c0 <_fflush_r+0xc>

08007804 <__swbuf_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	460e      	mov	r6, r1
 8007808:	4614      	mov	r4, r2
 800780a:	4605      	mov	r5, r0
 800780c:	b118      	cbz	r0, 8007816 <__swbuf_r+0x12>
 800780e:	6a03      	ldr	r3, [r0, #32]
 8007810:	b90b      	cbnz	r3, 8007816 <__swbuf_r+0x12>
 8007812:	f7ff f8ff 	bl	8006a14 <__sinit>
 8007816:	69a3      	ldr	r3, [r4, #24]
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	071a      	lsls	r2, r3, #28
 800781e:	d501      	bpl.n	8007824 <__swbuf_r+0x20>
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b943      	cbnz	r3, 8007836 <__swbuf_r+0x32>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f82a 	bl	8007880 <__swsetup_r>
 800782c:	b118      	cbz	r0, 8007836 <__swbuf_r+0x32>
 800782e:	f04f 37ff 	mov.w	r7, #4294967295
 8007832:	4638      	mov	r0, r7
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	b2f6      	uxtb	r6, r6
 800783a:	6922      	ldr	r2, [r4, #16]
 800783c:	4637      	mov	r7, r6
 800783e:	1a98      	subs	r0, r3, r2
 8007840:	6963      	ldr	r3, [r4, #20]
 8007842:	4283      	cmp	r3, r0
 8007844:	dc05      	bgt.n	8007852 <__swbuf_r+0x4e>
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff ffb3 	bl	80077b4 <_fflush_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	d1ed      	bne.n	800782e <__swbuf_r+0x2a>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	3b01      	subs	r3, #1
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	6022      	str	r2, [r4, #0]
 800785e:	701e      	strb	r6, [r3, #0]
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	6962      	ldr	r2, [r4, #20]
 8007864:	429a      	cmp	r2, r3
 8007866:	d004      	beq.n	8007872 <__swbuf_r+0x6e>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d5e1      	bpl.n	8007832 <__swbuf_r+0x2e>
 800786e:	2e0a      	cmp	r6, #10
 8007870:	d1df      	bne.n	8007832 <__swbuf_r+0x2e>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff ff9d 	bl	80077b4 <_fflush_r>
 800787a:	2800      	cmp	r0, #0
 800787c:	d0d9      	beq.n	8007832 <__swbuf_r+0x2e>
 800787e:	e7d6      	b.n	800782e <__swbuf_r+0x2a>

08007880 <__swsetup_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <__swsetup_r+0xa8>)
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	b118      	cbz	r0, 8007894 <__swsetup_r+0x14>
 800788c:	6a03      	ldr	r3, [r0, #32]
 800788e:	b90b      	cbnz	r3, 8007894 <__swsetup_r+0x14>
 8007890:	f7ff f8c0 	bl	8006a14 <__sinit>
 8007894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007898:	0719      	lsls	r1, r3, #28
 800789a:	d422      	bmi.n	80078e2 <__swsetup_r+0x62>
 800789c:	06da      	lsls	r2, r3, #27
 800789e:	d407      	bmi.n	80078b0 <__swsetup_r+0x30>
 80078a0:	2209      	movs	r2, #9
 80078a2:	602a      	str	r2, [r5, #0]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	e033      	b.n	8007918 <__swsetup_r+0x98>
 80078b0:	0758      	lsls	r0, r3, #29
 80078b2:	d512      	bpl.n	80078da <__swsetup_r+0x5a>
 80078b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b6:	b141      	cbz	r1, 80078ca <__swsetup_r+0x4a>
 80078b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <__swsetup_r+0x46>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff f9d1 	bl	8006c68 <_free_r>
 80078c6:	2300      	movs	r3, #0
 80078c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	b94b      	cbnz	r3, 80078fa <__swsetup_r+0x7a>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f0:	d003      	beq.n	80078fa <__swsetup_r+0x7a>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f8b1 	bl	8007a5c <__smakebuf_r>
 80078fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fe:	f013 0201 	ands.w	r2, r3, #1
 8007902:	d00a      	beq.n	800791a <__swsetup_r+0x9a>
 8007904:	2200      	movs	r2, #0
 8007906:	60a2      	str	r2, [r4, #8]
 8007908:	6962      	ldr	r2, [r4, #20]
 800790a:	4252      	negs	r2, r2
 800790c:	61a2      	str	r2, [r4, #24]
 800790e:	6922      	ldr	r2, [r4, #16]
 8007910:	b942      	cbnz	r2, 8007924 <__swsetup_r+0xa4>
 8007912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007916:	d1c5      	bne.n	80078a4 <__swsetup_r+0x24>
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	0799      	lsls	r1, r3, #30
 800791c:	bf58      	it	pl
 800791e:	6962      	ldrpl	r2, [r4, #20]
 8007920:	60a2      	str	r2, [r4, #8]
 8007922:	e7f4      	b.n	800790e <__swsetup_r+0x8e>
 8007924:	2000      	movs	r0, #0
 8007926:	e7f7      	b.n	8007918 <__swsetup_r+0x98>
 8007928:	20000040 	.word	0x20000040

0800792c <memmove>:
 800792c:	4288      	cmp	r0, r1
 800792e:	b510      	push	{r4, lr}
 8007930:	eb01 0402 	add.w	r4, r1, r2
 8007934:	d902      	bls.n	800793c <memmove+0x10>
 8007936:	4284      	cmp	r4, r0
 8007938:	4623      	mov	r3, r4
 800793a:	d807      	bhi.n	800794c <memmove+0x20>
 800793c:	1e43      	subs	r3, r0, #1
 800793e:	42a1      	cmp	r1, r4
 8007940:	d008      	beq.n	8007954 <memmove+0x28>
 8007942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800794a:	e7f8      	b.n	800793e <memmove+0x12>
 800794c:	4402      	add	r2, r0
 800794e:	4601      	mov	r1, r0
 8007950:	428a      	cmp	r2, r1
 8007952:	d100      	bne.n	8007956 <memmove+0x2a>
 8007954:	bd10      	pop	{r4, pc}
 8007956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800795a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800795e:	e7f7      	b.n	8007950 <memmove+0x24>

08007960 <_sbrk_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	2300      	movs	r3, #0
 8007964:	4d05      	ldr	r5, [pc, #20]	@ (800797c <_sbrk_r+0x1c>)
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	f7f9 ffb2 	bl	80018d4 <_sbrk>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_sbrk_r+0x1a>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_sbrk_r+0x1a>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	200004dc 	.word	0x200004dc

08007980 <memchr>:
 8007980:	b2c9      	uxtb	r1, r1
 8007982:	4603      	mov	r3, r0
 8007984:	4402      	add	r2, r0
 8007986:	b510      	push	{r4, lr}
 8007988:	4293      	cmp	r3, r2
 800798a:	4618      	mov	r0, r3
 800798c:	d101      	bne.n	8007992 <memchr+0x12>
 800798e:	2000      	movs	r0, #0
 8007990:	e003      	b.n	800799a <memchr+0x1a>
 8007992:	7804      	ldrb	r4, [r0, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	428c      	cmp	r4, r1
 8007998:	d1f6      	bne.n	8007988 <memchr+0x8>
 800799a:	bd10      	pop	{r4, pc}

0800799c <memcpy>:
 800799c:	440a      	add	r2, r1
 800799e:	1e43      	subs	r3, r0, #1
 80079a0:	4291      	cmp	r1, r2
 80079a2:	d100      	bne.n	80079a6 <memcpy+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	b510      	push	{r4, lr}
 80079a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ac:	4291      	cmp	r1, r2
 80079ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b2:	d1f9      	bne.n	80079a8 <memcpy+0xc>
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <_realloc_r>:
 80079b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	4607      	mov	r7, r0
 80079bc:	4614      	mov	r4, r2
 80079be:	460d      	mov	r5, r1
 80079c0:	b921      	cbnz	r1, 80079cc <_realloc_r+0x16>
 80079c2:	4611      	mov	r1, r2
 80079c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c8:	f7ff b9ba 	b.w	8006d40 <_malloc_r>
 80079cc:	b92a      	cbnz	r2, 80079da <_realloc_r+0x24>
 80079ce:	4625      	mov	r5, r4
 80079d0:	f7ff f94a 	bl	8006c68 <_free_r>
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079da:	f000 f89d 	bl	8007b18 <_malloc_usable_size_r>
 80079de:	4284      	cmp	r4, r0
 80079e0:	4606      	mov	r6, r0
 80079e2:	d802      	bhi.n	80079ea <_realloc_r+0x34>
 80079e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079e8:	d8f4      	bhi.n	80079d4 <_realloc_r+0x1e>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4638      	mov	r0, r7
 80079ee:	f7ff f9a7 	bl	8006d40 <_malloc_r>
 80079f2:	4680      	mov	r8, r0
 80079f4:	b908      	cbnz	r0, 80079fa <_realloc_r+0x44>
 80079f6:	4645      	mov	r5, r8
 80079f8:	e7ec      	b.n	80079d4 <_realloc_r+0x1e>
 80079fa:	42b4      	cmp	r4, r6
 80079fc:	4622      	mov	r2, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	bf28      	it	cs
 8007a02:	4632      	movcs	r2, r6
 8007a04:	f7ff ffca 	bl	800799c <memcpy>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f7ff f92c 	bl	8006c68 <_free_r>
 8007a10:	e7f1      	b.n	80079f6 <_realloc_r+0x40>

08007a12 <__swhatbuf_r>:
 8007a12:	b570      	push	{r4, r5, r6, lr}
 8007a14:	460c      	mov	r4, r1
 8007a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1a:	b096      	sub	sp, #88	@ 0x58
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	461e      	mov	r6, r3
 8007a22:	da0c      	bge.n	8007a3e <__swhatbuf_r+0x2c>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	2100      	movs	r1, #0
 8007a28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a2c:	bf14      	ite	ne
 8007a2e:	2340      	movne	r3, #64	@ 0x40
 8007a30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a34:	2000      	movs	r0, #0
 8007a36:	6031      	str	r1, [r6, #0]
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	b016      	add	sp, #88	@ 0x58
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	466a      	mov	r2, sp
 8007a40:	f000 f848 	bl	8007ad4 <_fstat_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	dbed      	blt.n	8007a24 <__swhatbuf_r+0x12>
 8007a48:	9901      	ldr	r1, [sp, #4]
 8007a4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a52:	4259      	negs	r1, r3
 8007a54:	4159      	adcs	r1, r3
 8007a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a5a:	e7eb      	b.n	8007a34 <__swhatbuf_r+0x22>

08007a5c <__smakebuf_r>:
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a60:	079d      	lsls	r5, r3, #30
 8007a62:	4606      	mov	r6, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	d507      	bpl.n	8007a78 <__smakebuf_r+0x1c>
 8007a68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	b003      	add	sp, #12
 8007a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a78:	ab01      	add	r3, sp, #4
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f7ff ffc9 	bl	8007a12 <__swhatbuf_r>
 8007a80:	9f00      	ldr	r7, [sp, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7ff f95a 	bl	8006d40 <_malloc_r>
 8007a8c:	b948      	cbnz	r0, 8007aa2 <__smakebuf_r+0x46>
 8007a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a92:	059a      	lsls	r2, r3, #22
 8007a94:	d4ee      	bmi.n	8007a74 <__smakebuf_r+0x18>
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	f043 0302 	orr.w	r3, r3, #2
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	e7e2      	b.n	8007a68 <__smakebuf_r+0xc>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	6020      	str	r0, [r4, #0]
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ab2:	b15b      	cbz	r3, 8007acc <__smakebuf_r+0x70>
 8007ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 f81d 	bl	8007af8 <_isatty_r>
 8007abe:	b128      	cbz	r0, 8007acc <__smakebuf_r+0x70>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	431d      	orrs	r5, r3
 8007ad0:	81a5      	strh	r5, [r4, #12]
 8007ad2:	e7cf      	b.n	8007a74 <__smakebuf_r+0x18>

08007ad4 <_fstat_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4d06      	ldr	r5, [pc, #24]	@ (8007af4 <_fstat_r+0x20>)
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	f7f9 fece 	bl	8001882 <_fstat>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d102      	bne.n	8007af0 <_fstat_r+0x1c>
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	b103      	cbz	r3, 8007af0 <_fstat_r+0x1c>
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	200004dc 	.word	0x200004dc

08007af8 <_isatty_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	2300      	movs	r3, #0
 8007afc:	4d05      	ldr	r5, [pc, #20]	@ (8007b14 <_isatty_r+0x1c>)
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7f9 fecd 	bl	80018a2 <_isatty>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_isatty_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_isatty_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200004dc 	.word	0x200004dc

08007b18 <_malloc_usable_size_r>:
 8007b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1c:	1f18      	subs	r0, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bfbc      	itt	lt
 8007b22:	580b      	ldrlt	r3, [r1, r0]
 8007b24:	18c0      	addlt	r0, r0, r3
 8007b26:	4770      	bx	lr

08007b28 <sin>:
 8007b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b2a:	ec53 2b10 	vmov	r2, r3, d0
 8007b2e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b32:	4825      	ldr	r0, [pc, #148]	@ (8007bc8 <sin+0xa0>)
 8007b34:	4281      	cmp	r1, r0
 8007b36:	d807      	bhi.n	8007b48 <sin+0x20>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007bc0 <sin+0x98>
 8007b3e:	b005      	add	sp, #20
 8007b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b44:	f000 b90c 	b.w	8007d60 <__kernel_sin>
 8007b48:	4820      	ldr	r0, [pc, #128]	@ (8007bcc <sin+0xa4>)
 8007b4a:	4281      	cmp	r1, r0
 8007b4c:	d908      	bls.n	8007b60 <sin+0x38>
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7f8 fb75 	bl	8000240 <__aeabi_dsub>
 8007b56:	ec41 0b10 	vmov	d0, r0, r1
 8007b5a:	b005      	add	sp, #20
 8007b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b60:	4668      	mov	r0, sp
 8007b62:	f000 f9b9 	bl	8007ed8 <__ieee754_rem_pio2>
 8007b66:	f000 0003 	and.w	r0, r0, #3
 8007b6a:	2801      	cmp	r0, #1
 8007b6c:	d00c      	beq.n	8007b88 <sin+0x60>
 8007b6e:	2802      	cmp	r0, #2
 8007b70:	d011      	beq.n	8007b96 <sin+0x6e>
 8007b72:	b9e8      	cbnz	r0, 8007bb0 <sin+0x88>
 8007b74:	2001      	movs	r0, #1
 8007b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b7a:	ed9d 0b00 	vldr	d0, [sp]
 8007b7e:	f000 f8ef 	bl	8007d60 <__kernel_sin>
 8007b82:	ec51 0b10 	vmov	r0, r1, d0
 8007b86:	e7e6      	b.n	8007b56 <sin+0x2e>
 8007b88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b8c:	ed9d 0b00 	vldr	d0, [sp]
 8007b90:	f000 f81e 	bl	8007bd0 <__kernel_cos>
 8007b94:	e7f5      	b.n	8007b82 <sin+0x5a>
 8007b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b9a:	ed9d 0b00 	vldr	d0, [sp]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f000 f8de 	bl	8007d60 <__kernel_sin>
 8007ba4:	ec53 2b10 	vmov	r2, r3, d0
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007bae:	e7d2      	b.n	8007b56 <sin+0x2e>
 8007bb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bb4:	ed9d 0b00 	vldr	d0, [sp]
 8007bb8:	f000 f80a 	bl	8007bd0 <__kernel_cos>
 8007bbc:	e7f2      	b.n	8007ba4 <sin+0x7c>
 8007bbe:	bf00      	nop
	...
 8007bc8:	3fe921fb 	.word	0x3fe921fb
 8007bcc:	7fefffff 	.word	0x7fefffff

08007bd0 <__kernel_cos>:
 8007bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	ec57 6b10 	vmov	r6, r7, d0
 8007bd8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007bdc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007be0:	ed8d 1b00 	vstr	d1, [sp]
 8007be4:	d206      	bcs.n	8007bf4 <__kernel_cos+0x24>
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 ff7b 	bl	8000ae4 <__aeabi_d2iz>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f000 8088 	beq.w	8007d04 <__kernel_cos+0x134>
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fcd8 	bl	80005b0 <__aeabi_dmul>
 8007c00:	4604      	mov	r4, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b50      	ldr	r3, [pc, #320]	@ (8007d48 <__kernel_cos+0x178>)
 8007c08:	f7f8 fcd2 	bl	80005b0 <__aeabi_dmul>
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	468b      	mov	fp, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	a33e      	add	r3, pc, #248	@ (adr r3, 8007d10 <__kernel_cos+0x140>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f7f8 fcc9 	bl	80005b0 <__aeabi_dmul>
 8007c1e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007d18 <__kernel_cos+0x148>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 fb0e 	bl	8000244 <__adddf3>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	f7f8 fcc0 	bl	80005b0 <__aeabi_dmul>
 8007c30:	a33b      	add	r3, pc, #236	@ (adr r3, 8007d20 <__kernel_cos+0x150>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 fb03 	bl	8000240 <__aeabi_dsub>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f7f8 fcb7 	bl	80005b0 <__aeabi_dmul>
 8007c42:	a339      	add	r3, pc, #228	@ (adr r3, 8007d28 <__kernel_cos+0x158>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fafc 	bl	8000244 <__adddf3>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f7f8 fcae 	bl	80005b0 <__aeabi_dmul>
 8007c54:	a336      	add	r3, pc, #216	@ (adr r3, 8007d30 <__kernel_cos+0x160>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 faf1 	bl	8000240 <__aeabi_dsub>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	462b      	mov	r3, r5
 8007c62:	f7f8 fca5 	bl	80005b0 <__aeabi_dmul>
 8007c66:	a334      	add	r3, pc, #208	@ (adr r3, 8007d38 <__kernel_cos+0x168>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 faea 	bl	8000244 <__adddf3>
 8007c70:	4622      	mov	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	f7f8 fc9c 	bl	80005b0 <__aeabi_dmul>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	f7f8 fc98 	bl	80005b0 <__aeabi_dmul>
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c8c:	f7f8 fc90 	bl	80005b0 <__aeabi_dmul>
 8007c90:	460b      	mov	r3, r1
 8007c92:	4602      	mov	r2, r0
 8007c94:	4629      	mov	r1, r5
 8007c96:	4620      	mov	r0, r4
 8007c98:	f7f8 fad2 	bl	8000240 <__aeabi_dsub>
 8007c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d4c <__kernel_cos+0x17c>)
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	4598      	cmp	r8, r3
 8007ca4:	d810      	bhi.n	8007cc8 <__kernel_cos+0xf8>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fac7 	bl	8000240 <__aeabi_dsub>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	4925      	ldr	r1, [pc, #148]	@ (8007d50 <__kernel_cos+0x180>)
 8007cba:	f7f8 fac1 	bl	8000240 <__aeabi_dsub>
 8007cbe:	ec41 0b10 	vmov	d0, r0, r1
 8007cc2:	b003      	add	sp, #12
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	4b22      	ldr	r3, [pc, #136]	@ (8007d54 <__kernel_cos+0x184>)
 8007cca:	2400      	movs	r4, #0
 8007ccc:	2000      	movs	r0, #0
 8007cce:	4920      	ldr	r1, [pc, #128]	@ (8007d50 <__kernel_cos+0x180>)
 8007cd0:	4598      	cmp	r8, r3
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	bf94      	ite	ls
 8007cd6:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007cda:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007d58 <__kernel_cos+0x188>)
 8007cdc:	462b      	mov	r3, r5
 8007cde:	f7f8 faaf 	bl	8000240 <__aeabi_dsub>
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	462b      	mov	r3, r5
 8007cea:	4650      	mov	r0, sl
 8007cec:	4659      	mov	r1, fp
 8007cee:	f7f8 faa7 	bl	8000240 <__aeabi_dsub>
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	f7f8 faa3 	bl	8000240 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	e7da      	b.n	8007cba <__kernel_cos+0xea>
 8007d04:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007d40 <__kernel_cos+0x170>
 8007d08:	e7db      	b.n	8007cc2 <__kernel_cos+0xf2>
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w
 8007d10:	be8838d4 	.word	0xbe8838d4
 8007d14:	bda8fae9 	.word	0xbda8fae9
 8007d18:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d1c:	3e21ee9e 	.word	0x3e21ee9e
 8007d20:	809c52ad 	.word	0x809c52ad
 8007d24:	3e927e4f 	.word	0x3e927e4f
 8007d28:	19cb1590 	.word	0x19cb1590
 8007d2c:	3efa01a0 	.word	0x3efa01a0
 8007d30:	16c15177 	.word	0x16c15177
 8007d34:	3f56c16c 	.word	0x3f56c16c
 8007d38:	5555554c 	.word	0x5555554c
 8007d3c:	3fa55555 	.word	0x3fa55555
 8007d40:	00000000 	.word	0x00000000
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	3fe00000 	.word	0x3fe00000
 8007d4c:	3fd33332 	.word	0x3fd33332
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	3fe90000 	.word	0x3fe90000
 8007d58:	3fd20000 	.word	0x3fd20000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <__kernel_sin>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ec55 4b10 	vmov	r4, r5, d0
 8007d68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	4680      	mov	r8, r0
 8007d70:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007d74:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007d78:	d205      	bcs.n	8007d86 <__kernel_sin+0x26>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 feb1 	bl	8000ae4 <__aeabi_d2iz>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d052      	beq.n	8007e2c <__kernel_sin+0xcc>
 8007d86:	4622      	mov	r2, r4
 8007d88:	462b      	mov	r3, r5
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 fc0f 	bl	80005b0 <__aeabi_dmul>
 8007d92:	4682      	mov	sl, r0
 8007d94:	468b      	mov	fp, r1
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fc07 	bl	80005b0 <__aeabi_dmul>
 8007da2:	a342      	add	r3, pc, #264	@ (adr r3, 8007eac <__kernel_sin+0x14c>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	e9cd 0100 	strd	r0, r1, [sp]
 8007dac:	4650      	mov	r0, sl
 8007dae:	4659      	mov	r1, fp
 8007db0:	f7f8 fbfe 	bl	80005b0 <__aeabi_dmul>
 8007db4:	a33f      	add	r3, pc, #252	@ (adr r3, 8007eb4 <__kernel_sin+0x154>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f7f8 fa41 	bl	8000240 <__aeabi_dsub>
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	465b      	mov	r3, fp
 8007dc2:	f7f8 fbf5 	bl	80005b0 <__aeabi_dmul>
 8007dc6:	a33d      	add	r3, pc, #244	@ (adr r3, 8007ebc <__kernel_sin+0x15c>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fa3a 	bl	8000244 <__adddf3>
 8007dd0:	4652      	mov	r2, sl
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	f7f8 fbec 	bl	80005b0 <__aeabi_dmul>
 8007dd8:	a33a      	add	r3, pc, #232	@ (adr r3, 8007ec4 <__kernel_sin+0x164>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fa2f 	bl	8000240 <__aeabi_dsub>
 8007de2:	4652      	mov	r2, sl
 8007de4:	465b      	mov	r3, fp
 8007de6:	f7f8 fbe3 	bl	80005b0 <__aeabi_dmul>
 8007dea:	a338      	add	r3, pc, #224	@ (adr r3, 8007ecc <__kernel_sin+0x16c>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fa28 	bl	8000244 <__adddf3>
 8007df4:	4606      	mov	r6, r0
 8007df6:	460f      	mov	r7, r1
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	d11b      	bne.n	8007e36 <__kernel_sin+0xd6>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4650      	mov	r0, sl
 8007e04:	4659      	mov	r1, fp
 8007e06:	f7f8 fbd3 	bl	80005b0 <__aeabi_dmul>
 8007e0a:	a325      	add	r3, pc, #148	@ (adr r3, 8007ea0 <__kernel_sin+0x140>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fa16 	bl	8000240 <__aeabi_dsub>
 8007e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e18:	f7f8 fbca 	bl	80005b0 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4620      	mov	r0, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	f7f8 fa0e 	bl	8000244 <__adddf3>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	ec45 4b10 	vmov	d0, r4, r5
 8007e30:	b005      	add	sp, #20
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	2200      	movs	r2, #0
 8007e38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <__kernel_sin+0x148>)
 8007e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3e:	f7f8 fbb7 	bl	80005b0 <__aeabi_dmul>
 8007e42:	4680      	mov	r8, r0
 8007e44:	4689      	mov	r9, r1
 8007e46:	4632      	mov	r2, r6
 8007e48:	463b      	mov	r3, r7
 8007e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e4e:	f7f8 fbaf 	bl	80005b0 <__aeabi_dmul>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 f9f1 	bl	8000240 <__aeabi_dsub>
 8007e5e:	4652      	mov	r2, sl
 8007e60:	465b      	mov	r3, fp
 8007e62:	f7f8 fba5 	bl	80005b0 <__aeabi_dmul>
 8007e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6a:	f7f8 f9e9 	bl	8000240 <__aeabi_dsub>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	a30b      	add	r3, pc, #44	@ (adr r3, 8007ea0 <__kernel_sin+0x140>)
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e7c:	f7f8 fb98 	bl	80005b0 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 f9dc 	bl	8000244 <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4620      	mov	r0, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	f7f8 f9d4 	bl	8000240 <__aeabi_dsub>
 8007e98:	e7c6      	b.n	8007e28 <__kernel_sin+0xc8>
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w
 8007ea0:	55555549 	.word	0x55555549
 8007ea4:	3fc55555 	.word	0x3fc55555
 8007ea8:	3fe00000 	.word	0x3fe00000
 8007eac:	5acfd57c 	.word	0x5acfd57c
 8007eb0:	3de5d93a 	.word	0x3de5d93a
 8007eb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007eb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ebc:	57b1fe7d 	.word	0x57b1fe7d
 8007ec0:	3ec71de3 	.word	0x3ec71de3
 8007ec4:	19c161d5 	.word	0x19c161d5
 8007ec8:	3f2a01a0 	.word	0x3f2a01a0
 8007ecc:	1110f8a6 	.word	0x1110f8a6
 8007ed0:	3f811111 	.word	0x3f811111
 8007ed4:	00000000 	.word	0x00000000

08007ed8 <__ieee754_rem_pio2>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	ec57 6b10 	vmov	r6, r7, d0
 8007ee0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ee4:	4bc4      	ldr	r3, [pc, #784]	@ (80081f8 <__ieee754_rem_pio2+0x320>)
 8007ee6:	b08d      	sub	sp, #52	@ 0x34
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4598      	cmp	r8, r3
 8007eec:	9704      	str	r7, [sp, #16]
 8007eee:	d807      	bhi.n	8007f00 <__ieee754_rem_pio2+0x28>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	ed80 0b00 	vstr	d0, [r0]
 8007ef8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007efc:	2500      	movs	r5, #0
 8007efe:	e028      	b.n	8007f52 <__ieee754_rem_pio2+0x7a>
 8007f00:	4bbe      	ldr	r3, [pc, #760]	@ (80081fc <__ieee754_rem_pio2+0x324>)
 8007f02:	4598      	cmp	r8, r3
 8007f04:	d878      	bhi.n	8007ff8 <__ieee754_rem_pio2+0x120>
 8007f06:	9b04      	ldr	r3, [sp, #16]
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4dbd      	ldr	r5, [pc, #756]	@ (8008200 <__ieee754_rem_pio2+0x328>)
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	a3ab      	add	r3, pc, #684	@ (adr r3, 80081c0 <__ieee754_rem_pio2+0x2e8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	dd38      	ble.n	8007f8a <__ieee754_rem_pio2+0xb2>
 8007f18:	f7f8 f992 	bl	8000240 <__aeabi_dsub>
 8007f1c:	45a8      	cmp	r8, r5
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	d01a      	beq.n	8007f5a <__ieee754_rem_pio2+0x82>
 8007f24:	a3a8      	add	r3, pc, #672	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x2f0>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 f989 	bl	8000240 <__aeabi_dsub>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4680      	mov	r8, r0
 8007f34:	4689      	mov	r9, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 f981 	bl	8000240 <__aeabi_dsub>
 8007f3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x2f0>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	2501      	movs	r5, #1
 8007f46:	f7f8 f97b 	bl	8000240 <__aeabi_dsub>
 8007f4a:	e9c4 8900 	strd	r8, r9, [r4]
 8007f4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f52:	4628      	mov	r0, r5
 8007f54:	b00d      	add	sp, #52	@ 0x34
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	a39d      	add	r3, pc, #628	@ (adr r3, 80081d0 <__ieee754_rem_pio2+0x2f8>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f96e 	bl	8000240 <__aeabi_dsub>
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	a39b      	add	r3, pc, #620	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x300>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 f967 	bl	8000240 <__aeabi_dsub>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4680      	mov	r8, r0
 8007f78:	4689      	mov	r9, r1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 f95f 	bl	8000240 <__aeabi_dsub>
 8007f82:	a395      	add	r3, pc, #596	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x300>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	e7dc      	b.n	8007f44 <__ieee754_rem_pio2+0x6c>
 8007f8a:	f7f8 f95b 	bl	8000244 <__adddf3>
 8007f8e:	45a8      	cmp	r8, r5
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	d018      	beq.n	8007fc8 <__ieee754_rem_pio2+0xf0>
 8007f96:	a38c      	add	r3, pc, #560	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x2f0>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f7f8 f952 	bl	8000244 <__adddf3>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f948 	bl	8000240 <__aeabi_dsub>
 8007fb0:	a385      	add	r3, pc, #532	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x2f0>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 f945 	bl	8000244 <__adddf3>
 8007fba:	f04f 35ff 	mov.w	r5, #4294967295
 8007fbe:	e9c4 8900 	strd	r8, r9, [r4]
 8007fc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fc6:	e7c4      	b.n	8007f52 <__ieee754_rem_pio2+0x7a>
 8007fc8:	a381      	add	r3, pc, #516	@ (adr r3, 80081d0 <__ieee754_rem_pio2+0x2f8>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f939 	bl	8000244 <__adddf3>
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	a380      	add	r3, pc, #512	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x300>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 f932 	bl	8000244 <__adddf3>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 f928 	bl	8000240 <__aeabi_dsub>
 8007ff0:	a379      	add	r3, pc, #484	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x300>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	e7de      	b.n	8007fb6 <__ieee754_rem_pio2+0xde>
 8007ff8:	4b82      	ldr	r3, [pc, #520]	@ (8008204 <__ieee754_rem_pio2+0x32c>)
 8007ffa:	4598      	cmp	r8, r3
 8007ffc:	f200 80d1 	bhi.w	80081a2 <__ieee754_rem_pio2+0x2ca>
 8008000:	f000 f966 	bl	80082d0 <fabs>
 8008004:	ec57 6b10 	vmov	r6, r7, d0
 8008008:	a375      	add	r3, pc, #468	@ (adr r3, 80081e0 <__ieee754_rem_pio2+0x308>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 facd 	bl	80005b0 <__aeabi_dmul>
 8008016:	2200      	movs	r2, #0
 8008018:	4b7b      	ldr	r3, [pc, #492]	@ (8008208 <__ieee754_rem_pio2+0x330>)
 800801a:	f7f8 f913 	bl	8000244 <__adddf3>
 800801e:	f7f8 fd61 	bl	8000ae4 <__aeabi_d2iz>
 8008022:	4605      	mov	r5, r0
 8008024:	f7f8 fa5a 	bl	80004dc <__aeabi_i2d>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008030:	a363      	add	r3, pc, #396	@ (adr r3, 80081c0 <__ieee754_rem_pio2+0x2e8>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fabb 	bl	80005b0 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 f8fd 	bl	8000240 <__aeabi_dsub>
 8008046:	4682      	mov	sl, r0
 8008048:	468b      	mov	fp, r1
 800804a:	a35f      	add	r3, pc, #380	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x2f0>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008054:	f7f8 faac 	bl	80005b0 <__aeabi_dmul>
 8008058:	2d1f      	cmp	r5, #31
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	dc0c      	bgt.n	800807a <__ieee754_rem_pio2+0x1a2>
 8008060:	1e6a      	subs	r2, r5, #1
 8008062:	4b6a      	ldr	r3, [pc, #424]	@ (800820c <__ieee754_rem_pio2+0x334>)
 8008064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008068:	4543      	cmp	r3, r8
 800806a:	d006      	beq.n	800807a <__ieee754_rem_pio2+0x1a2>
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	4650      	mov	r0, sl
 8008072:	4659      	mov	r1, fp
 8008074:	f7f8 f8e4 	bl	8000240 <__aeabi_dsub>
 8008078:	e00e      	b.n	8008098 <__ieee754_rem_pio2+0x1c0>
 800807a:	463b      	mov	r3, r7
 800807c:	4632      	mov	r2, r6
 800807e:	4650      	mov	r0, sl
 8008080:	4659      	mov	r1, fp
 8008082:	f7f8 f8dd 	bl	8000240 <__aeabi_dsub>
 8008086:	ea4f 5328 	mov.w	r3, r8, asr #20
 800808a:	9305      	str	r3, [sp, #20]
 800808c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008090:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008094:	2b10      	cmp	r3, #16
 8008096:	dc02      	bgt.n	800809e <__ieee754_rem_pio2+0x1c6>
 8008098:	e9c4 0100 	strd	r0, r1, [r4]
 800809c:	e039      	b.n	8008112 <__ieee754_rem_pio2+0x23a>
 800809e:	a34c      	add	r3, pc, #304	@ (adr r3, 80081d0 <__ieee754_rem_pio2+0x2f8>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a8:	f7f8 fa82 	bl	80005b0 <__aeabi_dmul>
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4650      	mov	r0, sl
 80080b6:	4659      	mov	r1, fp
 80080b8:	f7f8 f8c2 	bl	8000240 <__aeabi_dsub>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4680      	mov	r8, r0
 80080c2:	4689      	mov	r9, r1
 80080c4:	4650      	mov	r0, sl
 80080c6:	4659      	mov	r1, fp
 80080c8:	f7f8 f8ba 	bl	8000240 <__aeabi_dsub>
 80080cc:	4632      	mov	r2, r6
 80080ce:	463b      	mov	r3, r7
 80080d0:	f7f8 f8b6 	bl	8000240 <__aeabi_dsub>
 80080d4:	4606      	mov	r6, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	a33f      	add	r3, pc, #252	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x300>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e2:	f7f8 fa65 	bl	80005b0 <__aeabi_dmul>
 80080e6:	4632      	mov	r2, r6
 80080e8:	463b      	mov	r3, r7
 80080ea:	f7f8 f8a9 	bl	8000240 <__aeabi_dsub>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4606      	mov	r6, r0
 80080f4:	460f      	mov	r7, r1
 80080f6:	4640      	mov	r0, r8
 80080f8:	4649      	mov	r1, r9
 80080fa:	f7f8 f8a1 	bl	8000240 <__aeabi_dsub>
 80080fe:	9a05      	ldr	r2, [sp, #20]
 8008100:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b31      	cmp	r3, #49	@ 0x31
 8008108:	dc20      	bgt.n	800814c <__ieee754_rem_pio2+0x274>
 800810a:	46c2      	mov	sl, r8
 800810c:	46cb      	mov	fp, r9
 800810e:	e9c4 0100 	strd	r0, r1, [r4]
 8008112:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008116:	4650      	mov	r0, sl
 8008118:	4659      	mov	r1, fp
 800811a:	4642      	mov	r2, r8
 800811c:	464b      	mov	r3, r9
 800811e:	f7f8 f88f 	bl	8000240 <__aeabi_dsub>
 8008122:	463b      	mov	r3, r7
 8008124:	4632      	mov	r2, r6
 8008126:	f7f8 f88b 	bl	8000240 <__aeabi_dsub>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008132:	f6bf af0e 	bge.w	8007f52 <__ieee754_rem_pio2+0x7a>
 8008136:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800813a:	f8c4 8000 	str.w	r8, [r4]
 800813e:	60a0      	str	r0, [r4, #8]
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008146:	60e3      	str	r3, [r4, #12]
 8008148:	426d      	negs	r5, r5
 800814a:	e702      	b.n	8007f52 <__ieee754_rem_pio2+0x7a>
 800814c:	a326      	add	r3, pc, #152	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x310>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008156:	f7f8 fa2b 	bl	80005b0 <__aeabi_dmul>
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f86b 	bl	8000240 <__aeabi_dsub>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4682      	mov	sl, r0
 8008170:	468b      	mov	fp, r1
 8008172:	4640      	mov	r0, r8
 8008174:	4649      	mov	r1, r9
 8008176:	f7f8 f863 	bl	8000240 <__aeabi_dsub>
 800817a:	4632      	mov	r2, r6
 800817c:	463b      	mov	r3, r7
 800817e:	f7f8 f85f 	bl	8000240 <__aeabi_dsub>
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	a31a      	add	r3, pc, #104	@ (adr r3, 80081f0 <__ieee754_rem_pio2+0x318>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008190:	f7f8 fa0e 	bl	80005b0 <__aeabi_dmul>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	f7f8 f852 	bl	8000240 <__aeabi_dsub>
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	e764      	b.n	800806c <__ieee754_rem_pio2+0x194>
 80081a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008210 <__ieee754_rem_pio2+0x338>)
 80081a4:	4598      	cmp	r8, r3
 80081a6:	d935      	bls.n	8008214 <__ieee754_rem_pio2+0x33c>
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	4630      	mov	r0, r6
 80081ae:	4639      	mov	r1, r7
 80081b0:	f7f8 f846 	bl	8000240 <__aeabi_dsub>
 80081b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081b8:	e9c4 0100 	strd	r0, r1, [r4]
 80081bc:	e69e      	b.n	8007efc <__ieee754_rem_pio2+0x24>
 80081be:	bf00      	nop
 80081c0:	54400000 	.word	0x54400000
 80081c4:	3ff921fb 	.word	0x3ff921fb
 80081c8:	1a626331 	.word	0x1a626331
 80081cc:	3dd0b461 	.word	0x3dd0b461
 80081d0:	1a600000 	.word	0x1a600000
 80081d4:	3dd0b461 	.word	0x3dd0b461
 80081d8:	2e037073 	.word	0x2e037073
 80081dc:	3ba3198a 	.word	0x3ba3198a
 80081e0:	6dc9c883 	.word	0x6dc9c883
 80081e4:	3fe45f30 	.word	0x3fe45f30
 80081e8:	2e000000 	.word	0x2e000000
 80081ec:	3ba3198a 	.word	0x3ba3198a
 80081f0:	252049c1 	.word	0x252049c1
 80081f4:	397b839a 	.word	0x397b839a
 80081f8:	3fe921fb 	.word	0x3fe921fb
 80081fc:	4002d97b 	.word	0x4002d97b
 8008200:	3ff921fb 	.word	0x3ff921fb
 8008204:	413921fb 	.word	0x413921fb
 8008208:	3fe00000 	.word	0x3fe00000
 800820c:	08008c94 	.word	0x08008c94
 8008210:	7fefffff 	.word	0x7fefffff
 8008214:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008218:	4630      	mov	r0, r6
 800821a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800821e:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008222:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008226:	f04f 0803 	mov.w	r8, #3
 800822a:	460f      	mov	r7, r1
 800822c:	f7f8 fc5a 	bl	8000ae4 <__aeabi_d2iz>
 8008230:	f7f8 f954 	bl	80004dc <__aeabi_i2d>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008240:	f7f7 fffe 	bl	8000240 <__aeabi_dsub>
 8008244:	2200      	movs	r2, #0
 8008246:	4b20      	ldr	r3, [pc, #128]	@ (80082c8 <__ieee754_rem_pio2+0x3f0>)
 8008248:	f7f8 f9b2 	bl	80005b0 <__aeabi_dmul>
 800824c:	460f      	mov	r7, r1
 800824e:	4606      	mov	r6, r0
 8008250:	f7f8 fc48 	bl	8000ae4 <__aeabi_d2iz>
 8008254:	f7f8 f942 	bl	80004dc <__aeabi_i2d>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	2600      	movs	r6, #0
 8008262:	2700      	movs	r7, #0
 8008264:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008268:	f7f7 ffea 	bl	8000240 <__aeabi_dsub>
 800826c:	2200      	movs	r2, #0
 800826e:	4b16      	ldr	r3, [pc, #88]	@ (80082c8 <__ieee754_rem_pio2+0x3f0>)
 8008270:	f7f8 f99e 	bl	80005b0 <__aeabi_dmul>
 8008274:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	46c2      	mov	sl, r8
 800827e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008282:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008286:	f7f8 fbfb 	bl	8000a80 <__aeabi_dcmpeq>
 800828a:	2800      	cmp	r0, #0
 800828c:	d1f4      	bne.n	8008278 <__ieee754_rem_pio2+0x3a0>
 800828e:	4b0f      	ldr	r3, [pc, #60]	@ (80082cc <__ieee754_rem_pio2+0x3f4>)
 8008290:	462a      	mov	r2, r5
 8008292:	4621      	mov	r1, r4
 8008294:	a806      	add	r0, sp, #24
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2302      	movs	r3, #2
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4653      	mov	r3, sl
 800829e:	f000 f81f 	bl	80082e0 <__kernel_rem_pio2>
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	4605      	mov	r5, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f6bf ae53 	bge.w	8007f52 <__ieee754_rem_pio2+0x7a>
 80082ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80082b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082b4:	e9c4 2300 	strd	r2, r3, [r4]
 80082b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80082bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80082c4:	e740      	b.n	8008148 <__ieee754_rem_pio2+0x270>
 80082c6:	bf00      	nop
 80082c8:	41700000 	.word	0x41700000
 80082cc:	08008d14 	.word	0x08008d14

080082d0 <fabs>:
 80082d0:	ec51 0b10 	vmov	r0, r1, d0
 80082d4:	4602      	mov	r2, r0
 80082d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80082da:	ec43 2b10 	vmov	d0, r2, r3
 80082de:	4770      	bx	lr

080082e0 <__kernel_rem_pio2>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	ed2d 8b02 	vpush	{d8}
 80082e8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80082ec:	f112 0f14 	cmn.w	r2, #20
 80082f0:	f04f 0500 	mov.w	r5, #0
 80082f4:	9306      	str	r3, [sp, #24]
 80082f6:	bfa8      	it	ge
 80082f8:	1ed4      	subge	r4, r2, #3
 80082fa:	4bc3      	ldr	r3, [pc, #780]	@ (8008608 <__kernel_rem_pio2+0x328>)
 80082fc:	bfb8      	it	lt
 80082fe:	2400      	movlt	r4, #0
 8008300:	9104      	str	r1, [sp, #16]
 8008302:	ae20      	add	r6, sp, #128	@ 0x80
 8008304:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008306:	9008      	str	r0, [sp, #32]
 8008308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	f103 33ff 	add.w	r3, r3, #4294967295
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	bfa4      	itt	ge
 8008318:	2318      	movge	r3, #24
 800831a:	fb94 f4f3 	sdivge	r4, r4, r3
 800831e:	f06f 0317 	mvn.w	r3, #23
 8008322:	fb04 3303 	mla	r3, r4, r3, r3
 8008326:	eb03 0b02 	add.w	fp, r3, r2
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	9a05      	ldr	r2, [sp, #20]
 800832e:	eb03 0802 	add.w	r8, r3, r2
 8008332:	1aa7      	subs	r7, r4, r2
 8008334:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008336:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 80085f8 <__kernel_rem_pio2+0x318>
 800833a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800833e:	4545      	cmp	r5, r8
 8008340:	dd12      	ble.n	8008368 <__kernel_rem_pio2+0x88>
 8008342:	aa20      	add	r2, sp, #128	@ 0x80
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800834a:	2700      	movs	r7, #0
 800834c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	429f      	cmp	r7, r3
 8008354:	dc2e      	bgt.n	80083b4 <__kernel_rem_pio2+0xd4>
 8008356:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800835a:	46a8      	mov	r8, r5
 800835c:	2600      	movs	r6, #0
 800835e:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 80085f8 <__kernel_rem_pio2+0x318>
 8008362:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008366:	e01b      	b.n	80083a0 <__kernel_rem_pio2+0xc0>
 8008368:	42ef      	cmn	r7, r5
 800836a:	d407      	bmi.n	800837c <__kernel_rem_pio2+0x9c>
 800836c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008370:	f7f8 f8b4 	bl	80004dc <__aeabi_i2d>
 8008374:	3501      	adds	r5, #1
 8008376:	e8e6 0102 	strd	r0, r1, [r6], #8
 800837a:	e7e0      	b.n	800833e <__kernel_rem_pio2+0x5e>
 800837c:	ec51 0b18 	vmov	r0, r1, d8
 8008380:	e7f8      	b.n	8008374 <__kernel_rem_pio2+0x94>
 8008382:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8008386:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800838a:	3601      	adds	r6, #1
 800838c:	f7f8 f910 	bl	80005b0 <__aeabi_dmul>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008398:	f7f7 ff54 	bl	8000244 <__adddf3>
 800839c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	429e      	cmp	r6, r3
 80083a4:	dded      	ble.n	8008382 <__kernel_rem_pio2+0xa2>
 80083a6:	3701      	adds	r7, #1
 80083a8:	3508      	adds	r5, #8
 80083aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083ae:	ecaa 7b02 	vstmia	sl!, {d7}
 80083b2:	e7cd      	b.n	8008350 <__kernel_rem_pio2+0x70>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80083b8:	f8dd 8000 	ldr.w	r8, [sp]
 80083bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c2:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80083c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80083c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ca:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80083ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80083d0:	46c2      	mov	sl, r8
 80083d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d4:	ab98      	add	r3, sp, #608	@ 0x260
 80083d6:	46a1      	mov	r9, r4
 80083d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083dc:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80083e0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80083e2:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80083e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083ea:	f1ba 0f00 	cmp.w	sl, #0
 80083ee:	dc77      	bgt.n	80084e0 <__kernel_rem_pio2+0x200>
 80083f0:	4658      	mov	r0, fp
 80083f2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80083f6:	f000 fac3 	bl	8008980 <scalbn>
 80083fa:	2200      	movs	r2, #0
 80083fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008400:	ec57 6b10 	vmov	r6, r7, d0
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f8 f8d2 	bl	80005b0 <__aeabi_dmul>
 800840c:	ec41 0b10 	vmov	d0, r0, r1
 8008410:	f000 fb32 	bl	8008a78 <floor>
 8008414:	2200      	movs	r2, #0
 8008416:	4b7d      	ldr	r3, [pc, #500]	@ (800860c <__kernel_rem_pio2+0x32c>)
 8008418:	ec51 0b10 	vmov	r0, r1, d0
 800841c:	f7f8 f8c8 	bl	80005b0 <__aeabi_dmul>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f7 ff0a 	bl	8000240 <__aeabi_dsub>
 800842c:	460f      	mov	r7, r1
 800842e:	4606      	mov	r6, r0
 8008430:	f7f8 fb58 	bl	8000ae4 <__aeabi_d2iz>
 8008434:	9002      	str	r0, [sp, #8]
 8008436:	f7f8 f851 	bl	80004dc <__aeabi_i2d>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f7 fefd 	bl	8000240 <__aeabi_dsub>
 8008446:	f1bb 0f00 	cmp.w	fp, #0
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	dd6c      	ble.n	800852a <__kernel_rem_pio2+0x24a>
 8008450:	f108 31ff 	add.w	r1, r8, #4294967295
 8008454:	ab0c      	add	r3, sp, #48	@ 0x30
 8008456:	f1cb 0018 	rsb	r0, fp, #24
 800845a:	9d02      	ldr	r5, [sp, #8]
 800845c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008460:	fa43 f200 	asr.w	r2, r3, r0
 8008464:	4415      	add	r5, r2
 8008466:	4082      	lsls	r2, r0
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	aa0c      	add	r2, sp, #48	@ 0x30
 800846c:	9502      	str	r5, [sp, #8]
 800846e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008472:	f1cb 0217 	rsb	r2, fp, #23
 8008476:	fa43 f902 	asr.w	r9, r3, r2
 800847a:	f1b9 0f00 	cmp.w	r9, #0
 800847e:	dd64      	ble.n	800854a <__kernel_rem_pio2+0x26a>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008488:	3301      	adds	r3, #1
 800848a:	4615      	mov	r5, r2
 800848c:	9302      	str	r3, [sp, #8]
 800848e:	4590      	cmp	r8, r2
 8008490:	f300 80a1 	bgt.w	80085d6 <__kernel_rem_pio2+0x2f6>
 8008494:	f1bb 0f00 	cmp.w	fp, #0
 8008498:	dd07      	ble.n	80084aa <__kernel_rem_pio2+0x1ca>
 800849a:	f1bb 0f01 	cmp.w	fp, #1
 800849e:	f000 80c1 	beq.w	8008624 <__kernel_rem_pio2+0x344>
 80084a2:	f1bb 0f02 	cmp.w	fp, #2
 80084a6:	f000 80c8 	beq.w	800863a <__kernel_rem_pio2+0x35a>
 80084aa:	f1b9 0f02 	cmp.w	r9, #2
 80084ae:	d14c      	bne.n	800854a <__kernel_rem_pio2+0x26a>
 80084b0:	4632      	mov	r2, r6
 80084b2:	463b      	mov	r3, r7
 80084b4:	2000      	movs	r0, #0
 80084b6:	4956      	ldr	r1, [pc, #344]	@ (8008610 <__kernel_rem_pio2+0x330>)
 80084b8:	f7f7 fec2 	bl	8000240 <__aeabi_dsub>
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	d042      	beq.n	800854a <__kernel_rem_pio2+0x26a>
 80084c4:	4658      	mov	r0, fp
 80084c6:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8008600 <__kernel_rem_pio2+0x320>
 80084ca:	f000 fa59 	bl	8008980 <scalbn>
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	ec53 2b10 	vmov	r2, r3, d0
 80084d6:	f7f7 feb3 	bl	8000240 <__aeabi_dsub>
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	e034      	b.n	800854a <__kernel_rem_pio2+0x26a>
 80084e0:	2200      	movs	r2, #0
 80084e2:	4b4c      	ldr	r3, [pc, #304]	@ (8008614 <__kernel_rem_pio2+0x334>)
 80084e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ec:	f7f8 f860 	bl	80005b0 <__aeabi_dmul>
 80084f0:	f7f8 faf8 	bl	8000ae4 <__aeabi_d2iz>
 80084f4:	f7f7 fff2 	bl	80004dc <__aeabi_i2d>
 80084f8:	2200      	movs	r2, #0
 80084fa:	4b47      	ldr	r3, [pc, #284]	@ (8008618 <__kernel_rem_pio2+0x338>)
 80084fc:	4606      	mov	r6, r0
 80084fe:	460f      	mov	r7, r1
 8008500:	f7f8 f856 	bl	80005b0 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800850c:	f7f7 fe98 	bl	8000240 <__aeabi_dsub>
 8008510:	f7f8 fae8 	bl	8000ae4 <__aeabi_d2iz>
 8008514:	4639      	mov	r1, r7
 8008516:	f849 0b04 	str.w	r0, [r9], #4
 800851a:	4630      	mov	r0, r6
 800851c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008520:	f7f7 fe90 	bl	8000244 <__adddf3>
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	e75f      	b.n	80083ea <__kernel_rem_pio2+0x10a>
 800852a:	d107      	bne.n	800853c <__kernel_rem_pio2+0x25c>
 800852c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008530:	aa0c      	add	r2, sp, #48	@ 0x30
 8008532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008536:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800853a:	e79e      	b.n	800847a <__kernel_rem_pio2+0x19a>
 800853c:	2200      	movs	r2, #0
 800853e:	4b37      	ldr	r3, [pc, #220]	@ (800861c <__kernel_rem_pio2+0x33c>)
 8008540:	f7f8 fabc 	bl	8000abc <__aeabi_dcmpge>
 8008544:	2800      	cmp	r0, #0
 8008546:	d143      	bne.n	80085d0 <__kernel_rem_pio2+0x2f0>
 8008548:	4681      	mov	r9, r0
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4630      	mov	r0, r6
 8008550:	4639      	mov	r1, r7
 8008552:	f7f8 fa95 	bl	8000a80 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	f000 80c1 	beq.w	80086de <__kernel_rem_pio2+0x3fe>
 800855c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008560:	2200      	movs	r2, #0
 8008562:	9900      	ldr	r1, [sp, #0]
 8008564:	428b      	cmp	r3, r1
 8008566:	da70      	bge.n	800864a <__kernel_rem_pio2+0x36a>
 8008568:	2a00      	cmp	r2, #0
 800856a:	f000 808b 	beq.w	8008684 <__kernel_rem_pio2+0x3a4>
 800856e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008572:	ab0c      	add	r3, sp, #48	@ 0x30
 8008574:	f1ab 0b18 	sub.w	fp, fp, #24
 8008578:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f6      	beq.n	800856e <__kernel_rem_pio2+0x28e>
 8008580:	4658      	mov	r0, fp
 8008582:	4646      	mov	r6, r8
 8008584:	f04f 0a00 	mov.w	sl, #0
 8008588:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8008614 <__kernel_rem_pio2+0x334>
 800858c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8008600 <__kernel_rem_pio2+0x320>
 8008590:	f000 f9f6 	bl	8008980 <scalbn>
 8008594:	f108 0301 	add.w	r3, r8, #1
 8008598:	00da      	lsls	r2, r3, #3
 800859a:	9205      	str	r2, [sp, #20]
 800859c:	aa70      	add	r2, sp, #448	@ 0x1c0
 800859e:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80085a2:	ec55 4b10 	vmov	r4, r5, d0
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	f280 80d1 	bge.w	800874e <__kernel_rem_pio2+0x46e>
 80085ac:	4644      	mov	r4, r8
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	f2c0 80ff 	blt.w	80087b2 <__kernel_rem_pio2+0x4d2>
 80085b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008620 <__kernel_rem_pio2+0x340>)
 80085b6:	f04f 0a00 	mov.w	sl, #0
 80085ba:	f04f 0b00 	mov.w	fp, #0
 80085be:	2600      	movs	r6, #0
 80085c0:	461f      	mov	r7, r3
 80085c2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80085c4:	eba8 0504 	sub.w	r5, r8, r4
 80085c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085cc:	9306      	str	r3, [sp, #24]
 80085ce:	e0e4      	b.n	800879a <__kernel_rem_pio2+0x4ba>
 80085d0:	f04f 0902 	mov.w	r9, #2
 80085d4:	e754      	b.n	8008480 <__kernel_rem_pio2+0x1a0>
 80085d6:	f854 3b04 	ldr.w	r3, [r4], #4
 80085da:	b945      	cbnz	r5, 80085ee <__kernel_rem_pio2+0x30e>
 80085dc:	b123      	cbz	r3, 80085e8 <__kernel_rem_pio2+0x308>
 80085de:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80085e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80085e6:	2301      	movs	r3, #1
 80085e8:	3201      	adds	r2, #1
 80085ea:	461d      	mov	r5, r3
 80085ec:	e74f      	b.n	800848e <__kernel_rem_pio2+0x1ae>
 80085ee:	1acb      	subs	r3, r1, r3
 80085f0:	e7f7      	b.n	80085e2 <__kernel_rem_pio2+0x302>
 80085f2:	bf00      	nop
 80085f4:	f3af 8000 	nop.w
	...
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	08008e60 	.word	0x08008e60
 800860c:	40200000 	.word	0x40200000
 8008610:	3ff00000 	.word	0x3ff00000
 8008614:	3e700000 	.word	0x3e700000
 8008618:	41700000 	.word	0x41700000
 800861c:	3fe00000 	.word	0x3fe00000
 8008620:	08008e20 	.word	0x08008e20
 8008624:	f108 32ff 	add.w	r2, r8, #4294967295
 8008628:	ab0c      	add	r3, sp, #48	@ 0x30
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008632:	a90c      	add	r1, sp, #48	@ 0x30
 8008634:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008638:	e737      	b.n	80084aa <__kernel_rem_pio2+0x1ca>
 800863a:	f108 32ff 	add.w	r2, r8, #4294967295
 800863e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008648:	e7f3      	b.n	8008632 <__kernel_rem_pio2+0x352>
 800864a:	a90c      	add	r1, sp, #48	@ 0x30
 800864c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008650:	3b01      	subs	r3, #1
 8008652:	430a      	orrs	r2, r1
 8008654:	e785      	b.n	8008562 <__kernel_rem_pio2+0x282>
 8008656:	3401      	adds	r4, #1
 8008658:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800865c:	2a00      	cmp	r2, #0
 800865e:	d0fa      	beq.n	8008656 <__kernel_rem_pio2+0x376>
 8008660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008662:	aa20      	add	r2, sp, #128	@ 0x80
 8008664:	f108 0701 	add.w	r7, r8, #1
 8008668:	4444      	add	r4, r8
 800866a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800866e:	eb0d 0503 	add.w	r5, sp, r3
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	4443      	add	r3, r8
 8008676:	3d98      	subs	r5, #152	@ 0x98
 8008678:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800867c:	42bc      	cmp	r4, r7
 800867e:	da04      	bge.n	800868a <__kernel_rem_pio2+0x3aa>
 8008680:	46a0      	mov	r8, r4
 8008682:	e6a2      	b.n	80083ca <__kernel_rem_pio2+0xea>
 8008684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008686:	2401      	movs	r4, #1
 8008688:	e7e6      	b.n	8008658 <__kernel_rem_pio2+0x378>
 800868a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868c:	f04f 0800 	mov.w	r8, #0
 8008690:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008694:	f7f7 ff22 	bl	80004dc <__aeabi_i2d>
 8008698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800869c:	ed9f 7bb4 	vldr	d7, [pc, #720]	@ 8008970 <__kernel_rem_pio2+0x690>
 80086a0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80086a4:	46b2      	mov	sl, r6
 80086a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086aa:	9b05      	ldr	r3, [sp, #20]
 80086ac:	4598      	cmp	r8, r3
 80086ae:	dd05      	ble.n	80086bc <__kernel_rem_pio2+0x3dc>
 80086b0:	3701      	adds	r7, #1
 80086b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086b6:	eca5 7b02 	vstmia	r5!, {d7}
 80086ba:	e7df      	b.n	800867c <__kernel_rem_pio2+0x39c>
 80086bc:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80086c0:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80086c4:	f7f7 ff74 	bl	80005b0 <__aeabi_dmul>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	f108 0801 	add.w	r8, r8, #1
 80086d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d4:	f7f7 fdb6 	bl	8000244 <__adddf3>
 80086d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086dc:	e7e5      	b.n	80086aa <__kernel_rem_pio2+0x3ca>
 80086de:	f1cb 0000 	rsb	r0, fp, #0
 80086e2:	ec47 6b10 	vmov	d0, r6, r7
 80086e6:	f000 f94b 	bl	8008980 <scalbn>
 80086ea:	2200      	movs	r2, #0
 80086ec:	4ba2      	ldr	r3, [pc, #648]	@ (8008978 <__kernel_rem_pio2+0x698>)
 80086ee:	ec55 4b10 	vmov	r4, r5, d0
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f8 f9e1 	bl	8000abc <__aeabi_dcmpge>
 80086fa:	b300      	cbz	r0, 800873e <__kernel_rem_pio2+0x45e>
 80086fc:	2200      	movs	r2, #0
 80086fe:	4b9f      	ldr	r3, [pc, #636]	@ (800897c <__kernel_rem_pio2+0x69c>)
 8008700:	4620      	mov	r0, r4
 8008702:	4629      	mov	r1, r5
 8008704:	f7f7 ff54 	bl	80005b0 <__aeabi_dmul>
 8008708:	f10b 0b18 	add.w	fp, fp, #24
 800870c:	f7f8 f9ea 	bl	8000ae4 <__aeabi_d2iz>
 8008710:	4606      	mov	r6, r0
 8008712:	f7f7 fee3 	bl	80004dc <__aeabi_i2d>
 8008716:	2200      	movs	r2, #0
 8008718:	4b97      	ldr	r3, [pc, #604]	@ (8008978 <__kernel_rem_pio2+0x698>)
 800871a:	f7f7 ff49 	bl	80005b0 <__aeabi_dmul>
 800871e:	460b      	mov	r3, r1
 8008720:	4602      	mov	r2, r0
 8008722:	4629      	mov	r1, r5
 8008724:	4620      	mov	r0, r4
 8008726:	f7f7 fd8b 	bl	8000240 <__aeabi_dsub>
 800872a:	f7f8 f9db 	bl	8000ae4 <__aeabi_d2iz>
 800872e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008730:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008734:	f108 0801 	add.w	r8, r8, #1
 8008738:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800873c:	e720      	b.n	8008580 <__kernel_rem_pio2+0x2a0>
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f8 f9cf 	bl	8000ae4 <__aeabi_d2iz>
 8008746:	ab0c      	add	r3, sp, #48	@ 0x30
 8008748:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800874c:	e718      	b.n	8008580 <__kernel_rem_pio2+0x2a0>
 800874e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008750:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008754:	3e01      	subs	r6, #1
 8008756:	f7f7 fec1 	bl	80004dc <__aeabi_i2d>
 800875a:	4622      	mov	r2, r4
 800875c:	462b      	mov	r3, r5
 800875e:	f7f7 ff27 	bl	80005b0 <__aeabi_dmul>
 8008762:	4652      	mov	r2, sl
 8008764:	465b      	mov	r3, fp
 8008766:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f7f7 ff1f 	bl	80005b0 <__aeabi_dmul>
 8008772:	4604      	mov	r4, r0
 8008774:	460d      	mov	r5, r1
 8008776:	e716      	b.n	80085a6 <__kernel_rem_pio2+0x2c6>
 8008778:	9906      	ldr	r1, [sp, #24]
 800877a:	3601      	adds	r6, #1
 800877c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008780:	9106      	str	r1, [sp, #24]
 8008782:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008786:	f7f7 ff13 	bl	80005b0 <__aeabi_dmul>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4650      	mov	r0, sl
 8008790:	4659      	mov	r1, fp
 8008792:	f7f7 fd57 	bl	8000244 <__adddf3>
 8008796:	4682      	mov	sl, r0
 8008798:	468b      	mov	fp, r1
 800879a:	9b00      	ldr	r3, [sp, #0]
 800879c:	429e      	cmp	r6, r3
 800879e:	dc01      	bgt.n	80087a4 <__kernel_rem_pio2+0x4c4>
 80087a0:	42ae      	cmp	r6, r5
 80087a2:	dde9      	ble.n	8008778 <__kernel_rem_pio2+0x498>
 80087a4:	ab48      	add	r3, sp, #288	@ 0x120
 80087a6:	3c01      	subs	r4, #1
 80087a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80087ac:	e9c5 ab00 	strd	sl, fp, [r5]
 80087b0:	e6fd      	b.n	80085ae <__kernel_rem_pio2+0x2ce>
 80087b2:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	dc0b      	bgt.n	80087d0 <__kernel_rem_pio2+0x4f0>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc35      	bgt.n	8008828 <__kernel_rem_pio2+0x548>
 80087bc:	d059      	beq.n	8008872 <__kernel_rem_pio2+0x592>
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	f003 0007 	and.w	r0, r3, #7
 80087c4:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80087c8:	ecbd 8b02 	vpop	{d8}
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d1f3      	bne.n	80087be <__kernel_rem_pio2+0x4de>
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	46c2      	mov	sl, r8
 80087da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087de:	eb0d 0403 	add.w	r4, sp, r3
 80087e2:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80087e6:	4625      	mov	r5, r4
 80087e8:	f1ba 0f00 	cmp.w	sl, #0
 80087ec:	dc69      	bgt.n	80088c2 <__kernel_rem_pio2+0x5e2>
 80087ee:	4645      	mov	r5, r8
 80087f0:	2d01      	cmp	r5, #1
 80087f2:	f300 8087 	bgt.w	8008904 <__kernel_rem_pio2+0x624>
 80087f6:	9c05      	ldr	r4, [sp, #20]
 80087f8:	ab48      	add	r3, sp, #288	@ 0x120
 80087fa:	2000      	movs	r0, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	441c      	add	r4, r3
 8008800:	f1b8 0f01 	cmp.w	r8, #1
 8008804:	f300 809c 	bgt.w	8008940 <__kernel_rem_pio2+0x660>
 8008808:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800880c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8008810:	f1b9 0f00 	cmp.w	r9, #0
 8008814:	f040 809b 	bne.w	800894e <__kernel_rem_pio2+0x66e>
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	e9c3 5600 	strd	r5, r6, [r3]
 800881e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008822:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008826:	e7ca      	b.n	80087be <__kernel_rem_pio2+0x4de>
 8008828:	9d05      	ldr	r5, [sp, #20]
 800882a:	ab48      	add	r3, sp, #288	@ 0x120
 800882c:	4644      	mov	r4, r8
 800882e:	2000      	movs	r0, #0
 8008830:	441d      	add	r5, r3
 8008832:	2100      	movs	r1, #0
 8008834:	2c00      	cmp	r4, #0
 8008836:	da35      	bge.n	80088a4 <__kernel_rem_pio2+0x5c4>
 8008838:	f1b9 0f00 	cmp.w	r9, #0
 800883c:	d038      	beq.n	80088b0 <__kernel_rem_pio2+0x5d0>
 800883e:	4602      	mov	r2, r0
 8008840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008844:	9c04      	ldr	r4, [sp, #16]
 8008846:	ad4a      	add	r5, sp, #296	@ 0x128
 8008848:	e9c4 2300 	strd	r2, r3, [r4]
 800884c:	2401      	movs	r4, #1
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008856:	f7f7 fcf3 	bl	8000240 <__aeabi_dsub>
 800885a:	45a0      	cmp	r8, r4
 800885c:	da2b      	bge.n	80088b6 <__kernel_rem_pio2+0x5d6>
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	d002      	beq.n	800886a <__kernel_rem_pio2+0x58a>
 8008864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008868:	4619      	mov	r1, r3
 800886a:	9b04      	ldr	r3, [sp, #16]
 800886c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008870:	e7a5      	b.n	80087be <__kernel_rem_pio2+0x4de>
 8008872:	9c05      	ldr	r4, [sp, #20]
 8008874:	ab48      	add	r3, sp, #288	@ 0x120
 8008876:	2000      	movs	r0, #0
 8008878:	2100      	movs	r1, #0
 800887a:	441c      	add	r4, r3
 800887c:	f1b8 0f00 	cmp.w	r8, #0
 8008880:	da09      	bge.n	8008896 <__kernel_rem_pio2+0x5b6>
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	d002      	beq.n	800888e <__kernel_rem_pio2+0x5ae>
 8008888:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800888c:	4619      	mov	r1, r3
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	e9c3 0100 	strd	r0, r1, [r3]
 8008894:	e793      	b.n	80087be <__kernel_rem_pio2+0x4de>
 8008896:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800889a:	f108 38ff 	add.w	r8, r8, #4294967295
 800889e:	f7f7 fcd1 	bl	8000244 <__adddf3>
 80088a2:	e7eb      	b.n	800887c <__kernel_rem_pio2+0x59c>
 80088a4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80088a8:	3c01      	subs	r4, #1
 80088aa:	f7f7 fccb 	bl	8000244 <__adddf3>
 80088ae:	e7c1      	b.n	8008834 <__kernel_rem_pio2+0x554>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	e7c6      	b.n	8008844 <__kernel_rem_pio2+0x564>
 80088b6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80088ba:	3401      	adds	r4, #1
 80088bc:	f7f7 fcc2 	bl	8000244 <__adddf3>
 80088c0:	e7cb      	b.n	800885a <__kernel_rem_pio2+0x57a>
 80088c2:	ed35 7b02 	vldmdb	r5!, {d7}
 80088c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ca:	ed8d 7b00 	vstr	d7, [sp]
 80088ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80088d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088d6:	ec53 2b17 	vmov	r2, r3, d7
 80088da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088de:	f7f7 fcb1 	bl	8000244 <__adddf3>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ee:	f7f7 fca7 	bl	8000240 <__aeabi_dsub>
 80088f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088f6:	f7f7 fca5 	bl	8000244 <__adddf3>
 80088fa:	e9c5 6700 	strd	r6, r7, [r5]
 80088fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008902:	e771      	b.n	80087e8 <__kernel_rem_pio2+0x508>
 8008904:	ed34 7b02 	vldmdb	r4!, {d7}
 8008908:	3d01      	subs	r5, #1
 800890a:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800890e:	ec51 0b17 	vmov	r0, r1, d7
 8008912:	4652      	mov	r2, sl
 8008914:	465b      	mov	r3, fp
 8008916:	ed8d 7b00 	vstr	d7, [sp]
 800891a:	f7f7 fc93 	bl	8000244 <__adddf3>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800892a:	f7f7 fc89 	bl	8000240 <__aeabi_dsub>
 800892e:	4652      	mov	r2, sl
 8008930:	465b      	mov	r3, fp
 8008932:	f7f7 fc87 	bl	8000244 <__adddf3>
 8008936:	e9c4 6700 	strd	r6, r7, [r4]
 800893a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800893e:	e757      	b.n	80087f0 <__kernel_rem_pio2+0x510>
 8008940:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008944:	f108 38ff 	add.w	r8, r8, #4294967295
 8008948:	f7f7 fc7c 	bl	8000244 <__adddf3>
 800894c:	e758      	b.n	8008800 <__kernel_rem_pio2+0x520>
 800894e:	9b04      	ldr	r3, [sp, #16]
 8008950:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	601d      	str	r5, [r3, #0]
 8008958:	605c      	str	r4, [r3, #4]
 800895a:	609f      	str	r7, [r3, #8]
 800895c:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8008960:	6110      	str	r0, [r2, #16]
 8008962:	60d3      	str	r3, [r2, #12]
 8008964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008968:	6153      	str	r3, [r2, #20]
 800896a:	e728      	b.n	80087be <__kernel_rem_pio2+0x4de>
 800896c:	f3af 8000 	nop.w
	...
 8008978:	41700000 	.word	0x41700000
 800897c:	3e700000 	.word	0x3e700000

08008980 <scalbn>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	ec55 4b10 	vmov	r4, r5, d0
 8008986:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800898a:	4606      	mov	r6, r0
 800898c:	462b      	mov	r3, r5
 800898e:	b991      	cbnz	r1, 80089b6 <scalbn+0x36>
 8008990:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008994:	4323      	orrs	r3, r4
 8008996:	d03b      	beq.n	8008a10 <scalbn+0x90>
 8008998:	4b33      	ldr	r3, [pc, #204]	@ (8008a68 <scalbn+0xe8>)
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	2200      	movs	r2, #0
 80089a0:	f7f7 fe06 	bl	80005b0 <__aeabi_dmul>
 80089a4:	4b31      	ldr	r3, [pc, #196]	@ (8008a6c <scalbn+0xec>)
 80089a6:	4604      	mov	r4, r0
 80089a8:	460d      	mov	r5, r1
 80089aa:	429e      	cmp	r6, r3
 80089ac:	da0f      	bge.n	80089ce <scalbn+0x4e>
 80089ae:	a326      	add	r3, pc, #152	@ (adr r3, 8008a48 <scalbn+0xc8>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	e01e      	b.n	80089f4 <scalbn+0x74>
 80089b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80089ba:	4291      	cmp	r1, r2
 80089bc:	d10b      	bne.n	80089d6 <scalbn+0x56>
 80089be:	4622      	mov	r2, r4
 80089c0:	4620      	mov	r0, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	f7f7 fc3e 	bl	8000244 <__adddf3>
 80089c8:	4604      	mov	r4, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	e020      	b.n	8008a10 <scalbn+0x90>
 80089ce:	460b      	mov	r3, r1
 80089d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80089d4:	3936      	subs	r1, #54	@ 0x36
 80089d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80089da:	4296      	cmp	r6, r2
 80089dc:	dd0d      	ble.n	80089fa <scalbn+0x7a>
 80089de:	2d00      	cmp	r5, #0
 80089e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008a50 <scalbn+0xd0>)
 80089e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e6:	da02      	bge.n	80089ee <scalbn+0x6e>
 80089e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008a58 <scalbn+0xd8>)
 80089ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ee:	a318      	add	r3, pc, #96	@ (adr r3, 8008a50 <scalbn+0xd0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f7 fddc 	bl	80005b0 <__aeabi_dmul>
 80089f8:	e7e6      	b.n	80089c8 <scalbn+0x48>
 80089fa:	1872      	adds	r2, r6, r1
 80089fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008a00:	428a      	cmp	r2, r1
 8008a02:	dcec      	bgt.n	80089de <scalbn+0x5e>
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	dd06      	ble.n	8008a16 <scalbn+0x96>
 8008a08:	f36f 531e 	bfc	r3, #20, #11
 8008a0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a10:	ec45 4b10 	vmov	d0, r4, r5
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
 8008a16:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008a1a:	da08      	bge.n	8008a2e <scalbn+0xae>
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008a48 <scalbn+0xc8>)
 8008a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a24:	dac3      	bge.n	80089ae <scalbn+0x2e>
 8008a26:	a10e      	add	r1, pc, #56	@ (adr r1, 8008a60 <scalbn+0xe0>)
 8008a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2c:	e7bf      	b.n	80089ae <scalbn+0x2e>
 8008a2e:	3236      	adds	r2, #54	@ 0x36
 8008a30:	f36f 531e 	bfc	r3, #20, #11
 8008a34:	4620      	mov	r0, r4
 8008a36:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a70 <scalbn+0xf0>)
 8008a3e:	4629      	mov	r1, r5
 8008a40:	e7d8      	b.n	80089f4 <scalbn+0x74>
 8008a42:	bf00      	nop
 8008a44:	f3af 8000 	nop.w
 8008a48:	c2f8f359 	.word	0xc2f8f359
 8008a4c:	01a56e1f 	.word	0x01a56e1f
 8008a50:	8800759c 	.word	0x8800759c
 8008a54:	7e37e43c 	.word	0x7e37e43c
 8008a58:	8800759c 	.word	0x8800759c
 8008a5c:	fe37e43c 	.word	0xfe37e43c
 8008a60:	c2f8f359 	.word	0xc2f8f359
 8008a64:	81a56e1f 	.word	0x81a56e1f
 8008a68:	43500000 	.word	0x43500000
 8008a6c:	ffff3cb0 	.word	0xffff3cb0
 8008a70:	3c900000 	.word	0x3c900000
 8008a74:	00000000 	.word	0x00000000

08008a78 <floor>:
 8008a78:	ec51 0b10 	vmov	r0, r1, d0
 8008a7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008a88:	460c      	mov	r4, r1
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	2e13      	cmp	r6, #19
 8008a90:	dc35      	bgt.n	8008afe <floor+0x86>
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	da17      	bge.n	8008ac6 <floor+0x4e>
 8008a96:	a334      	add	r3, pc, #208	@ (adr r3, 8008b68 <floor+0xf0>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fbd2 	bl	8000244 <__adddf3>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f7f8 f814 	bl	8000ad0 <__aeabi_dcmpgt>
 8008aa8:	b150      	cbz	r0, 8008ac0 <floor+0x48>
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	da56      	bge.n	8008b5c <floor+0xe4>
 8008aae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008ab2:	432c      	orrs	r4, r5
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	42ac      	cmp	r4, r5
 8008ab8:	4c2d      	ldr	r4, [pc, #180]	@ (8008b70 <floor+0xf8>)
 8008aba:	bf08      	it	eq
 8008abc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	e024      	b.n	8008b10 <floor+0x98>
 8008ac6:	4f2b      	ldr	r7, [pc, #172]	@ (8008b74 <floor+0xfc>)
 8008ac8:	4137      	asrs	r7, r6
 8008aca:	ea01 0307 	and.w	r3, r1, r7
 8008ace:	4303      	orrs	r3, r0
 8008ad0:	d01e      	beq.n	8008b10 <floor+0x98>
 8008ad2:	a325      	add	r3, pc, #148	@ (adr r3, 8008b68 <floor+0xf0>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fbb4 	bl	8000244 <__adddf3>
 8008adc:	2200      	movs	r2, #0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f7f7 fff6 	bl	8000ad0 <__aeabi_dcmpgt>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d0eb      	beq.n	8008ac0 <floor+0x48>
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	f04f 0500 	mov.w	r5, #0
 8008aee:	bfbe      	ittt	lt
 8008af0:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008af4:	4133      	asrlt	r3, r6
 8008af6:	18e4      	addlt	r4, r4, r3
 8008af8:	ea24 0407 	bic.w	r4, r4, r7
 8008afc:	e7e0      	b.n	8008ac0 <floor+0x48>
 8008afe:	2e33      	cmp	r6, #51	@ 0x33
 8008b00:	dd0a      	ble.n	8008b18 <floor+0xa0>
 8008b02:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008b06:	d103      	bne.n	8008b10 <floor+0x98>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	f7f7 fb9a 	bl	8000244 <__adddf3>
 8008b10:	ec41 0b10 	vmov	d0, r0, r1
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b20:	40df      	lsrs	r7, r3
 8008b22:	4207      	tst	r7, r0
 8008b24:	d0f4      	beq.n	8008b10 <floor+0x98>
 8008b26:	a310      	add	r3, pc, #64	@ (adr r3, 8008b68 <floor+0xf0>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f7f7 fb8a 	bl	8000244 <__adddf3>
 8008b30:	2200      	movs	r2, #0
 8008b32:	2300      	movs	r3, #0
 8008b34:	f7f7 ffcc 	bl	8000ad0 <__aeabi_dcmpgt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d0c1      	beq.n	8008ac0 <floor+0x48>
 8008b3c:	2c00      	cmp	r4, #0
 8008b3e:	da0a      	bge.n	8008b56 <floor+0xde>
 8008b40:	2e14      	cmp	r6, #20
 8008b42:	d101      	bne.n	8008b48 <floor+0xd0>
 8008b44:	3401      	adds	r4, #1
 8008b46:	e006      	b.n	8008b56 <floor+0xde>
 8008b48:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	40b3      	lsls	r3, r6
 8008b50:	441d      	add	r5, r3
 8008b52:	4545      	cmp	r5, r8
 8008b54:	d3f6      	bcc.n	8008b44 <floor+0xcc>
 8008b56:	ea25 0507 	bic.w	r5, r5, r7
 8008b5a:	e7b1      	b.n	8008ac0 <floor+0x48>
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	462c      	mov	r4, r5
 8008b60:	e7ae      	b.n	8008ac0 <floor+0x48>
 8008b62:	bf00      	nop
 8008b64:	f3af 8000 	nop.w
 8008b68:	8800759c 	.word	0x8800759c
 8008b6c:	7e37e43c 	.word	0x7e37e43c
 8008b70:	bff00000 	.word	0xbff00000
 8008b74:	000fffff 	.word	0x000fffff

08008b78 <_init>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr

08008b84 <_fini>:
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	bf00      	nop
 8008b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8a:	bc08      	pop	{r3}
 8008b8c:	469e      	mov	lr, r3
 8008b8e:	4770      	bx	lr
