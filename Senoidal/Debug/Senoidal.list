
Senoidal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08008c68  08008c68  00009c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f58  08008f58  0000a090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f58  08008f58  00009f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f60  08008f60  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f64  08008f64  00009f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08008f68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000090  08008ff8  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008ff8  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cae  00000000  00000000  0000a0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  0001fd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00022c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dac  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b987  00000000  00000000  00024bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015245  00000000  00000000  00050533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115a13  00000000  00000000  00065778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b18b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  0017b1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00180a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000090 	.word	0x20000090
 8000214:	00000000 	.word	0x00000000
 8000218:	08008c50 	.word	0x08008c50

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000094 	.word	0x20000094
 8000234:	08008c50 	.word	0x08008c50

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b9b0 	b.w	8000eec <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000baa:	4688      	mov	r8, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	468e      	mov	lr, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d95f      	bls.n	8000c7a <__udivmoddi4+0xd6>
 8000bba:	fab2 f682 	clz	r6, r2
 8000bbe:	b14e      	cbz	r6, 8000bd4 <__udivmoddi4+0x30>
 8000bc0:	f1c6 0320 	rsb	r3, r6, #32
 8000bc4:	fa01 fe06 	lsl.w	lr, r1, r6
 8000bc8:	40b7      	lsls	r7, r6
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	ea43 0e0e 	orr.w	lr, r3, lr
 8000bd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	0c23      	lsrs	r3, r4, #16
 8000bde:	fbbe f1f8 	udiv	r1, lr, r8
 8000be2:	fb08 ee11 	mls	lr, r8, r1, lr
 8000be6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x5e>
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x5c>
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	f200 8154 	bhi.w	8000ea8 <__udivmoddi4+0x304>
 8000c00:	4601      	mov	r1, r0
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	b2a2      	uxth	r2, r4
 8000c06:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0a:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c16:	4594      	cmp	ip, r2
 8000c18:	d90b      	bls.n	8000c32 <__udivmoddi4+0x8e>
 8000c1a:	18ba      	adds	r2, r7, r2
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c20:	bf2c      	ite	cs
 8000c22:	2401      	movcs	r4, #1
 8000c24:	2400      	movcc	r4, #0
 8000c26:	4594      	cmp	ip, r2
 8000c28:	d902      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	f000 813f 	beq.w	8000eae <__udivmoddi4+0x30a>
 8000c30:	4618      	mov	r0, r3
 8000c32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c36:	eba2 020c 	sub.w	r2, r2, ip
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11d      	cbz	r5, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40f2      	lsrs	r2, r6
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c5 2300 	strd	r2, r3, [r5]
 8000c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d905      	bls.n	8000c5a <__udivmoddi4+0xb6>
 8000c4e:	b10d      	cbz	r5, 8000c54 <__udivmoddi4+0xb0>
 8000c50:	e9c5 0100 	strd	r0, r1, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4608      	mov	r0, r1
 8000c58:	e7f5      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c5a:	fab3 f183 	clz	r1, r3
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d14e      	bne.n	8000d00 <__udivmoddi4+0x15c>
 8000c62:	4543      	cmp	r3, r8
 8000c64:	f0c0 8112 	bcc.w	8000e8c <__udivmoddi4+0x2e8>
 8000c68:	4282      	cmp	r2, r0
 8000c6a:	f240 810f 	bls.w	8000e8c <__udivmoddi4+0x2e8>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e8      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c74:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c78:	e7e5      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f000 80ac 	beq.w	8000dd8 <__udivmoddi4+0x234>
 8000c80:	fab2 f682 	clz	r6, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	f040 80bb 	bne.w	8000e00 <__udivmoddi4+0x25c>
 8000c8a:	1a8b      	subs	r3, r1, r2
 8000c8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c90:	b2bc      	uxth	r4, r7
 8000c92:	2101      	movs	r1, #1
 8000c94:	0c02      	lsrs	r2, r0, #16
 8000c96:	b280      	uxth	r0, r0
 8000c98:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ca4:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d90e      	bls.n	8000cca <__udivmoddi4+0x126>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb2:	bf2c      	ite	cs
 8000cb4:	f04f 0901 	movcs.w	r9, #1
 8000cb8:	f04f 0900 	movcc.w	r9, #0
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d903      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cc0:	f1b9 0f00 	cmp.w	r9, #0
 8000cc4:	f000 80ec 	beq.w	8000ea0 <__udivmoddi4+0x2fc>
 8000cc8:	46c4      	mov	ip, r8
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd4:	fb04 f408 	mul.w	r4, r4, r8
 8000cd8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000cdc:	4294      	cmp	r4, r2
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x154>
 8000ce0:	18ba      	adds	r2, r7, r2
 8000ce2:	f108 33ff 	add.w	r3, r8, #4294967295
 8000ce6:	bf2c      	ite	cs
 8000ce8:	2001      	movcs	r0, #1
 8000cea:	2000      	movcc	r0, #0
 8000cec:	4294      	cmp	r4, r2
 8000cee:	d902      	bls.n	8000cf6 <__udivmoddi4+0x152>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	f000 80d1 	beq.w	8000e98 <__udivmoddi4+0x2f4>
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	1b12      	subs	r2, r2, r4
 8000cfa:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000cfe:	e79d      	b.n	8000c3c <__udivmoddi4+0x98>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa08 f401 	lsl.w	r4, r8, r1
 8000d0a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	fa28 f806 	lsr.w	r8, r8, r6
 8000d16:	408a      	lsls	r2, r1
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fa1f fc87 	uxth.w	ip, r7
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	fbb8 fef0 	udiv	lr, r8, r0
 8000d2c:	fb00 881e 	mls	r8, r0, lr, r8
 8000d30:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d34:	fb0e f80c 	mul.w	r8, lr, ip
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d90e      	bls.n	8000d5a <__udivmoddi4+0x1b6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0b01 	movcs.w	fp, #1
 8000d48:	f04f 0b00 	movcc.w	fp, #0
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x1b4>
 8000d50:	f1bb 0f00 	cmp.w	fp, #0
 8000d54:	f000 80b8 	beq.w	8000ec8 <__udivmoddi4+0x324>
 8000d58:	46d6      	mov	lr, sl
 8000d5a:	eba4 0408 	sub.w	r4, r4, r8
 8000d5e:	fa1f f883 	uxth.w	r8, r3
 8000d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d66:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d90e      	bls.n	8000d94 <__udivmoddi4+0x1f0>
 8000d76:	193c      	adds	r4, r7, r4
 8000d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d7c:	bf2c      	ite	cs
 8000d7e:	f04f 0801 	movcs.w	r8, #1
 8000d82:	f04f 0800 	movcc.w	r8, #0
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d903      	bls.n	8000d92 <__udivmoddi4+0x1ee>
 8000d8a:	f1b8 0f00 	cmp.w	r8, #0
 8000d8e:	f000 809f 	beq.w	8000ed0 <__udivmoddi4+0x32c>
 8000d92:	4603      	mov	r3, r0
 8000d94:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da0:	4564      	cmp	r4, ip
 8000da2:	4673      	mov	r3, lr
 8000da4:	46e0      	mov	r8, ip
 8000da6:	d302      	bcc.n	8000dae <__udivmoddi4+0x20a>
 8000da8:	d107      	bne.n	8000dba <__udivmoddi4+0x216>
 8000daa:	45f1      	cmp	r9, lr
 8000dac:	d205      	bcs.n	8000dba <__udivmoddi4+0x216>
 8000dae:	ebbe 0302 	subs.w	r3, lr, r2
 8000db2:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000db6:	3801      	subs	r0, #1
 8000db8:	46e0      	mov	r8, ip
 8000dba:	b15d      	cbz	r5, 8000dd4 <__udivmoddi4+0x230>
 8000dbc:	ebb9 0203 	subs.w	r2, r9, r3
 8000dc0:	eb64 0408 	sbc.w	r4, r4, r8
 8000dc4:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e736      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000dd8:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ddc:	0c01      	lsrs	r1, r0, #16
 8000dde:	4614      	mov	r4, r2
 8000de0:	b280      	uxth	r0, r0
 8000de2:	4696      	mov	lr, r2
 8000de4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000de8:	2620      	movs	r6, #32
 8000dea:	4690      	mov	r8, r2
 8000dec:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000df0:	4610      	mov	r0, r2
 8000df2:	fbb1 f1f2 	udiv	r1, r1, r2
 8000df6:	eba3 0308 	sub.w	r3, r3, r8
 8000dfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfe:	e74b      	b.n	8000c98 <__udivmoddi4+0xf4>
 8000e00:	40b7      	lsls	r7, r6
 8000e02:	f1c6 0320 	rsb	r3, r6, #32
 8000e06:	fa01 f206 	lsl.w	r2, r1, r6
 8000e0a:	fa21 f803 	lsr.w	r8, r1, r3
 8000e0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e12:	fa20 f303 	lsr.w	r3, r0, r3
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	40b0      	lsls	r0, r6
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	0c19      	lsrs	r1, r3, #16
 8000e20:	b280      	uxth	r0, r0
 8000e22:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e26:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e2a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e2e:	fb09 f804 	mul.w	r8, r9, r4
 8000e32:	4588      	cmp	r8, r1
 8000e34:	d951      	bls.n	8000eda <__udivmoddi4+0x336>
 8000e36:	1879      	adds	r1, r7, r1
 8000e38:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e3c:	bf2c      	ite	cs
 8000e3e:	f04f 0a01 	movcs.w	sl, #1
 8000e42:	f04f 0a00 	movcc.w	sl, #0
 8000e46:	4588      	cmp	r8, r1
 8000e48:	d902      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000e4a:	f1ba 0f00 	cmp.w	sl, #0
 8000e4e:	d031      	beq.n	8000eb4 <__udivmoddi4+0x310>
 8000e50:	eba1 0108 	sub.w	r1, r1, r8
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	4543      	cmp	r3, r8
 8000e68:	d235      	bcs.n	8000ed6 <__udivmoddi4+0x332>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e70:	bf2c      	ite	cs
 8000e72:	f04f 0a01 	movcs.w	sl, #1
 8000e76:	f04f 0a00 	movcc.w	sl, #0
 8000e7a:	4543      	cmp	r3, r8
 8000e7c:	d2bb      	bcs.n	8000df6 <__udivmoddi4+0x252>
 8000e7e:	f1ba 0f00 	cmp.w	sl, #0
 8000e82:	d1b8      	bne.n	8000df6 <__udivmoddi4+0x252>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443b      	add	r3, r7
 8000e8a:	e7b4      	b.n	8000df6 <__udivmoddi4+0x252>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb68 0203 	sbc.w	r2, r8, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	4696      	mov	lr, r2
 8000e96:	e6eb      	b.n	8000c70 <__udivmoddi4+0xcc>
 8000e98:	443a      	add	r2, r7
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	e72b      	b.n	8000cf8 <__udivmoddi4+0x154>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	443b      	add	r3, r7
 8000ea6:	e710      	b.n	8000cca <__udivmoddi4+0x126>
 8000ea8:	3902      	subs	r1, #2
 8000eaa:	443b      	add	r3, r7
 8000eac:	e6a9      	b.n	8000c02 <__udivmoddi4+0x5e>
 8000eae:	443a      	add	r2, r7
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e6be      	b.n	8000c32 <__udivmoddi4+0x8e>
 8000eb4:	eba7 0808 	sub.w	r8, r7, r8
 8000eb8:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ebc:	4441      	add	r1, r8
 8000ebe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec2:	fb09 f804 	mul.w	r8, r9, r4
 8000ec6:	e7c9      	b.n	8000e5c <__udivmoddi4+0x2b8>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	e744      	b.n	8000d5a <__udivmoddi4+0x1b6>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e75e      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	e78d      	b.n	8000df6 <__udivmoddi4+0x252>
 8000eda:	eba1 0108 	sub.w	r1, r1, r8
 8000ede:	46cc      	mov	ip, r9
 8000ee0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee4:	fb09 f804 	mul.w	r8, r9, r4
 8000ee8:	e7b8      	b.n	8000e5c <__udivmoddi4+0x2b8>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 6dc6 	sub.w	sp, sp, #1584	@ 0x630
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 f8e6 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f91c 	bl	8001138 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fac2 	bl	8001488 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000f04:	f000 fa14 	bl	8001330 <MX_ICACHE_Init>
  MX_ADC1_Init();
 8000f08:	f000 f968 	bl	80011dc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f0c:	f000 f9dc 	bl	80012c8 <MX_DAC1_Init>
  MX_UART4_Init();
 8000f10:	f000 fa22 	bl	8001358 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000f14:	f000 fa6c 	bl	80013f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t y = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
  uint32_t numero = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
  uint16_t contador = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
  uint32_t buffer[360];
  uint16_t valor_temporal = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
  char msg[128];

  for(uint16_t x=0; x<363; x++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
 8000f36:	e042      	b.n	8000fbe <main+0xce>
	  buffer[x]= (uint16_t)(127 * sin(2*	3.141592 *x/360) + 127); //Adaptar al maximo valor DAC
 8000f38:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff facd 	bl	80004dc <__aeabi_i2d>
 8000f42:	a37b      	add	r3, pc, #492	@ (adr r3, 8001130 <main+0x240>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb32 	bl	80005b0 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <main+0x218>)
 8000f5a:	f7ff fc53 	bl	8000804 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	ec43 2b17 	vmov	d7, r2, r3
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	eef0 0a67 	vmov.f32	s1, s15
 8000f6e:	f006 fe47 	bl	8007c00 <sin>
 8000f72:	ec51 0b10 	vmov	r0, r1, d0
 8000f76:	a362      	add	r3, pc, #392	@ (adr r3, 8001100 <main+0x210>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fb18 	bl	80005b0 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	a35d      	add	r3, pc, #372	@ (adr r3, 8001100 <main+0x210>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff f959 	bl	8000244 <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fdcb 	bl	8000b34 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f8b7 262c 	ldrh.w	r2, [r7, #1580]	@ 0x62c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8000fac:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint16_t x=0; x<363; x++){
 8000fb4:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
 8000fbe:	f8b7 362c 	ldrh.w	r3, [r7, #1580]	@ 0x62c
 8000fc2:	f5b3 7fb5 	cmp.w	r3, #362	@ 0x16a
 8000fc6:	d9b7      	bls.n	8000f38 <main+0x48>
  }

  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_8B_R, 0x0);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2208      	movs	r2, #8
 8000fcc:	2100      	movs	r1, #0
 8000fce:	484f      	ldr	r0, [pc, #316]	@ (800110c <main+0x21c>)
 8000fd0:	f002 fcb8 	bl	8003944 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	484d      	ldr	r0, [pc, #308]	@ (800110c <main+0x21c>)
 8000fd8:	f002 fc5d 	bl	8003896 <HAL_DAC_Start>
  HAL_UART_Init(&huart4);
 8000fdc:	484c      	ldr	r0, [pc, #304]	@ (8001110 <main+0x220>)
 8000fde:	f004 fdf9 	bl	8005bd4 <HAL_UART_Init>
  HAL_UART_Init(&huart3);
 8000fe2:	484c      	ldr	r0, [pc, #304]	@ (8001114 <main+0x224>)
 8000fe4:	f004 fdf6 	bl	8005bd4 <HAL_UART_Init>
  HAL_ADC_Init(&hadc1);
 8000fe8:	484b      	ldr	r0, [pc, #300]	@ (8001118 <main+0x228>)
 8000fea:	f001 fafd 	bl	80025e8 <HAL_ADC_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 fda6 	bl	8001b40 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fda3 	bl	8001b40 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f000 fda0 	bl	8001b40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001000:	2101      	movs	r1, #1
 8001002:	2000      	movs	r0, #0
 8001004:	f000 fdfa 	bl	8001bfc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001008:	4b44      	ldr	r3, [pc, #272]	@ (800111c <main+0x22c>)
 800100a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001010:	4b42      	ldr	r3, [pc, #264]	@ (800111c <main+0x22c>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001016:	4b41      	ldr	r3, [pc, #260]	@ (800111c <main+0x22c>)
 8001018:	2200      	movs	r2, #0
 800101a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800101c:	4b3f      	ldr	r3, [pc, #252]	@ (800111c <main+0x22c>)
 800101e:	2200      	movs	r2, #0
 8001020:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001022:	4b3e      	ldr	r3, [pc, #248]	@ (800111c <main+0x22c>)
 8001024:	2200      	movs	r2, #0
 8001026:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001028:	493c      	ldr	r1, [pc, #240]	@ (800111c <main+0x22c>)
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fea2 	bl	8001d74 <BSP_COM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <main+0x14a>
  {
    Error_Handler();
 8001036:	f000 fa57 	bl	80014e8 <Error_Handler>

    /* USER CODE BEGIN 3 */
	  /* el codigo de pablo lo que hace es guardar en un buffer los puntos de la funcion y usar HAL_DACEx_DualStart_DMA para representar los puntos del buffer,
	  así no hay que repetir los calculos una vez hechos	*/

	  sprintf(msg, "Inicio %u\r\n");
 800103a:	463b      	mov	r3, r7
 800103c:	4938      	ldr	r1, [pc, #224]	@ (8001120 <main+0x230>)
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fd9c 	bl	8006b7c <siprintf>
	  printf(msg);
 8001044:	463b      	mov	r3, r7
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fd86 	bl	8006b58 <iprintf>

	  while(contador<360){
 800104c:	e041      	b.n	80010d2 <main+0x1e2>



		  valor_temporal = buffer[contador];
 800104e:	f8b7 262e 	ldrh.w	r2, [r7, #1582]	@ 0x62e
 8001052:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8001056:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_8B_R, buffer[contador]);
 8001062:	f8b7 262e 	ldrh.w	r2, [r7, #1582]	@ 0x62e
 8001066:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 800106a:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	2208      	movs	r2, #8
 8001074:	2100      	movs	r1, #0
 8001076:	4825      	ldr	r0, [pc, #148]	@ (800110c <main+0x21c>)
 8001078:	f002 fc64 	bl	8003944 <HAL_DAC_SetValue>
		  HAL_Delay(20);
 800107c:	2014      	movs	r0, #20
 800107e:	f001 f899 	bl	80021b4 <HAL_Delay>
		  HAL_ADC_Start(&hadc1);
 8001082:	4825      	ldr	r0, [pc, #148]	@ (8001118 <main+0x228>)
 8001084:	f001 fbfc 	bl	8002880 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10000);
 8001088:	f242 7110 	movw	r1, #10000	@ 0x2710
 800108c:	4822      	ldr	r0, [pc, #136]	@ (8001118 <main+0x228>)
 800108e:	f001 fcb1 	bl	80029f4 <HAL_ADC_PollForConversion>
		  numero = HAL_ADC_GetValue(&hadc1);
 8001092:	4821      	ldr	r0, [pc, #132]	@ (8001118 <main+0x228>)
 8001094:	f001 fd86 	bl	8002ba4 <HAL_ADC_GetValue>
 8001098:	f8c7 0624 	str.w	r0, [r7, #1572]	@ 0x624

		  sprintf(msg, "Medido: %lu\r\n",numero);
 800109c:	463b      	mov	r3, r7
 800109e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 80010a2:	4920      	ldr	r1, [pc, #128]	@ (8001124 <main+0x234>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 fd69 	bl	8006b7c <siprintf>
		  printf(msg);
 80010aa:	463b      	mov	r3, r7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fd53 	bl	8006b58 <iprintf>
		  sprintf(msg, "Original: %u\r\n",valor_temporal);
 80010b2:	f8b7 2622 	ldrh.w	r2, [r7, #1570]	@ 0x622
 80010b6:	463b      	mov	r3, r7
 80010b8:	491b      	ldr	r1, [pc, #108]	@ (8001128 <main+0x238>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fd5e 	bl	8006b7c <siprintf>
	  	  printf(msg);
 80010c0:	463b      	mov	r3, r7
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 fd48 	bl	8006b58 <iprintf>

	  	  contador++;
 80010c8:	f8b7 362e 	ldrh.w	r3, [r7, #1582]	@ 0x62e
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
	  while(contador<360){
 80010d2:	f8b7 362e 	ldrh.w	r3, [r7, #1582]	@ 0x62e
 80010d6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80010da:	d3b8      	bcc.n	800104e <main+0x15e>
	  }
	  sprintf(msg, "FIN %u\r\n");
 80010dc:	463b      	mov	r3, r7
 80010de:	4913      	ldr	r1, [pc, #76]	@ (800112c <main+0x23c>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fd4b 	bl	8006b7c <siprintf>
	  printf(msg);
 80010e6:	463b      	mov	r3, r7
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 fd35 	bl	8006b58 <iprintf>
 80010ee:	2300      	movs	r3, #0


  //}
  /* USER CODE END 3 */
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	f507 67c6 	add.w	r7, r7, #1584	@ 0x630
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	405fc000 	.word	0x405fc000
 8001108:	40768000 	.word	0x40768000
 800110c:	20000124 	.word	0x20000124
 8001110:	20000138 	.word	0x20000138
 8001114:	200001cc 	.word	0x200001cc
 8001118:	200000bc 	.word	0x200000bc
 800111c:	200000ac 	.word	0x200000ac
 8001120:	08008c68 	.word	0x08008c68
 8001124:	08008c74 	.word	0x08008c74
 8001128:	08008c84 	.word	0x08008c84
 800112c:	08008c94 	.word	0x08008c94
 8001130:	fc8b007a 	.word	0xfc8b007a
 8001134:	401921fa 	.word	0x401921fa

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b098      	sub	sp, #96	@ 0x60
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	2248      	movs	r2, #72	@ 0x48
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 fd7d 	bl	8006c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800115a:	2000      	movs	r0, #0
 800115c:	f002 ffca 	bl	80040f4 <HAL_PWREx_ControlVoltageScaling>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001166:	f000 f9bf 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800116a:	2310      	movs	r3, #16
 800116c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800116e:	2301      	movs	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001176:	2360      	movs	r3, #96	@ 0x60
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800117e:	2301      	movs	r3, #1
 8001180:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001186:	2337      	movs	r3, #55	@ 0x37
 8001188:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800118a:	2307      	movs	r3, #7
 800118c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f003 f84a 	bl	8004234 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011a6:	f000 f99f 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2105      	movs	r1, #5
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fd0c 	bl	8004be0 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ce:	f000 f98b 	bl	80014e8 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3760      	adds	r7, #96	@ 0x60
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001200:	4a2f      	ldr	r2, [pc, #188]	@ (80012c0 <MX_ADC1_Init+0xe4>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001204:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001216:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800121e:	2204      	movs	r2, #4
 8001220:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001224:	2200      	movs	r2, #0
 8001226:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001230:	2201      	movs	r2, #1
 8001232:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001252:	2200      	movs	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <MX_ADC1_Init+0xe0>)
 8001260:	f001 f9c2 	bl	80025e8 <HAL_ADC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800126a:	f000 f93d 	bl	80014e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <MX_ADC1_Init+0xe0>)
 800127a:	f002 f937 	bl	80034ec <HAL_ADCEx_MultiModeConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001284:	f000 f930 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_ADC1_Init+0xe8>)
 800128a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800128c:	2306      	movs	r3, #6
 800128e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001294:	237f      	movs	r3, #127	@ 0x7f
 8001296:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001298:	2304      	movs	r3, #4
 800129a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_ADC1_Init+0xe0>)
 80012a6:	f001 fc8b 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012b0:	f000 f91a 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000bc 	.word	0x200000bc
 80012c0:	42028000 	.word	0x42028000
 80012c4:	04300002 	.word	0x04300002

080012c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2228      	movs	r2, #40	@ 0x28
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fcb6 	bl	8006c46 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_DAC1_Init+0x60>)
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <MX_DAC1_Init+0x64>)
 80012de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_DAC1_Init+0x60>)
 80012e2:	f002 fab6 	bl	8003852 <HAL_DAC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012ec:	f000 f8fc 	bl	80014e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80012f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_DAC1_Init+0x60>)
 8001312:	f002 fb41 	bl	8003998 <HAL_DAC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 f8e4 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000124 	.word	0x20000124
 800132c:	40007400 	.word	0x40007400

08001330 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f002 fe9f 	bl	8004078 <HAL_ICACHE_ConfigAssociativityMode>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001340:	f000 f8d2 	bl	80014e8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001344:	f002 feb8 	bl	80040b8 <HAL_ICACHE_Enable>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800134e:	f000 f8cb 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_UART4_Init+0x90>)
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <MX_UART4_Init+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_UART4_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_UART4_Init+0x90>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_UART4_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_UART4_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MX_UART4_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_UART4_Init+0x90>)
 80013a2:	f004 fc17 	bl	8005bd4 <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013ac:	f000 f89c 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_UART4_Init+0x90>)
 80013b4:	f005 fa44 	bl	8006840 <HAL_UARTEx_SetTxFifoThreshold>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 f893 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <MX_UART4_Init+0x90>)
 80013c6:	f005 fa79 	bl	80068bc <HAL_UARTEx_SetRxFifoThreshold>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f000 f88a 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_UART4_Init+0x90>)
 80013d6:	f005 f9fa 	bl	80067ce <HAL_UARTEx_DisableFifoMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 f882 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000138 	.word	0x20000138
 80013ec:	40004c00 	.word	0x40004c00

080013f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <MX_USART3_UART_Init+0x94>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001438:	4811      	ldr	r0, [pc, #68]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800143a:	f004 fbcb 	bl	8005bd4 <HAL_UART_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 f850 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800144c:	f005 f9f8 	bl	8006840 <HAL_UARTEx_SetTxFifoThreshold>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001456:	f000 f847 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800145e:	f005 fa2d 	bl	80068bc <HAL_UARTEx_SetRxFifoThreshold>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 f83e 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_USART3_UART_Init+0x90>)
 800146e:	f005 f9ae 	bl	80067ce <HAL_UARTEx_DisableFifoMode>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001478:	f000 f836 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001cc 	.word	0x200001cc
 8001484:	40004800 	.word	0x40004800

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_GPIO_Init+0x5c>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <Error_Handler+0x8>

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800152a:	f002 fe4f 	bl	80041cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0ae      	sub	sp, #184	@ 0xb8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2294      	movs	r2, #148	@ 0x94
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fb72 	bl	8006c46 <memset>
  if(hadc->Instance==ADC1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_ADC_MspInit+0xa8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d137      	bne.n	80015dc <HAL_ADC_MspInit+0xa0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800156c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001570:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001572:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fe12 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800158a:	f7ff ffad 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 8001594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_ADC_MspInit+0xac>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c4:	2303      	movs	r3, #3
 80015c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_ADC_MspInit+0xb0>)
 80015d8:	f002 fbb6 	bl	8003d48 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015dc:	bf00      	nop
 80015de:	37b8      	adds	r7, #184	@ 0xb8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	42028000 	.word	0x42028000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	42020800 	.word	0x42020800

080015f0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <HAL_DAC_MspInit+0x74>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d123      	bne.n	800165a <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 8001618:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800161c:	6593      	str	r3, [r2, #88]	@ 0x58
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_DAC_MspInit+0x78>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001642:	2310      	movs	r3, #16
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_DAC_MspInit+0x7c>)
 8001656:	f002 fb77 	bl	8003d48 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	@ 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40007400 	.word	0x40007400
 8001668:	40021000 	.word	0x40021000
 800166c:	42020000 	.word	0x42020000

08001670 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0b0      	sub	sp, #192	@ 0xc0
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	2294      	movs	r2, #148	@ 0x94
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f005 fad8 	bl	8006c46 <memset>
  if(huart->Instance==UART4)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a42      	ldr	r2, [pc, #264]	@ (80017a4 <HAL_UART_MspInit+0x134>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13b      	bne.n	8001718 <HAL_UART_MspInit+0xa8>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016a0:	2308      	movs	r3, #8
 80016a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fd7b 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b8:	f7ff ff16 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016bc:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	4a39      	ldr	r2, [pc, #228]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c8:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a33      	ldr	r2, [pc, #204]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001704:	2308      	movs	r3, #8
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800170e:	4619      	mov	r1, r3
 8001710:	4826      	ldr	r0, [pc, #152]	@ (80017ac <HAL_UART_MspInit+0x13c>)
 8001712:	f002 fb19 	bl	8003d48 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001716:	e040      	b.n	800179a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <HAL_UART_MspInit+0x140>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13b      	bne.n	800179a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001722:	2304      	movs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001726:	2300      	movs	r3, #0
 8001728:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fd3a 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800173a:	f7ff fed5 	bl	80014e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_UART_MspInit+0x138>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800176e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001788:	2307      	movs	r3, #7
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <HAL_UART_MspInit+0x144>)
 8001796:	f002 fad7 	bl	8003d48 <HAL_GPIO_Init>
}
 800179a:	bf00      	nop
 800179c:	37c0      	adds	r7, #192	@ 0xc0
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004c00 	.word	0x40004c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42020000 	.word	0x42020000
 80017b0:	40004800 	.word	0x40004800
 80017b4:	42020400 	.word	0x42020400

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <NMI_Handler+0x4>

080017c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <MemManage_Handler+0x4>

080017d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <UsageFault_Handler+0x4>

080017e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 fcb1 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 fa94 	bl	8001d48 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e00a      	b.n	800184c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001836:	f3af 8000 	nop.w
 800183a:	4601      	mov	r1, r0
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf0      	blt.n	8001836 <_read+0x12>
  }

  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e009      	b.n	8001884 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 facf 	bl	8001e1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf1      	blt.n	8001870 <_write+0x12>
  }
  return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_close>:

int _close(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018be:	605a      	str	r2, [r3, #4]
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f005 f9d8 	bl	8006ce4 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20030000 	.word	0x20030000
 8001960:	00000400 	.word	0x00000400
 8001964:	20000260 	.word	0x20000260
 8001968:	200004f0 	.word	0x200004f0

0800196c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001996:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80019a2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e005      	b.n	80019be <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80019b2:	4b48      	ldr	r3, [pc, #288]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80019be:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <SystemCoreClockUpdate+0x148>)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d866      	bhi.n	8001aa2 <SystemCoreClockUpdate+0x112>
 80019d4:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <SystemCoreClockUpdate+0x4c>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	08001a11 	.word	0x08001a11
 80019e0:	08001aa3 	.word	0x08001aa3
 80019e4:	08001aa3 	.word	0x08001aa3
 80019e8:	08001aa3 	.word	0x08001aa3
 80019ec:	08001a19 	.word	0x08001a19
 80019f0:	08001aa3 	.word	0x08001aa3
 80019f4:	08001aa3 	.word	0x08001aa3
 80019f8:	08001aa3 	.word	0x08001aa3
 80019fc:	08001a21 	.word	0x08001a21
 8001a00:	08001aa3 	.word	0x08001aa3
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001a29 	.word	0x08001a29
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001a10:	4a32      	ldr	r2, [pc, #200]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	6013      	str	r3, [r2, #0]
      break;
 8001a16:	e048      	b.n	8001aaa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001a18:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001a1a:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <SystemCoreClockUpdate+0x150>)
 8001a1c:	601a      	str	r2, [r3, #0]
      break;
 8001a1e:	e044      	b.n	8001aaa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001a22:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <SystemCoreClockUpdate+0x154>)
 8001a24:	601a      	str	r2, [r3, #0]
      break;
 8001a26:	e040      	b.n	8001aaa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <SystemCoreClockUpdate+0xbe>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d006      	beq.n	8001a5a <SystemCoreClockUpdate+0xca>
 8001a4c:	e00b      	b.n	8001a66 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001a4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ae0 <SystemCoreClockUpdate+0x150>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	613b      	str	r3, [r7, #16]
          break;
 8001a58:	e00b      	b.n	8001a72 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <SystemCoreClockUpdate+0x154>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	613b      	str	r3, [r7, #16]
          break;
 8001a64:	e005      	b.n	8001a72 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	613b      	str	r3, [r7, #16]
          break;
 8001a70:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a72:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0e5b      	lsrs	r3, r3, #25
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001a9e:	6013      	str	r3, [r2, #0]
      break;
 8001aa0:	e003      	b.n	8001aaa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	6013      	str	r3, [r2, #0]
      break;
 8001aa8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <SystemCoreClockUpdate+0x144>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <SystemCoreClockUpdate+0x158>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <SystemCoreClockUpdate+0x14c>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08008ce4 	.word	0x08008ce4
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	00f42400 	.word	0x00f42400
 8001ae4:	007a1200 	.word	0x007a1200
 8001ae8:	08008ccc 	.word	0x08008ccc

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af0:	f7ff ff3c 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b00:	480a      	ldr	r0, [pc, #40]	@ (8001b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
	ldr	r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <LoopForever+0x16>)
	cmp	r2, r3
 8001b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b1a:	f005 f8e9 	bl	8006cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7ff f9e7 	bl	8000ef0 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b24:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001b28:	08008f68 	.word	0x08008f68
	ldr	r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b30:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8001b34:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8001b38:	200004ec 	.word	0x200004ec

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>
	...

08001b40 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5c:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	e01b      	b.n	8001ba2 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10c      	bne.n	8001b8a <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	e00b      	b.n	8001ba2 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a18      	ldr	r2, [pc, #96]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <BSP_LED_Init+0xb0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <BSP_LED_Init+0xb4>)
 8001ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf8 <BSP_LED_Init+0xb8>)
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	f107 0214 	add.w	r2, r7, #20
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 f8be 	bl	8003d48 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <BSP_LED_Init+0xb8>)
 8001bd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <BSP_LED_Init+0xb4>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	f002 fa32 	bl	8004048 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c

08001bfc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8001c10:	230f      	movs	r3, #15
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8001c14:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <BSP_PB_Init+0x118>)
 8001c16:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8001c18:	4b3f      	ldr	r3, [pc, #252]	@ (8001d18 <BSP_PB_Init+0x11c>)
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <BSP_PB_Init+0x120>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	4a3e      	ldr	r2, [pc, #248]	@ (8001d1c <BSP_PB_Init+0x120>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c28:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <BSP_PB_Init+0x120>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4a3a      	ldr	r2, [pc, #232]	@ (8001d20 <BSP_PB_Init+0x124>)
 8001c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	2302      	movs	r3, #2
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a34      	ldr	r2, [pc, #208]	@ (8001d24 <BSP_PB_Init+0x128>)
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	f107 0218 	add.w	r2, r7, #24
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 f872 	bl	8003d48 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d14f      	bne.n	8001d0a <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8001c6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	4a2c      	ldr	r2, [pc, #176]	@ (8001d24 <BSP_PB_Init+0x128>)
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	f107 0218 	add.w	r2, r7, #24
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f862 	bl	8003d48 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a26      	ldr	r2, [pc, #152]	@ (8001d28 <BSP_PB_Init+0x12c>)
 8001c90:	441a      	add	r2, r3
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3330      	adds	r3, #48	@ 0x30
 8001c98:	443b      	add	r3, r7
 8001c9a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f001 fff5 	bl	8003c90 <HAL_EXTI_GetHandle>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12b      	bne.n	8001d04 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <BSP_PB_Init+0x12c>)
 8001cb8:	1898      	adds	r0, r3, r2
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3330      	adds	r3, #48	@ 0x30
 8001cc0:	443b      	add	r3, r7
 8001cc2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2101      	movs	r1, #1
 8001cca:	f001 ffb5 	bl	8003c38 <HAL_EXTI_RegisterCallback>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d113      	bne.n	8001cfc <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <BSP_PB_Init+0x130>)
 8001cd8:	56d0      	ldrsb	r0, [r2, r3]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3330      	adds	r3, #48	@ 0x30
 8001ce0:	443b      	add	r3, r7
 8001ce2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f001 fd7e 	bl	80037ea <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <BSP_PB_Init+0x130>)
 8001cf2:	56d3      	ldrsb	r3, [r2, r3]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fd92 	bl	800381e <HAL_NVIC_EnableIRQ>
 8001cfa:	e006      	b.n	8001d0a <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001cfc:	f06f 0303 	mvn.w	r3, #3
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d02:	e002      	b.n	8001d0a <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8001d04:	f06f 0303 	mvn.w	r3, #3
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8001d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3730      	adds	r7, #48	@ 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0600000d 	.word	0x0600000d
 8001d18:	08001f19 	.word	0x08001f19
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	20000018 	.word	0x20000018
 8001d24:	2000001c 	.word	0x2000001c
 8001d28:	2000038c 	.word	0x2000038c
 8001d2c:	20000020 	.word	0x20000020

08001d30 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <BSP_PB_IRQHandler+0x28>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 ffa9 	bl	8003cb8 <HAL_EXTI_IRQHandler>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000038c 	.word	0x2000038c

08001d74 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d8a:	f06f 0301 	mvn.w	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e03a      	b.n	8001e08 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	491f      	ldr	r1, [pc, #124]	@ (8001e14 <BSP_COM_Init+0xa0>)
 8001d98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d9c:	491e      	ldr	r1, [pc, #120]	@ (8001e18 <BSP_COM_Init+0xa4>)
 8001d9e:	2094      	movs	r0, #148	@ 0x94
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	440b      	add	r3, r1
 8001da6:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2294      	movs	r2, #148	@ 0x94
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <BSP_COM_Init+0xa4>)
 8001db2:	4413      	add	r3, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f8b7 	bl	8001f28 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d123      	bne.n	8001e08 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d110      	bne.n	8001de8 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2294      	movs	r2, #148	@ 0x94
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <BSP_COM_Init+0xa4>)
 8001dd0:	4413      	add	r3, r2
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f83d 	bl	8001e54 <MX_LPUART1_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8001de0:	f06f 0303 	mvn.w	r3, #3
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00f      	b.n	8001e08 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2294      	movs	r2, #148	@ 0x94
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <BSP_COM_Init+0xa4>)
 8001df2:	4413      	add	r3, r2
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f85d 	bl	8001eb6 <MX_USART3_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8001e02:	f06f 0303 	mvn.w	r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000024 	.word	0x20000024
 8001e18:	20000264 	.word	0x20000264

08001e1c <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <__io_putchar+0x30>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2394      	movs	r3, #148	@ 0x94
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <__io_putchar+0x34>)
 8001e32:	1898      	adds	r0, r3, r2
 8001e34:	1d39      	adds	r1, r7, #4
 8001e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f003 ff1a 	bl	8005c74 <HAL_UART_Transmit>
  return ch;
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000398 	.word	0x20000398
 8001e50:	20000264 	.word	0x20000264

08001e54 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	891b      	ldrh	r3, [r3, #8]
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	895b      	ldrh	r3, [r3, #10]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	899b      	ldrh	r3, [r3, #12]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e98:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f003 fe94 	bl	8005bd4 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	891b      	ldrh	r3, [r3, #8]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	895b      	ldrh	r3, [r3, #10]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	899b      	ldrh	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001efa:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f003 fe63 	bl	8005bd4 <HAL_UART_Init>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff ff07 	bl	8001d30 <BSP_PB_Callback>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b098      	sub	sp, #96	@ 0x60
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8001f30:	4a60      	ldr	r2, [pc, #384]	@ (80020b4 <UART_MspInit+0x18c>)
 8001f32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f3a:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <UART_MspInit+0x18c>)
 8001f40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f48:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <UART_MspInit+0x190>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8001f52:	4b5a      	ldr	r3, [pc, #360]	@ (80020bc <UART_MspInit+0x194>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8001f58:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001f5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8001f5e:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001f62:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a55      	ldr	r2, [pc, #340]	@ (80020c0 <UART_MspInit+0x198>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8001f78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d132      	bne.n	8001fe6 <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <UART_MspInit+0x19c>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	4a4f      	ldr	r2, [pc, #316]	@ (80020c4 <UART_MspInit+0x19c>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80020c4 <UART_MspInit+0x19c>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8001f98:	f002 f908 	bl	80041ac <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8001f9c:	4b49      	ldr	r3, [pc, #292]	@ (80020c4 <UART_MspInit+0x19c>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	4a48      	ldr	r2, [pc, #288]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa8:	4b46      	ldr	r3, [pc, #280]	@ (80020c4 <UART_MspInit+0x19c>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc0:	4b40      	ldr	r3, [pc, #256]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	e023      	b.n	800202e <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8001fe6:	4b37      	ldr	r3, [pc, #220]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	4a36      	ldr	r2, [pc, #216]	@ (80020c4 <UART_MspInit+0x19c>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff2:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <UART_MspInit+0x19c>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8001ffe:	4b31      	ldr	r3, [pc, #196]	@ (80020c4 <UART_MspInit+0x19c>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	4a30      	ldr	r2, [pc, #192]	@ (80020c4 <UART_MspInit+0x19c>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <UART_MspInit+0x19c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8002016:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <UART_MspInit+0x19c>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	4a2a      	ldr	r2, [pc, #168]	@ (80020c4 <UART_MspInit+0x19c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	6593      	str	r3, [r2, #88]	@ 0x58
 8002022:	4b28      	ldr	r3, [pc, #160]	@ (80020c4 <UART_MspInit+0x19c>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 800202e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	3360      	adds	r3, #96	@ 0x60
 8002036:	443b      	add	r3, r7
 8002038:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800203c:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002042:	2302      	movs	r3, #2
 8002044:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 800204a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800204e:	3360      	adds	r3, #96	@ 0x60
 8002050:	443b      	add	r3, r7
 8002052:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002056:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8002058:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3360      	adds	r3, #96	@ 0x60
 8002060:	443b      	add	r3, r7
 8002062:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002066:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fe6b 	bl	8003d48 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8002072:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	3360      	adds	r3, #96	@ 0x60
 800207a:	443b      	add	r3, r7
 800207c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002080:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8002082:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002086:	3360      	adds	r3, #96	@ 0x60
 8002088:	443b      	add	r3, r7
 800208a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800208e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8002090:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3360      	adds	r3, #96	@ 0x60
 8002098:	443b      	add	r3, r7
 800209a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800209e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fe4f 	bl	8003d48 <HAL_GPIO_Init>
}
 80020aa:	bf00      	nop
 80020ac:	3760      	adds	r7, #96	@ 0x60
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	08008cbc 	.word	0x08008cbc
 80020b8:	08008cc4 	.word	0x08008cc4
 80020bc:	08008cc8 	.word	0x08008cc8
 80020c0:	40008000 	.word	0x40008000
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80020d2:	2004      	movs	r0, #4
 80020d4:	f001 fb7e 	bl	80037d4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80020d8:	f7ff fc5a 	bl	8001990 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f80d 	bl	80020fc <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	e001      	b.n	80020f2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ee:	f7ff fa01 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_InitTick+0x6c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d023      	beq.n	8002158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_InitTick+0x70>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_InitTick+0x6c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fb87 	bl	800383a <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b07      	cmp	r3, #7
 8002136:	d809      	bhi.n	800214c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f001 fb53 	bl	80037ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002144:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <HAL_InitTick+0x74>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e007      	b.n	800215c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e004      	b.n	800215c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e001      	b.n	800215c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000030 	.word	0x20000030
 800216c:	20000000 	.word	0x20000000
 8002170:	2000002c 	.word	0x2000002c

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000030 	.word	0x20000030
 8002198:	2000039c 	.word	0x2000039c

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000039c 	.word	0x2000039c

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000030 	.word	0x20000030

080021fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3360      	adds	r3, #96	@ 0x60
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <LL_ADC_SetOffset+0x44>)
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	4313      	orrs	r3, r2
 8002294:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	03fff000 	.word	0x03fff000

080022ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3360      	adds	r3, #96	@ 0x60
 80022ba:	461a      	mov	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3360      	adds	r3, #96	@ 0x60
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800235a:	b480      	push	{r7}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3330      	adds	r3, #48	@ 0x30
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	4413      	add	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	211f      	movs	r1, #31
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 011f 	and.w	r1, r3, #31
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b087      	sub	sp, #28
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3314      	adds	r3, #20
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	0e5b      	lsrs	r3, r3, #25
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	0d1b      	lsrs	r3, r3, #20
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2107      	movs	r1, #7
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	0d1b      	lsrs	r3, r3, #20
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	431a      	orrs	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0318 	and.w	r3, r3, #24
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <LL_ADC_SetChannelSingleDiff+0x44>)
 800242c:	40d9      	lsrs	r1, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	400b      	ands	r3, r1
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	431a      	orrs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	0007ffff 	.word	0x0007ffff

08002450 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 031f 	and.w	r3, r3, #31
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6093      	str	r3, [r2, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002510:	d101      	bne.n	8002516 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <LL_ADC_IsEnabled+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_ADC_IsEnabled+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002582:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d101      	bne.n	80025b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d101      	bne.n	80025d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e12e      	b.n	8002860 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe ff93 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff3f 	bl	80024ac <LL_ADC_IsDeepPowerDownEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff25 	bl	8002488 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff5a 	bl	80024fc <LL_ADC_IsInternalRegulatorEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d115      	bne.n	800267a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff3e 	bl	80024d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002658:	4b83      	ldr	r3, [pc, #524]	@ (8002868 <HAL_ADC_Init+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	4a83      	ldr	r2, [pc, #524]	@ (800286c <HAL_ADC_Init+0x284>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800266c:	e002      	b.n	8002674 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3b01      	subs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff3c 	bl	80024fc <LL_ADC_IsInternalRegulatorEnabled>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10d      	bne.n	80026a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff75 	bl	800259a <LL_ADC_REG_IsConversionOngoing>
 80026b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80c7 	bne.w	800284e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80c3 	bne.w	800284e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026d0:	f043 0202 	orr.w	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff35 	bl	800254c <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d110      	bne.n	800270a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e8:	4861      	ldr	r0, [pc, #388]	@ (8002870 <HAL_ADC_Init+0x288>)
 80026ea:	f7ff ff2f 	bl	800254c <LL_ADC_IsEnabled>
 80026ee:	4604      	mov	r4, r0
 80026f0:	4860      	ldr	r0, [pc, #384]	@ (8002874 <HAL_ADC_Init+0x28c>)
 80026f2:	f7ff ff2b 	bl	800254c <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4323      	orrs	r3, r4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4619      	mov	r1, r3
 8002704:	485c      	ldr	r0, [pc, #368]	@ (8002878 <HAL_ADC_Init+0x290>)
 8002706:	f7ff fd79 	bl	80021fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7e5b      	ldrb	r3, [r3, #25]
 800270e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002714:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800271a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002720:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002728:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	3b01      	subs	r3, #1
 800273e:	045b      	lsls	r3, r3, #17
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b44      	ldr	r3, [pc, #272]	@ (800287c <HAL_ADC_Init+0x294>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	430b      	orrs	r3, r1
 8002774:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff20 	bl	80025c0 <LL_ADC_INJ_IsConversionOngoing>
 8002780:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d140      	bne.n	800280a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13d      	bne.n	800280a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7e1b      	ldrb	r3, [r3, #24]
 8002796:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002798:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027b0:	f023 0306 	bic.w	r3, r3, #6
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d118      	bne.n	80027fa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027ea:	430a      	orrs	r2, r1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	e007      	b.n	800280a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10c      	bne.n	800282c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f023 010f 	bic.w	r1, r3, #15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
 800282a:	e007      	b.n	800283c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020f 	bic.w	r2, r2, #15
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	f023 0303 	bic.w	r3, r3, #3
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	659a      	str	r2, [r3, #88]	@ 0x58
 800284c:	e007      	b.n	800285e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800285e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3724      	adds	r7, #36	@ 0x24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	20000000 	.word	0x20000000
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	42028000 	.word	0x42028000
 8002874:	42028100 	.word	0x42028100
 8002878:	42028300 	.word	0x42028300
 800287c:	fff0c007 	.word	0xfff0c007

08002880 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002888:	4857      	ldr	r0, [pc, #348]	@ (80029e8 <HAL_ADC_Start+0x168>)
 800288a:	f7ff fde1 	bl	8002450 <LL_ADC_GetMultimode>
 800288e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fe80 	bl	800259a <LL_ADC_REG_IsConversionOngoing>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 809c 	bne.w	80029da <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_Start+0x30>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e097      	b.n	80029e0 <HAL_ADC_Start+0x160>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fd6b 	bl	8003394 <ADC_Enable>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8083 	bne.w	80029d0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a42      	ldr	r2, [pc, #264]	@ (80029ec <HAL_ADC_Start+0x16c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d002      	beq.n	80028ee <HAL_ADC_Start+0x6e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_Start+0x70>
 80028ee:	4b40      	ldr	r3, [pc, #256]	@ (80029f0 <HAL_ADC_Start+0x170>)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d002      	beq.n	80028fe <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d106      	bne.n	8002926 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	f023 0206 	bic.w	r2, r3, #6
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002924:	e002      	b.n	800292c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	221c      	movs	r2, #28
 8002932:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2a      	ldr	r2, [pc, #168]	@ (80029ec <HAL_ADC_Start+0x16c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d002      	beq.n	800294c <HAL_ADC_Start+0xcc>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e000      	b.n	800294e <HAL_ADC_Start+0xce>
 800294c:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_ADC_Start+0x170>)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4293      	cmp	r3, r2
 8002954:	d008      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d002      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d114      	bne.n	8002992 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800297e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fdf1 	bl	8002572 <LL_ADC_REG_StartConversion>
 8002990:	e025      	b.n	80029de <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <HAL_ADC_Start+0x16c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_Start+0x12e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e000      	b.n	80029b0 <HAL_ADC_Start+0x130>
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_ADC_Start+0x170>)
 80029b0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00f      	beq.n	80029de <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ce:	e006      	b.n	80029de <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80029d8:	e001      	b.n	80029de <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	42028300 	.word	0x42028300
 80029ec:	42028100 	.word	0x42028100
 80029f0:	42028000 	.word	0x42028000

080029f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	4866      	ldr	r0, [pc, #408]	@ (8002b98 <HAL_ADC_PollForConversion+0x1a4>)
 8002a00:	f7ff fd26 	bl	8002450 <LL_ADC_GetMultimode>
 8002a04:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e02a      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d002      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0a4      	b.n	8002b8e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a44:	2304      	movs	r3, #4
 8002a46:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a48:	e00f      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a4a:	4853      	ldr	r0, [pc, #332]	@ (8002b98 <HAL_ADC_PollForConversion+0x1a4>)
 8002a4c:	f7ff fd0e 	bl	800246c <LL_ADC_GetMultiDMATransfer>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e093      	b.n	8002b8e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a66:	2304      	movs	r3, #4
 8002a68:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a6a:	f7ff fb97 	bl	800219c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a70:	e021      	b.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d01d      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a7a:	f7ff fb8f 	bl	800219c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <HAL_ADC_PollForConversion+0x9c>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d112      	bne.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e06b      	b.n	8002b8e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0d6      	beq.n	8002a72 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fc2d 	bl	8002334 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7e5b      	ldrb	r3, [r3, #25]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d118      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d111      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <HAL_ADC_PollForConversion+0x1a8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d002      	beq.n	8002b2a <HAL_ADC_PollForConversion+0x136>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_PollForConversion+0x138>
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_ADC_PollForConversion+0x1ac>)
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d008      	beq.n	8002b46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d002      	beq.n	8002b46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b09      	cmp	r3, #9
 8002b44:	d104      	bne.n	8002b50 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e00c      	b.n	8002b6a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <HAL_ADC_PollForConversion+0x1a8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d002      	beq.n	8002b60 <HAL_ADC_PollForConversion+0x16c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_PollForConversion+0x16e>
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_ADC_PollForConversion+0x1ac>)
 8002b62:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d104      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2208      	movs	r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e008      	b.n	8002b8c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	220c      	movs	r2, #12
 8002b8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	42028300 	.word	0x42028300
 8002b9c:	42028100 	.word	0x42028100
 8002ba0:	42028000 	.word	0x42028000

08002ba4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b0b7      	sub	sp, #220	@ 0xdc
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x22>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e3c1      	b.n	8003366 <HAL_ADC_ConfigChannel+0x7a6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fcd3 	bl	800259a <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 83a6 	bne.w	8003348 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f7ff fba6 	bl	800235a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fcc1 	bl	800259a <LL_ADC_REG_IsConversionOngoing>
 8002c18:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fccd 	bl	80025c0 <LL_ADC_INJ_IsConversionOngoing>
 8002c26:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 81c1 	bne.w	8002fb6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 81bc 	bne.w	8002fb6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c46:	d10f      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7ff fbad 	bl	80023b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fb54 	bl	800230e <LL_ADC_SetSamplingTimeCommonConfig>
 8002c66:	e00e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f7ff fb9c 	bl	80023b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb44 	bl	800230e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00a      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cb8:	f7ff fad4 	bl	8002264 <LL_ADC_SetOffset>
 8002cbc:	e17b      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff faf1 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x12a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fae6 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	e01e      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x168>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fadb 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e004      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x180>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	e018      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1b2>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e004      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d106      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff faaa 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fa8e 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x1f0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fa83 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	e01e      	b.n	8002dee <HAL_ADC_ConfigChannel+0x22e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fa78 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e004      	b.n	8002dec <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x246>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	e018      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x278>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e004      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fa47 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fa2b 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x2b6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fa20 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	e01e      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x2f4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fa15 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e004      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x30c>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	e016      	b.n	8002efa <HAL_ADC_ConfigChannel+0x33a>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ede:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e004      	b.n	8002efa <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2102      	movs	r1, #2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f9e6 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2103      	movs	r1, #3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f9ca 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x378>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2103      	movs	r1, #3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff f9bf 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	0e9b      	lsrs	r3, r3, #26
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	e017      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x3a8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f9b4 	bl	80022ac <LL_ADC_GetOffsetChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f52:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e003      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x3c0>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	e011      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x3e4>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d106      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	2103      	movs	r1, #3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f991 	bl	80022d8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fac6 	bl	800254c <LL_ADC_IsEnabled>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 81c9 	bne.w	800335a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f7ff fa17 	bl	8002408 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4a8f      	ldr	r2, [pc, #572]	@ (800321c <HAL_ADC_ConfigChannel+0x65c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f040 8131 	bne.w	8003248 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_ADC_ConfigChannel+0x44e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2b09      	cmp	r3, #9
 8003004:	bf94      	ite	ls
 8003006:	2301      	movls	r3, #1
 8003008:	2300      	movhi	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e019      	b.n	8003042 <HAL_ADC_ConfigChannel+0x482>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800301c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800302a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2b09      	cmp	r3, #9
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003042:	2b00      	cmp	r3, #0
 8003044:	d079      	beq.n	800313a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x4a2>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	3301      	adds	r3, #1
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003060:	e015      	b.n	800308e <HAL_ADC_ConfigChannel+0x4ce>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003072:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800307e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	069b      	lsls	r3, r3, #26
 800308a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x4ee>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	3301      	adds	r3, #1
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	e017      	b.n	80030de <HAL_ADC_ConfigChannel+0x51e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	e003      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80030ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	ea42 0103 	orr.w	r1, r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x544>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	051b      	lsls	r3, r3, #20
 8003102:	e018      	b.n	8003136 <HAL_ADC_ConfigChannel+0x576>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	430b      	orrs	r3, r1
 8003138:	e081      	b.n	800323e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x596>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003154:	e015      	b.n	8003182 <HAL_ADC_ConfigChannel+0x5c2>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x5e2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	3301      	adds	r3, #1
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	e017      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x612>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
  return result;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	ea42 0103 	orr.w	r1, r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x63e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	3b1e      	subs	r3, #30
 80031f6:	051b      	lsls	r3, r3, #20
 80031f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031fc:	e01e      	b.n	800323c <HAL_ADC_ConfigChannel+0x67c>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	613b      	str	r3, [r7, #16]
  return result;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e006      	b.n	8003228 <HAL_ADC_ConfigChannel+0x668>
 800321a:	bf00      	nop
 800321c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f003 021f 	and.w	r2, r3, #31
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	3b1e      	subs	r3, #30
 8003236:	051b      	lsls	r3, r3, #20
 8003238:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800323c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003242:	4619      	mov	r1, r3
 8003244:	f7ff f8b5 	bl	80023b2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b48      	ldr	r3, [pc, #288]	@ (8003370 <HAL_ADC_ConfigChannel+0x7b0>)
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8082 	beq.w	800335a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003256:	4847      	ldr	r0, [pc, #284]	@ (8003374 <HAL_ADC_ConfigChannel+0x7b4>)
 8003258:	f7fe fff6 	bl	8002248 <LL_ADC_GetCommonPathInternalCh>
 800325c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003260:	4845      	ldr	r0, [pc, #276]	@ (8003378 <HAL_ADC_ConfigChannel+0x7b8>)
 8003262:	f7ff f973 	bl	800254c <LL_ADC_IsEnabled>
 8003266:	4604      	mov	r4, r0
 8003268:	4844      	ldr	r0, [pc, #272]	@ (800337c <HAL_ADC_ConfigChannel+0x7bc>)
 800326a:	f7ff f96f 	bl	800254c <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	4323      	orrs	r3, r4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d15e      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a41      	ldr	r2, [pc, #260]	@ (8003380 <HAL_ADC_ConfigChannel+0x7c0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d127      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d121      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a39      	ldr	r2, [pc, #228]	@ (8003378 <HAL_ADC_ConfigChannel+0x7b8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d161      	bne.n	800335a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800329a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800329e:	4619      	mov	r1, r3
 80032a0:	4834      	ldr	r0, [pc, #208]	@ (8003374 <HAL_ADC_ConfigChannel+0x7b4>)
 80032a2:	f7fe ffbe 	bl	8002222 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a6:	4b37      	ldr	r3, [pc, #220]	@ (8003384 <HAL_ADC_ConfigChannel+0x7c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	4a36      	ldr	r2, [pc, #216]	@ (8003388 <HAL_ADC_ConfigChannel+0x7c8>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80032be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ce:	e044      	b.n	800335a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <HAL_ADC_ConfigChannel+0x7cc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a23      	ldr	r2, [pc, #140]	@ (8003378 <HAL_ADC_ConfigChannel+0x7b8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d134      	bne.n	800335a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f8:	4619      	mov	r1, r3
 80032fa:	481e      	ldr	r0, [pc, #120]	@ (8003374 <HAL_ADC_ConfigChannel+0x7b4>)
 80032fc:	f7fe ff91 	bl	8002222 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003300:	e02b      	b.n	800335a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_ADC_ConfigChannel+0x7d0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d126      	bne.n	800335a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800330c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d120      	bne.n	800335a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_ADC_ConfigChannel+0x7b8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d11b      	bne.n	800335a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003326:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800332a:	4619      	mov	r1, r3
 800332c:	4811      	ldr	r0, [pc, #68]	@ (8003374 <HAL_ADC_ConfigChannel+0x7b4>)
 800332e:	f7fe ff78 	bl	8002222 <LL_ADC_SetCommonPathInternalCh>
 8003332:	e012      	b.n	800335a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003346:	e008      	b.n	800335a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003362:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003366:	4618      	mov	r0, r3
 8003368:	37dc      	adds	r7, #220	@ 0xdc
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	80080000 	.word	0x80080000
 8003374:	42028300 	.word	0x42028300
 8003378:	42028000 	.word	0x42028000
 800337c:	42028100 	.word	0x42028100
 8003380:	c7520000 	.word	0xc7520000
 8003384:	20000000 	.word	0x20000000
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	cb840000 	.word	0xcb840000
 8003390:	80000001 	.word	0x80000001

08003394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f8d1 	bl	800254c <LL_ADC_IsEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d169      	bne.n	8003484 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <ADC_Enable+0xfc>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e055      	b.n	8003486 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f8a0 	bl	8002524 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033e4:	482b      	ldr	r0, [pc, #172]	@ (8003494 <ADC_Enable+0x100>)
 80033e6:	f7fe ff2f 	bl	8002248 <LL_ADC_GetCommonPathInternalCh>
 80033ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <ADC_Enable+0x104>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	4a28      	ldr	r2, [pc, #160]	@ (800349c <ADC_Enable+0x108>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800340e:	e002      	b.n	8003416 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3b01      	subs	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f9      	bne.n	8003410 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800341c:	f7fe febe 	bl	800219c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003422:	e028      	b.n	8003476 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f88f 	bl	800254c <LL_ADC_IsEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f873 	bl	8002524 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800343e:	f7fe fead 	bl	800219c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d914      	bls.n	8003476 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d00d      	beq.n	8003476 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e007      	b.n	8003486 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d1cf      	bne.n	8003424 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	8000003f 	.word	0x8000003f
 8003494:	42028300 	.word	0x42028300
 8003498:	20000000 	.word	0x20000000
 800349c:	053e2d63 	.word	0x053e2d63

080034a0 <LL_ADC_IsEnabled>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <LL_ADC_IsEnabled+0x18>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <LL_ADC_IsEnabled+0x1a>
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d101      	bne.n	80034de <LL_ADC_REG_IsConversionOngoing+0x18>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b0a1      	sub	sp, #132	@ 0x84
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003506:	2302      	movs	r3, #2
 8003508:	e089      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003512:	2300      	movs	r3, #0
 8003514:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003516:	2300      	movs	r3, #0
 8003518:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a42      	ldr	r2, [pc, #264]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d102      	bne.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003524:	4b41      	ldr	r3, [pc, #260]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e001      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e068      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ffb9 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 8003554:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ffb3 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d14a      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003568:	2b00      	cmp	r3, #0
 800356a:	d147      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800356c:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800356e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d027      	beq.n	80035c8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003578:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800358a:	035b      	lsls	r3, r3, #13
 800358c:	430b      	orrs	r3, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003592:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003594:	4824      	ldr	r0, [pc, #144]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003596:	f7ff ff83 	bl	80034a0 <LL_ADC_IsEnabled>
 800359a:	4604      	mov	r4, r0
 800359c:	4823      	ldr	r0, [pc, #140]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800359e:	f7ff ff7f 	bl	80034a0 <LL_ADC_IsEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4323      	orrs	r3, r4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d132      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035b2:	f023 030f 	bic.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	6811      	ldr	r1, [r2, #0]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	430a      	orrs	r2, r1
 80035c0:	431a      	orrs	r2, r3
 80035c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c6:	e023      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d4:	4814      	ldr	r0, [pc, #80]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80035d6:	f7ff ff63 	bl	80034a0 <LL_ADC_IsEnabled>
 80035da:	4604      	mov	r4, r0
 80035dc:	4813      	ldr	r0, [pc, #76]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035de:	f7ff ff5f 	bl	80034a0 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d112      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035fa:	e009      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800361e:	4618      	mov	r0, r3
 8003620:	3784      	adds	r7, #132	@ 0x84
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	42028000 	.word	0x42028000
 800362c:	42028100 	.word	0x42028100
 8003630:	42028300 	.word	0x42028300

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	@ (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	@ (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0152      	lsls	r2, r2, #5
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	@ (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0152      	lsls	r2, r2, #5
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	@ 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b03      	cmp	r3, #3
 8003744:	bf28      	it	cs
 8003746:	2303      	movcs	r3, #3
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3303      	adds	r3, #3
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b04      	subs	r3, #4
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a0:	d301      	bcc.n	80037a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <SysTick_Config+0x40>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ae:	2107      	movs	r1, #7
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f7ff ff8e 	bl	80036d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <SysTick_Config+0x40>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <SysTick_Config+0x40>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff29 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff40 	bl	800367c <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff90 	bl	8003728 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5f 	bl	80036d4 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff33 	bl	8003698 <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa4 	bl	8003790 <SysTick_Config>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e014      	b.n	800388e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	791b      	ldrb	r3, [r3, #4]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd febb 	bl	80015f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e046      	b.n	8003938 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	795b      	ldrb	r3, [r3, #5]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_DAC_Start+0x20>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e040      	b.n	8003938 <HAL_DAC_Start+0xa2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2201      	movs	r2, #1
 80038d0:	409a      	lsls	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d11d      	bne.n	800392a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e014      	b.n	800392a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2102      	movs	r1, #2
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	429a      	cmp	r2, r3
 8003918:	d107      	bne.n	800392a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0202 	orr.w	r2, r2, #2
 8003928:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e015      	b.n	800398c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3308      	adds	r3, #8
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e004      	b.n	8003982 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	3314      	adds	r3, #20
 8003980:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	461a      	mov	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t pclk1freq;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_DAC_ConfigChannel+0x1e>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e137      	b.n	8003c2a <HAL_DAC_ConfigChannel+0x292>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	795b      	ldrb	r3, [r3, #5]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_DAC_ConfigChannel+0x2e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e131      	b.n	8003c2a <HAL_DAC_ConfigChannel+0x292>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d17a      	bne.n	8003ad0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80039da:	f7fe fbdf 	bl	800219c <HAL_GetTick>
 80039de:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13d      	bne.n	8003a62 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039e6:	e018      	b.n	8003a1a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039e8:	f7fe fbd8 	bl	800219c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d911      	bls.n	8003a1a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f043 0208 	orr.w	r2, r3, #8
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2203      	movs	r2, #3
 8003a14:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e107      	b.n	8003c2a <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1df      	bne.n	80039e8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	69d2      	ldr	r2, [r2, #28]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a32:	e020      	b.n	8003a76 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a34:	f7fe fbb2 	bl	800219c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d90f      	bls.n	8003a62 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da0a      	bge.n	8003a62 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f043 0208 	orr.w	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0e3      	b.n	8003c2a <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	dbe3      	blt.n	8003a34 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	69d2      	ldr	r2, [r2, #28]
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	ea02 0103 	and.w	r1, r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	21ff      	movs	r1, #255	@ 0xff
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	ea02 0103 	and.w	r1, r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d11d      	bne.n	8003b14 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	221f      	movs	r2, #31
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af0:	4013      	ands	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2207      	movs	r2, #7
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b50:	4313      	orrs	r3, r2
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	400a      	ands	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	4013      	ands	r3, r2
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	4313      	orrs	r3, r2
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb8:	d104      	bne.n	8003bc4 <HAL_DAC_ConfigChannel+0x22c>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	e018      	b.n	8003bf6 <HAL_DAC_ConfigChannel+0x25e>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_DAC_ConfigChannel+0x23e>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd4:	e00f      	b.n	8003bf6 <HAL_DAC_ConfigChannel+0x25e>
    }
    else /* Automatic selection */
    {
      pclk1freq  = HAL_RCC_GetPCLK1Freq();
 8003bd6:	f001 f9ed 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8003bda:	6178      	str	r0, [r7, #20]
      if (pclk1freq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4a15      	ldr	r2, [pc, #84]	@ (8003c34 <HAL_DAC_ConfigChannel+0x29c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d904      	bls.n	8003bee <HAL_DAC_ConfigChannel+0x256>
      {
        /* High frequency enable when PCLK frequency higher than 80   */
        tmpreg1 |= DAC_CR_HFSEL;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	e003      	b.n	8003bf6 <HAL_DAC_ConfigChannel+0x25e>
      }
      else
      {
        /* High frequency disable when PCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	22c0      	movs	r2, #192	@ 0xc0
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003c26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3728      	adds	r7, #40	@ 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	04c4b400 	.word	0x04c4b400

08003c38 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	460b      	mov	r3, r1
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d011      	beq.n	8003c74 <HAL_EXTI_RegisterCallback+0x3c>
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	dc13      	bgt.n	8003c7c <HAL_EXTI_RegisterCallback+0x44>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_EXTI_RegisterCallback+0x26>
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d007      	beq.n	8003c6c <HAL_EXTI_RegisterCallback+0x34>
 8003c5c:	e00e      	b.n	8003c7c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]
      break;
 8003c6a:	e00a      	b.n	8003c82 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]
      break;
 8003c72:	e006      	b.n	8003c82 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c80:	bf00      	nop
  }

  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e003      	b.n	8003cac <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <HAL_EXTI_IRQHandler+0x88>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <HAL_EXTI_IRQHandler+0x8c>)
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4798      	blx	r3
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	4002f40c 	.word	0x4002f40c
 8003d44:	4002f410 	.word	0x4002f410

08003d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d56:	e158      	b.n	800400a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 814a 	beq.w	8004004 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d005      	beq.n	8003d88 <HAL_GPIO_Init+0x40>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d130      	bne.n	8003dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0201 	and.w	r2, r3, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d017      	beq.n	8003e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d123      	bne.n	8003e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a4 	beq.w	8004004 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_GPIO_Init+0x2e4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d025      	beq.n	8003f34 <HAL_GPIO_Init+0x1ec>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a51      	ldr	r2, [pc, #324]	@ (8004030 <HAL_GPIO_Init+0x2e8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01f      	beq.n	8003f30 <HAL_GPIO_Init+0x1e8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	@ (8004034 <HAL_GPIO_Init+0x2ec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d019      	beq.n	8003f2c <HAL_GPIO_Init+0x1e4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a4f      	ldr	r2, [pc, #316]	@ (8004038 <HAL_GPIO_Init+0x2f0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_GPIO_Init+0x1e0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_GPIO_Init+0x2f4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00d      	beq.n	8003f24 <HAL_GPIO_Init+0x1dc>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_GPIO_Init+0x2f8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d007      	beq.n	8003f20 <HAL_GPIO_Init+0x1d8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a4c      	ldr	r2, [pc, #304]	@ (8004044 <HAL_GPIO_Init+0x2fc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_GPIO_Init+0x1d4>
 8003f18:	2306      	movs	r3, #6
 8003f1a:	e00c      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f1c:	2307      	movs	r3, #7
 8003f1e:	e00a      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f20:	2305      	movs	r3, #5
 8003f22:	e008      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e006      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e004      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_GPIO_Init+0x1ee>
 8003f34:	2300      	movs	r3, #0
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	00d2      	lsls	r2, r2, #3
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003f46:	4938      	ldr	r1, [pc, #224]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3318      	adds	r3, #24
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f54:	4b34      	ldr	r3, [pc, #208]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f78:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <HAL_GPIO_Init+0x2e0>)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f ae9f 	bne.w	8003d58 <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	4002f400 	.word	0x4002f400
 800402c:	42020000 	.word	0x42020000
 8004030:	42020400 	.word	0x42020400
 8004034:	42020800 	.word	0x42020800
 8004038:	42020c00 	.word	0x42020c00
 800403c:	42021000 	.word	0x42021000
 8004040:	42021400 	.word	0x42021400
 8004044:	42021800 	.word	0x42021800

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004064:	e002      	b.n	800406c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e007      	b.n	80040a6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004096:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 0204 	bic.w	r2, r3, #4
 800409e:	4905      	ldr	r1, [pc, #20]	@ (80040b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40030400 	.word	0x40030400

080040b8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_ICACHE_Enable+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_ICACHE_Enable+0x1c>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40030400 	.word	0x40030400

080040d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040dc:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004104:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004106:	f000 f871 	bl	80041ec <HAL_PWREx_SMPS_GetEffectiveMode>
 800410a:	4603      	mov	r3, r0
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004110:	d101      	bne.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e03e      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004116:	4b21      	ldr	r3, [pc, #132]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004122:	d101      	bne.n	8004128 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e035      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d101      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e02f      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800413c:	4917      	ldr	r1, [pc, #92]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004144:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	09db      	lsrs	r3, r3, #7
 8004152:	2232      	movs	r2, #50	@ 0x32
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	08db      	lsrs	r3, r3, #3
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004164:	e002      	b.n	800416c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b01      	subs	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d102      	bne.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f2      	bne.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004180:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d101      	bne.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e000      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40007000 	.word	0x40007000
 80041a0:	20000000 	.word	0x20000000
 80041a4:	0a7c5ac5 	.word	0x0a7c5ac5
 80041a8:	cccccccd 	.word	0xcccccccd

080041ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80041b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ba:	6053      	str	r3, [r2, #4]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041da:	6093      	str	r3, [r2, #8]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40007000 	.word	0x40007000

080041ec <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80041f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	e00a      	b.n	8004220 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	e001      	b.n	8004220 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800421c:	2300      	movs	r3, #0
 800421e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004220:	687b      	ldr	r3, [r7, #4]
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f000 bcc2 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004248:	4b99      	ldr	r3, [pc, #612]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004252:	4b97      	ldr	r3, [pc, #604]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80e9 	beq.w	800443c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	f040 8083 	bne.w	800437e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d17f      	bne.n	800437e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800427e:	4b8c      	ldr	r3, [pc, #560]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_RCC_OscConfig+0x64>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f000 bc9a 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800429c:	4b84      	ldr	r3, [pc, #528]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCC_OscConfig+0x7e>
 80042a8:	4b81      	ldr	r3, [pc, #516]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b0:	e005      	b.n	80042be <HAL_RCC_OscConfig+0x8a>
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042be:	4293      	cmp	r3, r2
 80042c0:	d224      	bcs.n	800430c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fe9c 	bl	8005004 <RCC_SetFlashLatencyFromMSIRange>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f000 bc7a 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d8:	4b75      	ldr	r3, [pc, #468]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a74      	ldr	r2, [pc, #464]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f043 0308 	orr.w	r3, r3, #8
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b72      	ldr	r3, [pc, #456]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	496f      	ldr	r1, [pc, #444]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f6:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	496a      	ldr	r1, [pc, #424]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
 800430a:	e026      	b.n	800435a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800430c:	4b68      	ldr	r3, [pc, #416]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a67      	ldr	r2, [pc, #412]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	4962      	ldr	r1, [pc, #392]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432a:	4b61      	ldr	r3, [pc, #388]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	495d      	ldr	r1, [pc, #372]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe5b 	bl	8005004 <RCC_SetFlashLatencyFromMSIRange>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f000 bc39 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800435a:	f000 fe17 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 800435e:	4603      	mov	r3, r0
 8004360:	4a54      	ldr	r2, [pc, #336]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004362:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004364:	4b54      	ldr	r3, [pc, #336]	@ (80044b8 <HAL_RCC_OscConfig+0x284>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd fec7 	bl	80020fc <HAL_InitTick>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d060      	beq.n	800443a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	f000 bc27 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d039      	beq.n	80043fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004386:	4b4a      	ldr	r3, [pc, #296]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a49      	ldr	r2, [pc, #292]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004392:	f7fd ff03 	bl	800219c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004398:	e00f      	b.n	80043ba <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439a:	f7fd feff 	bl	800219c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d908      	bls.n	80043ba <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043a8:	4b41      	ldr	r3, [pc, #260]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	f000 bc09 	b.w	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ba:	4b3d      	ldr	r3, [pc, #244]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0e9      	beq.n	800439a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c6:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a39      	ldr	r2, [pc, #228]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f043 0308 	orr.w	r3, r3, #8
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b37      	ldr	r3, [pc, #220]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4934      	ldr	r1, [pc, #208]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e4:	4b32      	ldr	r3, [pc, #200]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	492f      	ldr	r1, [pc, #188]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
 80043f8:	e020      	b.n	800443c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043fa:	4b2d      	ldr	r3, [pc, #180]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2c      	ldr	r2, [pc, #176]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004406:	f7fd fec9 	bl	800219c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800440e:	f7fd fec5 	bl	800219c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800441c:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e3cf      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442c:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x1da>
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800443a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d07e      	beq.n	8004546 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b08      	cmp	r3, #8
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x226>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d10e      	bne.n	8004472 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d10b      	bne.n	8004472 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d06e      	beq.n	8004544 <HAL_RCC_OscConfig+0x310>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d16a      	bne.n	8004544 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e3ac      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x256>
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0b      	ldr	r2, [pc, #44]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e024      	b.n	80044d4 <HAL_RCC_OscConfig+0x2a0>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004492:	d113      	bne.n	80044bc <HAL_RCC_OscConfig+0x288>
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800449a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a02      	ldr	r2, [pc, #8]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e012      	b.n	80044d4 <HAL_RCC_OscConfig+0x2a0>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	20000000 	.word	0x20000000
 80044b8:	2000002c 	.word	0x2000002c
 80044bc:	4b8b      	ldr	r3, [pc, #556]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a8a      	ldr	r2, [pc, #552]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b88      	ldr	r3, [pc, #544]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a87      	ldr	r2, [pc, #540]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d019      	beq.n	8004510 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fe5e 	bl	800219c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	e00e      	b.n	8004502 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd fe5a 	bl	800219c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	@ 0x64
 80044f0:	d907      	bls.n	8004502 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f2:	4b7e      	ldr	r3, [pc, #504]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e364      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004502:	4b7a      	ldr	r3, [pc, #488]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ea      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2b0>
 800450e:	e01a      	b.n	8004546 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fe44 	bl	800219c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004516:	e00e      	b.n	8004536 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fd fe40 	bl	800219c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d907      	bls.n	8004536 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	4b71      	ldr	r3, [pc, #452]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e34a      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4b6d      	ldr	r3, [pc, #436]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ea      	bne.n	8004518 <HAL_RCC_OscConfig+0x2e4>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d06c      	beq.n	800462c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x330>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b61      	ldr	r3, [pc, #388]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x348>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e327      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b5b      	ldr	r3, [pc, #364]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4958      	ldr	r1, [pc, #352]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e04c      	b.n	800462c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d029      	beq.n	80045ee <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b54      	ldr	r3, [pc, #336]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a53      	ldr	r2, [pc, #332]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fdf9 	bl	800219c <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e00e      	b.n	80045cc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd fdf5 	bl	800219c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d907      	bls.n	80045cc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045bc:	4b4b      	ldr	r3, [pc, #300]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e2ff      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045cc:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ea      	beq.n	80045ae <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b44      	ldr	r3, [pc, #272]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	4941      	ldr	r1, [pc, #260]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	e01e      	b.n	800462c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd fdcf 	bl	800219c <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004600:	e00e      	b.n	8004620 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004602:	f7fd fdcb 	bl	800219c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d907      	bls.n	8004620 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004610:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e2d5      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004620:	4b32      	ldr	r3, [pc, #200]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ea      	bne.n	8004602 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d062      	beq.n	80046fe <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d038      	beq.n	80046b2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d108      	bne.n	800465a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004648:	4b28      	ldr	r3, [pc, #160]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800464e:	4a27      	ldr	r2, [pc, #156]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004658:	e007      	b.n	800466a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800465a:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004660:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466a:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800466c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004670:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467a:	f7fd fd8f 	bl	800219c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004680:	e00f      	b.n	80046a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004682:	f7fd fd8b 	bl	800219c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b07      	cmp	r3, #7
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004690:	4b16      	ldr	r3, [pc, #88]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e294      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0e8      	beq.n	8004682 <HAL_RCC_OscConfig+0x44e>
 80046b0:	e025      	b.n	80046fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b8:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fd fd6b 	bl	800219c <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c8:	e012      	b.n	80046f0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fd fd67 	bl	800219c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b07      	cmp	r3, #7
 80046d6:	d90b      	bls.n	80046f0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d8:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d004      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e270      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	4ba8      	ldr	r3, [pc, #672]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 812d 	beq.w	8004966 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470c:	2300      	movs	r3, #0
 800470e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004710:	4ba0      	ldr	r3, [pc, #640]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	4b9d      	ldr	r3, [pc, #628]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	4a9c      	ldr	r2, [pc, #624]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004726:	6593      	str	r3, [r2, #88]	@ 0x58
 8004728:	4b9a      	ldr	r3, [pc, #616]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004734:	2301      	movs	r3, #1
 8004736:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004738:	4b97      	ldr	r3, [pc, #604]	@ (8004998 <HAL_RCC_OscConfig+0x764>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11e      	bne.n	8004782 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004744:	4b94      	ldr	r3, [pc, #592]	@ (8004998 <HAL_RCC_OscConfig+0x764>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a93      	ldr	r2, [pc, #588]	@ (8004998 <HAL_RCC_OscConfig+0x764>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004750:	f7fd fd24 	bl	800219c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004756:	e00e      	b.n	8004776 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004758:	f7fd fd20 	bl	800219c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d907      	bls.n	8004776 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004766:	4b8c      	ldr	r3, [pc, #560]	@ (8004998 <HAL_RCC_OscConfig+0x764>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e22a      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004776:	4b88      	ldr	r3, [pc, #544]	@ (8004998 <HAL_RCC_OscConfig+0x764>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ea      	beq.n	8004758 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01f      	beq.n	80047ce <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800479a:	4b7e      	ldr	r3, [pc, #504]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b0:	4a78      	ldr	r2, [pc, #480]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ba:	e018      	b.n	80047ee <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047bc:	4b75      	ldr	r3, [pc, #468]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	4a74      	ldr	r2, [pc, #464]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047cc:	e00f      	b.n	80047ee <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047ce:	4b71      	ldr	r3, [pc, #452]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	4a6f      	ldr	r2, [pc, #444]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047de:	4b6d      	ldr	r3, [pc, #436]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d068      	beq.n	80048c8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd fcd1 	bl	800219c <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fc:	e011      	b.n	8004822 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd fccd 	bl	800219c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d908      	bls.n	8004822 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004810:	4b60      	ldr	r3, [pc, #384]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1d4      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	4b5c      	ldr	r3, [pc, #368]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0e6      	beq.n	80047fe <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d022      	beq.n	8004882 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800483c:	4b55      	ldr	r3, [pc, #340]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a54      	ldr	r2, [pc, #336]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800484c:	e011      	b.n	8004872 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fd fca5 	bl	800219c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d908      	bls.n	8004872 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004860:	4b4c      	ldr	r3, [pc, #304]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1ac      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004872:	4b48      	ldr	r3, [pc, #288]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0e6      	beq.n	800484e <HAL_RCC_OscConfig+0x61a>
 8004880:	e068      	b.n	8004954 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004882:	4b44      	ldr	r3, [pc, #272]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800488a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004892:	e011      	b.n	80048b8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fd fc82 	bl	800219c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d908      	bls.n	80048b8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e189      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e6      	bne.n	8004894 <HAL_RCC_OscConfig+0x660>
 80048c6:	e045      	b.n	8004954 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fc68 	bl	800219c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ce:	e011      	b.n	80048f4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fd fc64 	bl	800219c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d908      	bls.n	80048f4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e16b      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	4b27      	ldr	r3, [pc, #156]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e6      	bne.n	80048d0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004910:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800491c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004920:	e011      	b.n	8004946 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd fc3b 	bl	800219c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d908      	bls.n	8004946 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004934:	4b17      	ldr	r3, [pc, #92]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e142      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e6      	bne.n	8004922 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b0e      	ldr	r3, [pc, #56]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	4a0d      	ldr	r2, [pc, #52]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04f      	beq.n	8004a12 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 800497c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_RCC_OscConfig+0x760>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fc07 	bl	800219c <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x788>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800499c:	f7fd fbfe 	bl	800219c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d908      	bls.n	80049bc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049aa:	4b8a      	ldr	r3, [pc, #552]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 80049ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e107      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049bc:	4b85      	ldr	r3, [pc, #532]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 80049be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0e8      	beq.n	800499c <HAL_RCC_OscConfig+0x768>
 80049ca:	e022      	b.n	8004a12 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049cc:	4b81      	ldr	r3, [pc, #516]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 80049ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049d2:	4a80      	ldr	r2, [pc, #512]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fbde 	bl	800219c <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049e2:	e00f      	b.n	8004a04 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e4:	f7fd fbda 	bl	800219c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d908      	bls.n	8004a04 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f2:	4b78      	ldr	r3, [pc, #480]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 80049f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0e3      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a04:	4b73      	ldr	r3, [pc, #460]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e8      	bne.n	80049e4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80d7 	beq.w	8004bca <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	f000 8091 	beq.w	8004b4c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d166      	bne.n	8004b00 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b68      	ldr	r3, [pc, #416]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a67      	ldr	r2, [pc, #412]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fbad 	bl	800219c <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a44:	e00e      	b.n	8004a64 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fd fba9 	bl	800219c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d907      	bls.n	8004a64 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a54:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0b3      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ea      	bne.n	8004a46 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a70:	4b58      	ldr	r3, [pc, #352]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	4b58      	ldr	r3, [pc, #352]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a4>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	4311      	orrs	r1, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a8a:	0212      	lsls	r2, r2, #8
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a92:	0852      	lsrs	r2, r2, #1
 8004a94:	3a01      	subs	r2, #1
 8004a96:	0552      	lsls	r2, r2, #21
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0652      	lsls	r2, r2, #25
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004aaa:	06d2      	lsls	r2, r2, #27
 8004aac:	430a      	orrs	r2, r1
 8004aae:	4949      	ldr	r1, [pc, #292]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab4:	4b47      	ldr	r3, [pc, #284]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a46      	ldr	r2, [pc, #280]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac0:	4b44      	ldr	r3, [pc, #272]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a43      	ldr	r2, [pc, #268]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fb66 	bl	800219c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	e00e      	b.n	8004af2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fd fb62 	bl	800219c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d907      	bls.n	8004af2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e06c      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	4b38      	ldr	r3, [pc, #224]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ea      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x8a0>
 8004afe:	e064      	b.n	8004bca <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b34      	ldr	r3, [pc, #208]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a33      	ldr	r2, [pc, #204]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fd fb46 	bl	800219c <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b12:	e00e      	b.n	8004b32 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fd fb42 	bl	800219c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d907      	bls.n	8004b32 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e04c      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b32:	4b28      	ldr	r3, [pc, #160]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ea      	bne.n	8004b14 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b3e:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	4924      	ldr	r1, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <HAL_RCC_OscConfig+0x9a8>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	60cb      	str	r3, [r1, #12]
 8004b4a:	e03e      	b.n	8004bca <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e039      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <HAL_RCC_OscConfig+0x9a0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d12c      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d123      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d11b      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d113      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	019f800c 	.word	0x019f800c
 8004bdc:	feeefffc 	.word	0xfeeefffc

08004be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e11c      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b90      	ldr	r3, [pc, #576]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d910      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b8d      	ldr	r3, [pc, #564]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 020f 	bic.w	r2, r3, #15
 8004c0e:	498b      	ldr	r1, [pc, #556]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b89      	ldr	r3, [pc, #548]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e104      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	4b81      	ldr	r3, [pc, #516]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d908      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c44:	4b7e      	ldr	r3, [pc, #504]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	497b      	ldr	r1, [pc, #492]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8085 	beq.w	8004d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d11f      	bne.n	8004cac <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6c:	4b74      	ldr	r3, [pc, #464]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0da      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c7c:	f000 fa26 	bl	80050cc <RCC_GetSysClockFreqFromPLLSource>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <HAL_RCC_ClockConfig+0x264>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d947      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d141      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c96:	4b6a      	ldr	r3, [pc, #424]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c9e:	4a68      	ldr	r2, [pc, #416]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e036      	b.n	8004d1a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb4:	4b62      	ldr	r3, [pc, #392]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d115      	bne.n	8004cec <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0b6      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0aa      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cdc:	4b58      	ldr	r3, [pc, #352]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0a2      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cec:	f000 f8b0 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4a53      	ldr	r2, [pc, #332]	@ (8004e44 <HAL_RCC_ClockConfig+0x264>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d90f      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004cfa:	4b51      	ldr	r3, [pc, #324]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d06:	4b4e      	ldr	r3, [pc, #312]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1a:	4b49      	ldr	r3, [pc, #292]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f023 0203 	bic.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4946      	ldr	r1, [pc, #280]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2c:	f7fd fa36 	bl	800219c <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	e013      	b.n	8004d5c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d34:	f7fd fa32 	bl	800219c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d90a      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 020c 	and.w	r2, r3, #12
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e06a      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5c:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 020c 	and.w	r2, r3, #12
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d1e2      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b80      	cmp	r3, #128	@ 0x80
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d74:	4b32      	ldr	r3, [pc, #200]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d7e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	4b2b      	ldr	r3, [pc, #172]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d208      	bcs.n	8004dae <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d9c:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4925      	ldr	r1, [pc, #148]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dae:	4b23      	ldr	r3, [pc, #140]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d210      	bcs.n	8004dde <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 020f 	bic.w	r2, r3, #15
 8004dc4:	491d      	ldr	r1, [pc, #116]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e029      	b.n	8004e32 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dea:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4912      	ldr	r1, [pc, #72]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e08:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	490a      	ldr	r1, [pc, #40]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e1c:	f000 f8b6 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a09      	ldr	r2, [pc, #36]	@ (8004e48 <HAL_RCC_ClockConfig+0x268>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_ClockConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fd f966 	bl	80020fc <HAL_InitTick>
 8004e30:	4603      	mov	r3, r0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40021000 	.word	0x40021000
 8004e44:	04c4b400 	.word	0x04c4b400
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	2000002c 	.word	0x2000002c

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	@ 0x24
 8004e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5e:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e68:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d121      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d11e      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e84:	4b3d      	ldr	r3, [pc, #244]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e90:	4b3a      	ldr	r3, [pc, #232]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e005      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ea0:	4b36      	ldr	r3, [pc, #216]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004eac:	4a34      	ldr	r2, [pc, #208]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x130>)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10d      	bne.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d102      	bne.n	8004ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x134>)
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d146      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ede:	4b27      	ldr	r3, [pc, #156]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee8:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d003      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0xb4>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d00d      	beq.n	8004f1e <HAL_RCC_GetSysClockFreq+0xce>
 8004f02:	e019      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f04:	4a1f      	ldr	r2, [pc, #124]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x134>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f0e:	68d2      	ldr	r2, [r2, #12]
 8004f10:	0a12      	lsrs	r2, r2, #8
 8004f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
        break;
 8004f1c:	e019      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	0a12      	lsrs	r2, r2, #8
 8004f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
        break;
 8004f36:	e00c      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	4a0e      	ldr	r2, [pc, #56]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f42:	68d2      	ldr	r2, [r2, #12]
 8004f44:	0a12      	lsrs	r2, r2, #8
 8004f46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	617b      	str	r3, [r7, #20]
        break;
 8004f50:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0e5b      	lsrs	r3, r3, #25
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	@ 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08008ce4 	.word	0x08008ce4
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004f90:	f7ff ff5e 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_GetHCLKFreq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	4903      	ldr	r1, [pc, #12]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	08008ccc 	.word	0x08008ccc

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff ffe8 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	08008cdc 	.word	0x08008cdc

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffd4 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0adb      	lsrs	r3, r3, #11
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	@ (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	08008cdc 	.word	0x08008cdc

08005004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005010:	4b2c      	ldr	r3, [pc, #176]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800501c:	f7ff f85c 	bl	80040d8 <HAL_PWREx_GetVoltageRange>
 8005020:	6138      	str	r0, [r7, #16]
 8005022:	e014      	b.n	800504e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005024:	4b27      	ldr	r3, [pc, #156]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005030:	4b24      	ldr	r3, [pc, #144]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800503c:	f7ff f84c 	bl	80040d8 <HAL_PWREx_GetVoltageRange>
 8005040:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005042:	4b20      	ldr	r3, [pc, #128]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005046:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505a:	d10b      	bne.n	8005074 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b80      	cmp	r3, #128	@ 0x80
 8005060:	d919      	bls.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2ba0      	cmp	r3, #160	@ 0xa0
 8005066:	d902      	bls.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005068:	2302      	movs	r3, #2
 800506a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800506c:	e013      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800506e:	2301      	movs	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005072:	e010      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b80      	cmp	r3, #128	@ 0x80
 8005078:	d902      	bls.n	8005080 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800507a:	2303      	movs	r3, #3
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e00a      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b80      	cmp	r3, #128	@ 0x80
 8005084:	d102      	bne.n	800508c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005086:	2302      	movs	r3, #2
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e004      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b70      	cmp	r3, #112	@ 0x70
 8005090:	d101      	bne.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005092:	2301      	movs	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005096:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 020f 	bic.w	r2, r3, #15
 800509e:	490a      	ldr	r1, [pc, #40]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40022000 	.word	0x40022000

080050cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050d2:	4b31      	ldr	r3, [pc, #196]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	3301      	adds	r3, #1
 80050e8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d015      	beq.n	800511c <RCC_GetSysClockFreqFromPLLSource+0x50>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d839      	bhi.n	800516a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d01c      	beq.n	8005136 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d133      	bne.n	800516a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005102:	4a26      	ldr	r2, [pc, #152]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	4a23      	ldr	r2, [pc, #140]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800510c:	68d2      	ldr	r2, [r2, #12]
 800510e:	0a12      	lsrs	r2, r2, #8
 8005110:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
      break;
 800511a:	e029      	b.n	8005170 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800511c:	4a20      	ldr	r2, [pc, #128]	@ (80051a0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005126:	68d2      	ldr	r2, [r2, #12]
 8005128:	0a12      	lsrs	r2, r2, #8
 800512a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	613b      	str	r3, [r7, #16]
      break;
 8005134:	e01c      	b.n	8005170 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005136:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005142:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e005      	b.n	800515e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005152:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800515e:	4a11      	ldr	r2, [pc, #68]	@ (80051a4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005166:	613b      	str	r3, [r7, #16]
        break;
 8005168:	e002      	b.n	8005170 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
      break;
 800516e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005170:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	0e5b      	lsrs	r3, r3, #25
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	3301      	adds	r3, #1
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800518a:	683b      	ldr	r3, [r7, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40021000 	.word	0x40021000
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	007a1200 	.word	0x007a1200
 80051a4:	08008ce4 	.word	0x08008ce4

080051a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051b0:	2300      	movs	r3, #0
 80051b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051b4:	2300      	movs	r3, #0
 80051b6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d040      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c8:	2b80      	cmp	r3, #128	@ 0x80
 80051ca:	d02a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051cc:	2b80      	cmp	r3, #128	@ 0x80
 80051ce:	d825      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051d0:	2b60      	cmp	r3, #96	@ 0x60
 80051d2:	d026      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051d4:	2b60      	cmp	r3, #96	@ 0x60
 80051d6:	d821      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d006      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80051dc:	2b40      	cmp	r3, #64	@ 0x40
 80051de:	d81d      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d010      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80051e8:	e018      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4a8e      	ldr	r2, [pc, #568]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051f6:	e015      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fb56 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005208:	e00c      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3320      	adds	r3, #32
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fc33 	bl	8005a7c <RCCEx_PLLSAI2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800521a:	e003      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
        break;
 8005220:	e000      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005224:	7ffb      	ldrb	r3, [r7, #31]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522a:	4b7f      	ldr	r3, [pc, #508]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005230:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005238:	497b      	ldr	r1, [pc, #492]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005240:	e001      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d047      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d030      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005260:	d82a      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005266:	d02a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800526c:	d824      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800526e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005272:	d008      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005278:	d81e      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800527e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005282:	d010      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005284:	e018      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005286:	4b68      	ldr	r3, [pc, #416]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4a67      	ldr	r2, [pc, #412]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005290:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005292:	e015      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fb08 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052a4:	e00c      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3320      	adds	r3, #32
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fbe5 	bl	8005a7c <RCCEx_PLLSAI2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052b6:	e003      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
        break;
 80052bc:	e000      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80052be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052c6:	4b58      	ldr	r3, [pc, #352]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4954      	ldr	r1, [pc, #336]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80052dc:	e001      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80ab 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10d      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005300:	4b49      	ldr	r3, [pc, #292]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005304:	4a48      	ldr	r2, [pc, #288]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6593      	str	r3, [r2, #88]	@ 0x58
 800530c:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800531c:	4b43      	ldr	r3, [pc, #268]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a42      	ldr	r2, [pc, #264]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005326:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005328:	f7fc ff38 	bl	800219c <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800532e:	e00f      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005330:	f7fc ff34 	bl	800219c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d908      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800533e:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800534e:	e006      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005350:	4b36      	ldr	r3, [pc, #216]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0e9      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800535e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d164      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005366:	4b30      	ldr	r3, [pc, #192]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005370:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	429a      	cmp	r2, r3
 8005382:	d019      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005384:	4b28      	ldr	r3, [pc, #160]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005390:	4b25      	ldr	r3, [pc, #148]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	4a24      	ldr	r2, [pc, #144]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a0:	4b21      	ldr	r3, [pc, #132]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	4a20      	ldr	r2, [pc, #128]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01f      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fc feeb 	bl	800219c <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c8:	e012      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc fee7 	bl	800219c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d909      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053dc:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80053ee:	e007      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0e5      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x222>
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005400:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005402:	7ffb      	ldrb	r3, [r7, #31]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10c      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	4903      	ldr	r1, [pc, #12]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005420:	e008      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	77bb      	strb	r3, [r7, #30]
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005428:	40021000 	.word	0x40021000
 800542c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7ffb      	ldrb	r3, [r7, #31]
 8005432:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543a:	4b9c      	ldr	r3, [pc, #624]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	4a9b      	ldr	r2, [pc, #620]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005452:	4b96      	ldr	r3, [pc, #600]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	f023 0203 	bic.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005460:	4992      	ldr	r1, [pc, #584]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005474:	4b8d      	ldr	r3, [pc, #564]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 020c 	bic.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	498a      	ldr	r1, [pc, #552]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005496:	4b85      	ldr	r3, [pc, #532]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	4981      	ldr	r1, [pc, #516]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054b8:	4b7c      	ldr	r3, [pc, #496]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	4979      	ldr	r1, [pc, #484]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054da:	4b74      	ldr	r3, [pc, #464]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e8:	4970      	ldr	r1, [pc, #448]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fc:	4b6b      	ldr	r3, [pc, #428]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550a:	4968      	ldr	r1, [pc, #416]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800551e:	4b63      	ldr	r3, [pc, #396]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	495f      	ldr	r1, [pc, #380]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005540:	4b5a      	ldr	r3, [pc, #360]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554e:	4957      	ldr	r1, [pc, #348]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005562:	4b52      	ldr	r3, [pc, #328]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005570:	494e      	ldr	r1, [pc, #312]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d031      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800558c:	d00e      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x404>
 800558e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005592:	d814      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800559c:	d10f      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559e:	4b43      	ldr	r3, [pc, #268]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	4a42      	ldr	r2, [pc, #264]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055a8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055aa:	e00c      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f97c 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055bc:	e003      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	77fb      	strb	r3, [r7, #31]
        break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	7ffb      	ldrb	r3, [r7, #31]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055cc:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055da:	4934      	ldr	r1, [pc, #208]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055e2:	e001      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f4:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005602:	492a      	ldr	r1, [pc, #168]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005616:	4b25      	ldr	r3, [pc, #148]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	4921      	ldr	r1, [pc, #132]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005638:	4b1c      	ldr	r3, [pc, #112]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005646:	4919      	ldr	r1, [pc, #100]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800565a:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005660:	f023 0203 	bic.w	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	4910      	ldr	r1, [pc, #64]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02b      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567c:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568a:	4908      	ldr	r1, [pc, #32]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800569a:	d109      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569c:	4b03      	ldr	r3, [pc, #12]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a02      	ldr	r2, [pc, #8]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a6:	60d3      	str	r3, [r2, #12]
 80056a8:	e014      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	2101      	movs	r1, #1
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 f8f5 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d04a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e8:	d108      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x554>
 80056ea:	4b70      	ldr	r3, [pc, #448]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056f0:	4a6e      	ldr	r2, [pc, #440]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80056fa:	e012      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80056fc:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800570a:	4968      	ldr	r1, [pc, #416]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005712:	4b66      	ldr	r3, [pc, #408]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005718:	4a64      	ldr	r2, [pc, #400]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800571a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800571e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572a:	d10d      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f8bc 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800573c:	7ffb      	ldrb	r3, [r7, #31]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d019      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005742:	7ffb      	ldrb	r3, [r7, #31]
 8005744:	77bb      	strb	r3, [r7, #30]
 8005746:	e016      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800574c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005750:	d106      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005752:	4b56      	ldr	r3, [pc, #344]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	4a55      	ldr	r2, [pc, #340]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800575c:	60d3      	str	r3, [r2, #12]
 800575e:	e00a      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800576a:	4b50      	ldr	r3, [pc, #320]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4a4f      	ldr	r2, [pc, #316]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005774:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d028      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005782:	4b4a      	ldr	r3, [pc, #296]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005790:	4946      	ldr	r1, [pc, #280]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800579c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a0:	d106      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a2:	4b42      	ldr	r3, [pc, #264]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4a41      	ldr	r2, [pc, #260]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ac:	60d3      	str	r3, [r2, #12]
 80057ae:	e011      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 f875 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e0:	4b32      	ldr	r3, [pc, #200]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f0:	492e      	ldr	r1, [pc, #184]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005802:	d10c      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f850 	bl	80058b0 <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005814:	7ffb      	ldrb	r3, [r7, #31]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800581a:	7ffb      	ldrb	r3, [r7, #31]
 800581c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800582a:	4b20      	ldr	r3, [pc, #128]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800582c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005830:	f023 0204 	bic.w	r2, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583a:	491c      	ldr	r1, [pc, #112]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800584e:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005854:	f023 0218 	bic.w	r2, r3, #24
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585e:	4913      	ldr	r1, [pc, #76]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d017      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005872:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005878:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005882:	490a      	ldr	r1, [pc, #40]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005894:	d105      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800589c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80058a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000

080058b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d018      	beq.n	80058f8 <RCCEx_PLLSAI1_Config+0x48>
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d81f      	bhi.n	800590a <RCCEx_PLLSAI1_Config+0x5a>
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d002      	beq.n	80058d4 <RCCEx_PLLSAI1_Config+0x24>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d009      	beq.n	80058e6 <RCCEx_PLLSAI1_Config+0x36>
 80058d2:	e01a      	b.n	800590a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d4:	4b65      	ldr	r3, [pc, #404]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d117      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e014      	b.n	8005910 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058e6:	4b61      	ldr	r3, [pc, #388]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d110      	bne.n	8005914 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f6:	e00d      	b.n	8005914 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80058f8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005908:	e006      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
      break;
 800590e:	e004      	b.n	800591a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005918:	bf00      	nop
  }

  if (status == HAL_OK)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 809f 	bne.w	8005a60 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005922:	4b52      	ldr	r3, [pc, #328]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a51      	ldr	r2, [pc, #324]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005928:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800592c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592e:	f7fc fc35 	bl	800219c <HAL_GetTick>
 8005932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005934:	e00f      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005936:	f7fc fc31 	bl	800219c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d908      	bls.n	8005956 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005944:	4b49      	ldr	r3, [pc, #292]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005954:	e006      	b.n	8005964 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005956:	4b45      	ldr	r3, [pc, #276]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e9      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0x86>
 8005962:	e000      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005964:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d179      	bne.n	8005a60 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005972:	4b3e      	ldr	r3, [pc, #248]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	4b3e      	ldr	r3, [pc, #248]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6892      	ldr	r2, [r2, #8]
 800597e:	0211      	lsls	r1, r2, #8
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68d2      	ldr	r2, [r2, #12]
 8005984:	06d2      	lsls	r2, r2, #27
 8005986:	4311      	orrs	r1, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	3a01      	subs	r2, #1
 800598e:	0112      	lsls	r2, r2, #4
 8005990:	4311      	orrs	r1, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	4934      	ldr	r1, [pc, #208]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	610b      	str	r3, [r1, #16]
 800599e:	e033      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d118      	bne.n	80059d8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a6:	4b31      	ldr	r3, [pc, #196]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	4b32      	ldr	r3, [pc, #200]	@ (8005a74 <RCCEx_PLLSAI1_Config+0x1c4>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	0211      	lsls	r1, r2, #8
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6912      	ldr	r2, [r2, #16]
 80059b8:	0852      	lsrs	r2, r2, #1
 80059ba:	3a01      	subs	r2, #1
 80059bc:	0552      	lsls	r2, r2, #21
 80059be:	4311      	orrs	r1, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6852      	ldr	r2, [r2, #4]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	0112      	lsls	r2, r2, #4
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	4926      	ldr	r1, [pc, #152]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
 80059d6:	e017      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d8:	4b24      	ldr	r3, [pc, #144]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	4b26      	ldr	r3, [pc, #152]	@ (8005a78 <RCCEx_PLLSAI1_Config+0x1c8>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	0211      	lsls	r1, r2, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6952      	ldr	r2, [r2, #20]
 80059ea:	0852      	lsrs	r2, r2, #1
 80059ec:	3a01      	subs	r2, #1
 80059ee:	0652      	lsls	r2, r2, #25
 80059f0:	4311      	orrs	r1, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6852      	ldr	r2, [r2, #4]
 80059f6:	3a01      	subs	r2, #1
 80059f8:	0112      	lsls	r2, r2, #4
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	491a      	ldr	r1, [pc, #104]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a08:	4b18      	ldr	r3, [pc, #96]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fc fbc2 	bl	800219c <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a1a:	e00f      	b.n	8005a3c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a1c:	f7fc fbbe 	bl	800219c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d908      	bls.n	8005a3c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a2a:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005a3a:	e006      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0e9      	beq.n	8005a1c <RCCEx_PLLSAI1_Config+0x16c>
 8005a48:	e000      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005a4a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	4904      	ldr	r1, [pc, #16]	@ (8005a6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	07ff800c 	.word	0x07ff800c
 8005a74:	ff9f800c 	.word	0xff9f800c
 8005a78:	f9ff800c 	.word	0xf9ff800c

08005a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d018      	beq.n	8005ac4 <RCCEx_PLLSAI2_Config+0x48>
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d81f      	bhi.n	8005ad6 <RCCEx_PLLSAI2_Config+0x5a>
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d002      	beq.n	8005aa0 <RCCEx_PLLSAI2_Config+0x24>
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d009      	beq.n	8005ab2 <RCCEx_PLLSAI2_Config+0x36>
 8005a9e:	e01a      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d117      	bne.n	8005adc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab0:	e014      	b.n	8005adc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab2:	4b46      	ldr	r3, [pc, #280]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac2:	e00d      	b.n	8005ae0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005ac4:	4b41      	ldr	r3, [pc, #260]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad4:	e006      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ada:	e004      	b.n	8005ae6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005adc:	bf00      	nop
 8005ade:	e002      	b.n	8005ae6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ae0:	bf00      	nop
 8005ae2:	e000      	b.n	8005ae6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ae4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d169      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005aec:	4b37      	ldr	r3, [pc, #220]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a36      	ldr	r2, [pc, #216]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af8:	f7fc fb50 	bl	800219c <HAL_GetTick>
 8005afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005afe:	e00f      	b.n	8005b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b00:	f7fc fb4c 	bl	800219c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d908      	bls.n	8005b20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b1e:	e006      	b.n	8005b2e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b20:	4b2a      	ldr	r3, [pc, #168]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e9      	bne.n	8005b00 <RCCEx_PLLSAI2_Config+0x84>
 8005b2c:	e000      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005b2e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d144      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d115      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b3c:	4b23      	ldr	r3, [pc, #140]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x154>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	06d2      	lsls	r2, r2, #27
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6852      	ldr	r2, [r2, #4]
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	4311      	orrs	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	491a      	ldr	r1, [pc, #104]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b68:	4b18      	ldr	r3, [pc, #96]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fc fb12 	bl	800219c <HAL_GetTick>
 8005b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b7a:	e00f      	b.n	8005b9c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b7c:	f7fc fb0e 	bl	800219c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d908      	bls.n	8005b9c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005b9a:	e006      	b.n	8005baa <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0e9      	beq.n	8005b7c <RCCEx_PLLSAI2_Config+0x100>
 8005ba8:	e000      	b.n	8005bac <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005baa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005bb2:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	4904      	ldr	r1, [pc, #16]	@ (8005bcc <RCCEx_PLLSAI2_Config+0x150>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	07ff800c 	.word	0x07ff800c

08005bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e042      	b.n	8005c6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fb fd39 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2224      	movs	r2, #36	@ 0x24
 8005c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fbb6 	bl	8006390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f8b3 	bl	8005d90 <UART_SetConfig>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e01b      	b.n	8005c6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc35 	bl	80064d4 <UART_CheckIdleState>
 8005c6a:	4603      	mov	r3, r0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d17b      	bne.n	8005d86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_UART_Transmit+0x26>
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e074      	b.n	8005d88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2221      	movs	r2, #33	@ 0x21
 8005caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cae:	f7fc fa75 	bl	800219c <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ccc:	d108      	bne.n	8005ce0 <HAL_UART_Transmit+0x6c>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e003      	b.n	8005ce8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ce8:	e030      	b.n	8005d4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fc97 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e03d      	b.n	8005d88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	3302      	adds	r3, #2
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e007      	b.n	8005d3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1c8      	bne.n	8005cea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2140      	movs	r1, #64	@ 0x40
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fc60 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e006      	b.n	8005d88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b08c      	sub	sp, #48	@ 0x30
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4baa      	ldr	r3, [pc, #680]	@ (8006068 <UART_SetConfig+0x2d8>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a9f      	ldr	r2, [pc, #636]	@ (800606c <UART_SetConfig+0x2dc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005e06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	f023 010f 	bic.w	r1, r3, #15
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a90      	ldr	r2, [pc, #576]	@ (8006070 <UART_SetConfig+0x2e0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d125      	bne.n	8005e80 <UART_SetConfig+0xf0>
 8005e34:	4b8f      	ldr	r3, [pc, #572]	@ (8006074 <UART_SetConfig+0x2e4>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d81a      	bhi.n	8005e78 <UART_SetConfig+0xe8>
 8005e42:	a201      	add	r2, pc, #4	@ (adr r2, 8005e48 <UART_SetConfig+0xb8>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e71 	.word	0x08005e71
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5e:	e116      	b.n	800608e <UART_SetConfig+0x2fe>
 8005e60:	2302      	movs	r3, #2
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e112      	b.n	800608e <UART_SetConfig+0x2fe>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e10e      	b.n	800608e <UART_SetConfig+0x2fe>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e10a      	b.n	800608e <UART_SetConfig+0x2fe>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e106      	b.n	800608e <UART_SetConfig+0x2fe>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7c      	ldr	r2, [pc, #496]	@ (8006078 <UART_SetConfig+0x2e8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d138      	bne.n	8005efc <UART_SetConfig+0x16c>
 8005e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006074 <UART_SetConfig+0x2e4>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	f003 030c 	and.w	r3, r3, #12
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d82d      	bhi.n	8005ef4 <UART_SetConfig+0x164>
 8005e98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x110>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005ef5 	.word	0x08005ef5
 8005ea8:	08005ef5 	.word	0x08005ef5
 8005eac:	08005ef5 	.word	0x08005ef5
 8005eb0:	08005ee5 	.word	0x08005ee5
 8005eb4:	08005ef5 	.word	0x08005ef5
 8005eb8:	08005ef5 	.word	0x08005ef5
 8005ebc:	08005ef5 	.word	0x08005ef5
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	08005ef5 	.word	0x08005ef5
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	08005ef5 	.word	0x08005ef5
 8005ed0:	08005eed 	.word	0x08005eed
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eda:	e0d8      	b.n	800608e <UART_SetConfig+0x2fe>
 8005edc:	2302      	movs	r3, #2
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	e0d4      	b.n	800608e <UART_SetConfig+0x2fe>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eea:	e0d0      	b.n	800608e <UART_SetConfig+0x2fe>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef2:	e0cc      	b.n	800608e <UART_SetConfig+0x2fe>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efa:	e0c8      	b.n	800608e <UART_SetConfig+0x2fe>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a5e      	ldr	r2, [pc, #376]	@ (800607c <UART_SetConfig+0x2ec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d125      	bne.n	8005f52 <UART_SetConfig+0x1c2>
 8005f06:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <UART_SetConfig+0x2e4>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f10:	2b30      	cmp	r3, #48	@ 0x30
 8005f12:	d016      	beq.n	8005f42 <UART_SetConfig+0x1b2>
 8005f14:	2b30      	cmp	r3, #48	@ 0x30
 8005f16:	d818      	bhi.n	8005f4a <UART_SetConfig+0x1ba>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d00a      	beq.n	8005f32 <UART_SetConfig+0x1a2>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d814      	bhi.n	8005f4a <UART_SetConfig+0x1ba>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <UART_SetConfig+0x19a>
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d008      	beq.n	8005f3a <UART_SetConfig+0x1aa>
 8005f28:	e00f      	b.n	8005f4a <UART_SetConfig+0x1ba>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f30:	e0ad      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f32:	2302      	movs	r3, #2
 8005f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f38:	e0a9      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f3a:	2304      	movs	r3, #4
 8005f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f40:	e0a5      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f42:	2308      	movs	r3, #8
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f48:	e0a1      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f4a:	2310      	movs	r3, #16
 8005f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f50:	e09d      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a4a      	ldr	r2, [pc, #296]	@ (8006080 <UART_SetConfig+0x2f0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d125      	bne.n	8005fa8 <UART_SetConfig+0x218>
 8005f5c:	4b45      	ldr	r3, [pc, #276]	@ (8006074 <UART_SetConfig+0x2e4>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f68:	d016      	beq.n	8005f98 <UART_SetConfig+0x208>
 8005f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f6c:	d818      	bhi.n	8005fa0 <UART_SetConfig+0x210>
 8005f6e:	2b80      	cmp	r3, #128	@ 0x80
 8005f70:	d00a      	beq.n	8005f88 <UART_SetConfig+0x1f8>
 8005f72:	2b80      	cmp	r3, #128	@ 0x80
 8005f74:	d814      	bhi.n	8005fa0 <UART_SetConfig+0x210>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <UART_SetConfig+0x1f0>
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	d008      	beq.n	8005f90 <UART_SetConfig+0x200>
 8005f7e:	e00f      	b.n	8005fa0 <UART_SetConfig+0x210>
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e082      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e07e      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f96:	e07a      	b.n	800608e <UART_SetConfig+0x2fe>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9e:	e076      	b.n	800608e <UART_SetConfig+0x2fe>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa6:	e072      	b.n	800608e <UART_SetConfig+0x2fe>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a35      	ldr	r2, [pc, #212]	@ (8006084 <UART_SetConfig+0x2f4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d12a      	bne.n	8006008 <UART_SetConfig+0x278>
 8005fb2:	4b30      	ldr	r3, [pc, #192]	@ (8006074 <UART_SetConfig+0x2e4>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc0:	d01a      	beq.n	8005ff8 <UART_SetConfig+0x268>
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc6:	d81b      	bhi.n	8006000 <UART_SetConfig+0x270>
 8005fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fcc:	d00c      	beq.n	8005fe8 <UART_SetConfig+0x258>
 8005fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd2:	d815      	bhi.n	8006000 <UART_SetConfig+0x270>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <UART_SetConfig+0x250>
 8005fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fdc:	d008      	beq.n	8005ff0 <UART_SetConfig+0x260>
 8005fde:	e00f      	b.n	8006000 <UART_SetConfig+0x270>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe6:	e052      	b.n	800608e <UART_SetConfig+0x2fe>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fee:	e04e      	b.n	800608e <UART_SetConfig+0x2fe>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff6:	e04a      	b.n	800608e <UART_SetConfig+0x2fe>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffe:	e046      	b.n	800608e <UART_SetConfig+0x2fe>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006006:	e042      	b.n	800608e <UART_SetConfig+0x2fe>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a17      	ldr	r2, [pc, #92]	@ (800606c <UART_SetConfig+0x2dc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d13a      	bne.n	8006088 <UART_SetConfig+0x2f8>
 8006012:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <UART_SetConfig+0x2e4>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800601c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006020:	d01a      	beq.n	8006058 <UART_SetConfig+0x2c8>
 8006022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006026:	d81b      	bhi.n	8006060 <UART_SetConfig+0x2d0>
 8006028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602c:	d00c      	beq.n	8006048 <UART_SetConfig+0x2b8>
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006032:	d815      	bhi.n	8006060 <UART_SetConfig+0x2d0>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <UART_SetConfig+0x2b0>
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800603c:	d008      	beq.n	8006050 <UART_SetConfig+0x2c0>
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x2d0>
 8006040:	2300      	movs	r3, #0
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006046:	e022      	b.n	800608e <UART_SetConfig+0x2fe>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604e:	e01e      	b.n	800608e <UART_SetConfig+0x2fe>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006056:	e01a      	b.n	800608e <UART_SetConfig+0x2fe>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605e:	e016      	b.n	800608e <UART_SetConfig+0x2fe>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006066:	e012      	b.n	800608e <UART_SetConfig+0x2fe>
 8006068:	cfff69f3 	.word	0xcfff69f3
 800606c:	40008000 	.word	0x40008000
 8006070:	40013800 	.word	0x40013800
 8006074:	40021000 	.word	0x40021000
 8006078:	40004400 	.word	0x40004400
 800607c:	40004800 	.word	0x40004800
 8006080:	40004c00 	.word	0x40004c00
 8006084:	40005000 	.word	0x40005000
 8006088:	2310      	movs	r3, #16
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4ab0      	ldr	r2, [pc, #704]	@ (8006354 <UART_SetConfig+0x5c4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	f040 809b 	bne.w	80061d0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800609a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d827      	bhi.n	80060f2 <UART_SetConfig+0x362>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x318>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fe ff72 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80060d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060d2:	e014      	b.n	80060fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe ff82 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006358 <UART_SetConfig+0x5c8>)
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060e0:	e00d      	b.n	80060fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fe feb5 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 80060e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8130 	beq.w	8006366 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	4a94      	ldr	r2, [pc, #592]	@ (800635c <UART_SetConfig+0x5cc>)
 800610c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006110:	461a      	mov	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	fbb3 f3f2 	udiv	r3, r3, r2
 8006118:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	4413      	add	r3, r2
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	429a      	cmp	r2, r3
 8006128:	d305      	bcc.n	8006136 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	429a      	cmp	r2, r3
 8006134:	d903      	bls.n	800613e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800613c:	e113      	b.n	8006366 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	2200      	movs	r2, #0
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	60fa      	str	r2, [r7, #12]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	4a84      	ldr	r2, [pc, #528]	@ (800635c <UART_SetConfig+0x5cc>)
 800614c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006150:	b29b      	uxth	r3, r3
 8006152:	2200      	movs	r2, #0
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006160:	f7fa fd08 	bl	8000b74 <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4610      	mov	r0, r2
 800616a:	4619      	mov	r1, r3
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	020b      	lsls	r3, r1, #8
 8006176:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800617a:	0202      	lsls	r2, r0, #8
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	6849      	ldr	r1, [r1, #4]
 8006180:	0849      	lsrs	r1, r1, #1
 8006182:	2000      	movs	r0, #0
 8006184:	460c      	mov	r4, r1
 8006186:	4605      	mov	r5, r0
 8006188:	eb12 0804 	adds.w	r8, r2, r4
 800618c:	eb43 0905 	adc.w	r9, r3, r5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	469a      	mov	sl, r3
 8006198:	4693      	mov	fp, r2
 800619a:	4652      	mov	r2, sl
 800619c:	465b      	mov	r3, fp
 800619e:	4640      	mov	r0, r8
 80061a0:	4649      	mov	r1, r9
 80061a2:	f7fa fce7 	bl	8000b74 <__aeabi_uldivmod>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4613      	mov	r3, r2
 80061ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061b4:	d308      	bcc.n	80061c8 <UART_SetConfig+0x438>
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061bc:	d204      	bcs.n	80061c8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e0ce      	b.n	8006366 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061ce:	e0ca      	b.n	8006366 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d8:	d166      	bne.n	80062a8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80061da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d827      	bhi.n	8006232 <UART_SetConfig+0x4a2>
 80061e2:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <UART_SetConfig+0x458>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006233 	.word	0x08006233
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006233 	.word	0x08006233
 8006204:	08006233 	.word	0x08006233
 8006208:	0800622b 	.word	0x0800622b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800620c:	f7fe fed2 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006212:	e014      	b.n	800623e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006214:	f7fe fee2 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621a:	e010      	b.n	800623e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4b4e      	ldr	r3, [pc, #312]	@ (8006358 <UART_SetConfig+0x5c8>)
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006220:	e00d      	b.n	800623e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fe fe15 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8006226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006228:	e009      	b.n	800623e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006230:	e005      	b.n	800623e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800623c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8090 	beq.w	8006366 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624a:	4a44      	ldr	r2, [pc, #272]	@ (800635c <UART_SetConfig+0x5cc>)
 800624c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006250:	461a      	mov	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	fbb3 f3f2 	udiv	r3, r3, r2
 8006258:	005a      	lsls	r2, r3, #1
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	441a      	add	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d916      	bls.n	80062a0 <UART_SetConfig+0x510>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006278:	d212      	bcs.n	80062a0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f023 030f 	bic.w	r3, r3, #15
 8006282:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b29a      	uxth	r2, r3
 8006290:	8bfb      	ldrh	r3, [r7, #30]
 8006292:	4313      	orrs	r3, r2
 8006294:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	8bfa      	ldrh	r2, [r7, #30]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e062      	b.n	8006366 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062a6:	e05e      	b.n	8006366 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d828      	bhi.n	8006302 <UART_SetConfig+0x572>
 80062b0:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <UART_SetConfig+0x528>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	08006303 	.word	0x08006303
 80062c8:	080062f3 	.word	0x080062f3
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006303 	.word	0x08006303
 80062d4:	08006303 	.word	0x08006303
 80062d8:	080062fb 	.word	0x080062fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fe fe6a 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80062e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062e2:	e014      	b.n	800630e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fe fe7a 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80062e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ea:	e010      	b.n	800630e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <UART_SetConfig+0x5c8>)
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062f0:	e00d      	b.n	800630e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f2:	f7fe fdad 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 80062f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062f8:	e009      	b.n	800630e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006300:	e005      	b.n	800630e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800630c:	bf00      	nop
    }

    if (pclk != 0U)
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d028      	beq.n	8006366 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	4a10      	ldr	r2, [pc, #64]	@ (800635c <UART_SetConfig+0x5cc>)
 800631a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800631e:	461a      	mov	r2, r3
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	fbb3 f2f2 	udiv	r2, r3, r2
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	441a      	add	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	fbb2 f3f3 	udiv	r3, r2, r3
 8006336:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b0f      	cmp	r3, #15
 800633c:	d910      	bls.n	8006360 <UART_SetConfig+0x5d0>
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006344:	d20c      	bcs.n	8006360 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	b29a      	uxth	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e009      	b.n	8006366 <UART_SetConfig+0x5d6>
 8006352:	bf00      	nop
 8006354:	40008000 	.word	0x40008000
 8006358:	00f42400 	.word	0x00f42400
 800635c:	08008d24 	.word	0x08008d24
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2201      	movs	r2, #1
 800636a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2201      	movs	r2, #1
 8006372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2200      	movs	r2, #0
 8006380:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006382:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006386:	4618      	mov	r0, r3
 8006388:	3730      	adds	r7, #48	@ 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800648e:	d10a      	bne.n	80064a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b098      	sub	sp, #96	@ 0x60
 80064d8:	af02      	add	r7, sp, #8
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e4:	f7fb fe5a 	bl	800219c <HAL_GetTick>
 80064e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d12f      	bne.n	8006558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006500:	2200      	movs	r2, #0
 8006502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f88e 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d022      	beq.n	8006558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006530:	647b      	str	r3, [r7, #68]	@ 0x44
 8006532:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800653e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e6      	bne.n	8006512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e063      	b.n	8006620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b04      	cmp	r3, #4
 8006564:	d149      	bne.n	80065fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656e:	2200      	movs	r2, #0
 8006570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f857 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d03c      	beq.n	80065fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	623b      	str	r3, [r7, #32]
   return(result);
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800659e:	633b      	str	r3, [r7, #48]	@ 0x30
 80065a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e6      	bne.n	8006580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d2:	61fa      	str	r2, [r7, #28]
 80065d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	69b9      	ldr	r1, [r7, #24]
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	617b      	str	r3, [r7, #20]
   return(result);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e012      	b.n	8006620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3758      	adds	r7, #88	@ 0x58
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006638:	e04f      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d04b      	beq.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7fb fdab 	bl	800219c <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <UART_WaitOnFlagUntilTimeout+0x30>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e04e      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d037      	beq.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b80      	cmp	r3, #128	@ 0x80
 800666e:	d034      	beq.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	d031      	beq.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b08      	cmp	r3, #8
 8006682:	d110      	bne.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f838 	bl	8006702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2208      	movs	r2, #8
 8006696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e029      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b4:	d111      	bne.n	80066da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f81e 	bl	8006702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e00f      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4013      	ands	r3, r2
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	bf0c      	ite	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	2300      	movne	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d0a0      	beq.n	800663a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006702:	b480      	push	{r7}
 8006704:	b095      	sub	sp, #84	@ 0x54
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006728:	643b      	str	r3, [r7, #64]	@ 0x40
 800672a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800672e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	61fb      	str	r3, [r7, #28]
   return(result);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e3      	bne.n	800673c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d118      	bne.n	80067ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	60bb      	str	r3, [r7, #8]
   return(result);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f023 0310 	bic.w	r3, r3, #16
 8006790:	647b      	str	r3, [r7, #68]	@ 0x44
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6979      	ldr	r1, [r7, #20]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	613b      	str	r3, [r7, #16]
   return(result);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e6      	bne.n	800677c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067c2:	bf00      	nop
 80067c4:	3754      	adds	r7, #84	@ 0x54
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e027      	b.n	8006834 <HAL_UARTEx_DisableFifoMode+0x66>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	@ 0x24
 80067f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e02d      	b.n	80068b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2224      	movs	r2, #36	@ 0x24
 8006864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f84f 	bl	8006938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e02d      	b.n	8006930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2224      	movs	r2, #36	@ 0x24
 80068e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f811 	bl	8006938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006958:	e031      	b.n	80069be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800695a:	2308      	movs	r3, #8
 800695c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800695e:	2308      	movs	r3, #8
 8006960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	0e5b      	lsrs	r3, r3, #25
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	0f5b      	lsrs	r3, r3, #29
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	7b3a      	ldrb	r2, [r7, #12]
 8006986:	4911      	ldr	r1, [pc, #68]	@ (80069cc <UARTEx_SetNbDataToProcess+0x94>)
 8006988:	5c8a      	ldrb	r2, [r1, r2]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800698e:	7b3a      	ldrb	r2, [r7, #12]
 8006990:	490f      	ldr	r1, [pc, #60]	@ (80069d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006994:	fb93 f3f2 	sdiv	r3, r3, r2
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	7b7a      	ldrb	r2, [r7, #13]
 80069a4:	4909      	ldr	r1, [pc, #36]	@ (80069cc <UARTEx_SetNbDataToProcess+0x94>)
 80069a6:	5c8a      	ldrb	r2, [r1, r2]
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069ac:	7b7a      	ldrb	r2, [r7, #13]
 80069ae:	4908      	ldr	r1, [pc, #32]	@ (80069d0 <UARTEx_SetNbDataToProcess+0x98>)
 80069b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	08008d3c 	.word	0x08008d3c
 80069d0:	08008d44 	.word	0x08008d44

080069d4 <std>:
 80069d4:	2300      	movs	r3, #0
 80069d6:	b510      	push	{r4, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	6083      	str	r3, [r0, #8]
 80069dc:	8181      	strh	r1, [r0, #12]
 80069de:	4619      	mov	r1, r3
 80069e0:	6643      	str	r3, [r0, #100]	@ 0x64
 80069e2:	81c2      	strh	r2, [r0, #14]
 80069e4:	2208      	movs	r2, #8
 80069e6:	6183      	str	r3, [r0, #24]
 80069e8:	e9c0 3300 	strd	r3, r3, [r0]
 80069ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069f0:	305c      	adds	r0, #92	@ 0x5c
 80069f2:	f000 f928 	bl	8006c46 <memset>
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <std+0x58>)
 80069f8:	6224      	str	r4, [r4, #32]
 80069fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80069fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <std+0x5c>)
 80069fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a00:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <std+0x60>)
 8006a02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <std+0x64>)
 8006a06:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a08:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <std+0x68>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d006      	beq.n	8006a1c <std+0x48>
 8006a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a12:	4294      	cmp	r4, r2
 8006a14:	d002      	beq.n	8006a1c <std+0x48>
 8006a16:	33d0      	adds	r3, #208	@ 0xd0
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d105      	bne.n	8006a28 <std+0x54>
 8006a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f000 b988 	b.w	8006d38 <__retarget_lock_init_recursive>
 8006a28:	bd10      	pop	{r4, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08006bc1 	.word	0x08006bc1
 8006a30:	08006be3 	.word	0x08006be3
 8006a34:	08006c1b 	.word	0x08006c1b
 8006a38:	08006c3f 	.word	0x08006c3f
 8006a3c:	200003a0 	.word	0x200003a0

08006a40 <stdio_exit_handler>:
 8006a40:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <stdio_exit_handler+0xc>)
 8006a42:	4903      	ldr	r1, [pc, #12]	@ (8006a50 <stdio_exit_handler+0x10>)
 8006a44:	4803      	ldr	r0, [pc, #12]	@ (8006a54 <stdio_exit_handler+0x14>)
 8006a46:	f000 b869 	b.w	8006b1c <_fwalk_sglue>
 8006a4a:	bf00      	nop
 8006a4c:	20000034 	.word	0x20000034
 8006a50:	0800788d 	.word	0x0800788d
 8006a54:	20000044 	.word	0x20000044

08006a58 <cleanup_stdio>:
 8006a58:	6841      	ldr	r1, [r0, #4]
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <cleanup_stdio+0x34>)
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	d001      	beq.n	8006a68 <cleanup_stdio+0x10>
 8006a64:	f000 ff12 	bl	800788c <_fflush_r>
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <cleanup_stdio+0x38>)
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	d002      	beq.n	8006a76 <cleanup_stdio+0x1e>
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 ff0b 	bl	800788c <_fflush_r>
 8006a76:	68e1      	ldr	r1, [r4, #12]
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <cleanup_stdio+0x3c>)
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d004      	beq.n	8006a88 <cleanup_stdio+0x30>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f000 bf02 	b.w	800788c <_fflush_r>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200003a0 	.word	0x200003a0
 8006a90:	20000408 	.word	0x20000408
 8006a94:	20000470 	.word	0x20000470

08006a98 <global_stdio_init.part.0>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <global_stdio_init.part.0+0x30>)
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	4c0b      	ldr	r4, [pc, #44]	@ (8006acc <global_stdio_init.part.0+0x34>)
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad0 <global_stdio_init.part.0+0x38>)
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f7ff ff94 	bl	80069d4 <std>
 8006aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2109      	movs	r1, #9
 8006ab4:	f7ff ff8e 	bl	80069d4 <std>
 8006ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006abc:	2202      	movs	r2, #2
 8006abe:	2112      	movs	r1, #18
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f7ff bf86 	b.w	80069d4 <std>
 8006ac8:	200004d8 	.word	0x200004d8
 8006acc:	200003a0 	.word	0x200003a0
 8006ad0:	08006a41 	.word	0x08006a41

08006ad4 <__sfp_lock_acquire>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	@ (8006adc <__sfp_lock_acquire+0x8>)
 8006ad6:	f000 b930 	b.w	8006d3a <__retarget_lock_acquire_recursive>
 8006ada:	bf00      	nop
 8006adc:	200004e1 	.word	0x200004e1

08006ae0 <__sfp_lock_release>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	@ (8006ae8 <__sfp_lock_release+0x8>)
 8006ae2:	f000 b92b 	b.w	8006d3c <__retarget_lock_release_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	200004e1 	.word	0x200004e1

08006aec <__sinit>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4604      	mov	r4, r0
 8006af0:	f7ff fff0 	bl	8006ad4 <__sfp_lock_acquire>
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	b11b      	cbz	r3, 8006b00 <__sinit+0x14>
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afc:	f7ff bff0 	b.w	8006ae0 <__sfp_lock_release>
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <__sinit+0x28>)
 8006b02:	6223      	str	r3, [r4, #32]
 8006b04:	4b04      	ldr	r3, [pc, #16]	@ (8006b18 <__sinit+0x2c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f5      	bne.n	8006af8 <__sinit+0xc>
 8006b0c:	f7ff ffc4 	bl	8006a98 <global_stdio_init.part.0>
 8006b10:	e7f2      	b.n	8006af8 <__sinit+0xc>
 8006b12:	bf00      	nop
 8006b14:	08006a59 	.word	0x08006a59
 8006b18:	200004d8 	.word	0x200004d8

08006b1c <_fwalk_sglue>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	4607      	mov	r7, r0
 8006b22:	4688      	mov	r8, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	2600      	movs	r6, #0
 8006b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b30:	d505      	bpl.n	8006b3e <_fwalk_sglue+0x22>
 8006b32:	6824      	ldr	r4, [r4, #0]
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d1f7      	bne.n	8006b28 <_fwalk_sglue+0xc>
 8006b38:	4630      	mov	r0, r6
 8006b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d907      	bls.n	8006b54 <_fwalk_sglue+0x38>
 8006b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <_fwalk_sglue+0x38>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	4306      	orrs	r6, r0
 8006b54:	3568      	adds	r5, #104	@ 0x68
 8006b56:	e7e9      	b.n	8006b2c <_fwalk_sglue+0x10>

08006b58 <iprintf>:
 8006b58:	b40f      	push	{r0, r1, r2, r3}
 8006b5a:	b507      	push	{r0, r1, r2, lr}
 8006b5c:	4906      	ldr	r1, [pc, #24]	@ (8006b78 <iprintf+0x20>)
 8006b5e:	ab04      	add	r3, sp, #16
 8006b60:	6808      	ldr	r0, [r1, #0]
 8006b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b66:	6881      	ldr	r1, [r0, #8]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	f000 fb63 	bl	8007234 <_vfiprintf_r>
 8006b6e:	b003      	add	sp, #12
 8006b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr
 8006b78:	20000040 	.word	0x20000040

08006b7c <siprintf>:
 8006b7c:	b40e      	push	{r1, r2, r3}
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	b09d      	sub	sp, #116	@ 0x74
 8006b82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b86:	2400      	movs	r4, #0
 8006b88:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b8a:	9002      	str	r0, [sp, #8]
 8006b8c:	9006      	str	r0, [sp, #24]
 8006b8e:	9107      	str	r1, [sp, #28]
 8006b90:	9104      	str	r1, [sp, #16]
 8006b92:	4809      	ldr	r0, [pc, #36]	@ (8006bb8 <siprintf+0x3c>)
 8006b94:	4909      	ldr	r1, [pc, #36]	@ (8006bbc <siprintf+0x40>)
 8006b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9a:	9105      	str	r1, [sp, #20]
 8006b9c:	a902      	add	r1, sp, #8
 8006b9e:	6800      	ldr	r0, [r0, #0]
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ba4:	f000 fa20 	bl	8006fe8 <_svfiprintf_r>
 8006ba8:	9b02      	ldr	r3, [sp, #8]
 8006baa:	701c      	strb	r4, [r3, #0]
 8006bac:	b01d      	add	sp, #116	@ 0x74
 8006bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb2:	b003      	add	sp, #12
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000040 	.word	0x20000040
 8006bbc:	ffff0208 	.word	0xffff0208

08006bc0 <__sread>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc8:	f000 f868 	bl	8006c9c <_read_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	bfab      	itete	ge
 8006bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd4:	181b      	addge	r3, r3, r0
 8006bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bda:	bfac      	ite	ge
 8006bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bde:	81a3      	strhlt	r3, [r4, #12]
 8006be0:	bd10      	pop	{r4, pc}

08006be2 <__swrite>:
 8006be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be6:	461f      	mov	r7, r3
 8006be8:	898b      	ldrh	r3, [r1, #12]
 8006bea:	4605      	mov	r5, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	05db      	lsls	r3, r3, #23
 8006bf0:	4616      	mov	r6, r2
 8006bf2:	d505      	bpl.n	8006c00 <__swrite+0x1e>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	f000 f83c 	bl	8006c78 <_lseek_r>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	4632      	mov	r2, r6
 8006c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	463b      	mov	r3, r7
 8006c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	f000 b853 	b.w	8006cc0 <_write_r>

08006c1a <__sseek>:
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c22:	f000 f829 	bl	8006c78 <_lseek_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	bf15      	itete	ne
 8006c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c36:	81a3      	strheq	r3, [r4, #12]
 8006c38:	bf18      	it	ne
 8006c3a:	81a3      	strhne	r3, [r4, #12]
 8006c3c:	bd10      	pop	{r4, pc}

08006c3e <__sclose>:
 8006c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c42:	f000 b809 	b.w	8006c58 <_close_r>

08006c46 <memset>:
 8006c46:	4402      	add	r2, r0
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d100      	bne.n	8006c50 <memset+0xa>
 8006c4e:	4770      	bx	lr
 8006c50:	f803 1b01 	strb.w	r1, [r3], #1
 8006c54:	e7f9      	b.n	8006c4a <memset+0x4>
	...

08006c58 <_close_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4d05      	ldr	r5, [pc, #20]	@ (8006c74 <_close_r+0x1c>)
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	f7fa fe17 	bl	8001896 <_close>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_close_r+0x1a>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_close_r+0x1a>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	200004dc 	.word	0x200004dc

08006c78 <_lseek_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4d06      	ldr	r5, [pc, #24]	@ (8006c98 <_lseek_r+0x20>)
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa fe2c 	bl	80018e4 <_lseek>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_lseek_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_lseek_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200004dc 	.word	0x200004dc

08006c9c <_read_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4d06      	ldr	r5, [pc, #24]	@ (8006cbc <_read_r+0x20>)
 8006ca2:	4608      	mov	r0, r1
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	602a      	str	r2, [r5, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f7fa fdba 	bl	8001824 <_read>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_read_r+0x1e>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_read_r+0x1e>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	200004dc 	.word	0x200004dc

08006cc0 <_write_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4d06      	ldr	r5, [pc, #24]	@ (8006ce0 <_write_r+0x20>)
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7fa fdc5 	bl	800185e <_write>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_write_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_write_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	200004dc 	.word	0x200004dc

08006ce4 <__errno>:
 8006ce4:	4b01      	ldr	r3, [pc, #4]	@ (8006cec <__errno+0x8>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000040 	.word	0x20000040

08006cf0 <__libc_init_array>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8006d28 <__libc_init_array+0x38>)
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	4c0d      	ldr	r4, [pc, #52]	@ (8006d2c <__libc_init_array+0x3c>)
 8006cf8:	1b64      	subs	r4, r4, r5
 8006cfa:	10a4      	asrs	r4, r4, #2
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	d109      	bne.n	8006d14 <__libc_init_array+0x24>
 8006d00:	4d0b      	ldr	r5, [pc, #44]	@ (8006d30 <__libc_init_array+0x40>)
 8006d02:	2600      	movs	r6, #0
 8006d04:	4c0b      	ldr	r4, [pc, #44]	@ (8006d34 <__libc_init_array+0x44>)
 8006d06:	f001 ffa3 	bl	8008c50 <_init>
 8006d0a:	1b64      	subs	r4, r4, r5
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	42a6      	cmp	r6, r4
 8006d10:	d105      	bne.n	8006d1e <__libc_init_array+0x2e>
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d18:	3601      	adds	r6, #1
 8006d1a:	4798      	blx	r3
 8006d1c:	e7ee      	b.n	8006cfc <__libc_init_array+0xc>
 8006d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d22:	3601      	adds	r6, #1
 8006d24:	4798      	blx	r3
 8006d26:	e7f2      	b.n	8006d0e <__libc_init_array+0x1e>
 8006d28:	08008f60 	.word	0x08008f60
 8006d2c:	08008f60 	.word	0x08008f60
 8006d30:	08008f60 	.word	0x08008f60
 8006d34:	08008f64 	.word	0x08008f64

08006d38 <__retarget_lock_init_recursive>:
 8006d38:	4770      	bx	lr

08006d3a <__retarget_lock_acquire_recursive>:
 8006d3a:	4770      	bx	lr

08006d3c <__retarget_lock_release_recursive>:
 8006d3c:	4770      	bx	lr
	...

08006d40 <_free_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4605      	mov	r5, r0
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d041      	beq.n	8006dcc <_free_r+0x8c>
 8006d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4c:	1f0c      	subs	r4, r1, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	18e4      	addlt	r4, r4, r3
 8006d54:	f000 f8e0 	bl	8006f18 <__malloc_lock>
 8006d58:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd0 <_free_r+0x90>)
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	b933      	cbnz	r3, 8006d6c <_free_r+0x2c>
 8006d5e:	6063      	str	r3, [r4, #4]
 8006d60:	6014      	str	r4, [r2, #0]
 8006d62:	4628      	mov	r0, r5
 8006d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d68:	f000 b8dc 	b.w	8006f24 <__malloc_unlock>
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d908      	bls.n	8006d82 <_free_r+0x42>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	1821      	adds	r1, r4, r0
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf01      	itttt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	1809      	addeq	r1, r1, r0
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	e7ed      	b.n	8006d5e <_free_r+0x1e>
 8006d82:	461a      	mov	r2, r3
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b10b      	cbz	r3, 8006d8c <_free_r+0x4c>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d9fa      	bls.n	8006d82 <_free_r+0x42>
 8006d8c:	6811      	ldr	r1, [r2, #0]
 8006d8e:	1850      	adds	r0, r2, r1
 8006d90:	42a0      	cmp	r0, r4
 8006d92:	d10b      	bne.n	8006dac <_free_r+0x6c>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	4401      	add	r1, r0
 8006d98:	1850      	adds	r0, r2, r1
 8006d9a:	6011      	str	r1, [r2, #0]
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d1e0      	bne.n	8006d62 <_free_r+0x22>
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4408      	add	r0, r1
 8006da6:	6053      	str	r3, [r2, #4]
 8006da8:	6010      	str	r0, [r2, #0]
 8006daa:	e7da      	b.n	8006d62 <_free_r+0x22>
 8006dac:	d902      	bls.n	8006db4 <_free_r+0x74>
 8006dae:	230c      	movs	r3, #12
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	e7d6      	b.n	8006d62 <_free_r+0x22>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	1821      	adds	r1, r4, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf02      	ittt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6063      	str	r3, [r4, #4]
 8006dc4:	bf08      	it	eq
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	6054      	str	r4, [r2, #4]
 8006dca:	e7ca      	b.n	8006d62 <_free_r+0x22>
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	200004e8 	.word	0x200004e8

08006dd4 <sbrk_aligned>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e14 <sbrk_aligned+0x40>)
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4605      	mov	r5, r0
 8006ddc:	6831      	ldr	r1, [r6, #0]
 8006dde:	b911      	cbnz	r1, 8006de6 <sbrk_aligned+0x12>
 8006de0:	f000 fe2a 	bl	8007a38 <_sbrk_r>
 8006de4:	6030      	str	r0, [r6, #0]
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 fe25 	bl	8007a38 <_sbrk_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d103      	bne.n	8006dfa <sbrk_aligned+0x26>
 8006df2:	f04f 34ff 	mov.w	r4, #4294967295
 8006df6:	4620      	mov	r0, r4
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	1cc4      	adds	r4, r0, #3
 8006dfc:	f024 0403 	bic.w	r4, r4, #3
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d0f8      	beq.n	8006df6 <sbrk_aligned+0x22>
 8006e04:	1a21      	subs	r1, r4, r0
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 fe16 	bl	8007a38 <_sbrk_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d1f2      	bne.n	8006df6 <sbrk_aligned+0x22>
 8006e10:	e7ef      	b.n	8006df2 <sbrk_aligned+0x1e>
 8006e12:	bf00      	nop
 8006e14:	200004e4 	.word	0x200004e4

08006e18 <_malloc_r>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	1ccd      	adds	r5, r1, #3
 8006e1e:	4606      	mov	r6, r0
 8006e20:	f025 0503 	bic.w	r5, r5, #3
 8006e24:	3508      	adds	r5, #8
 8006e26:	2d0c      	cmp	r5, #12
 8006e28:	bf38      	it	cc
 8006e2a:	250c      	movcc	r5, #12
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	db01      	blt.n	8006e34 <_malloc_r+0x1c>
 8006e30:	42a9      	cmp	r1, r5
 8006e32:	d904      	bls.n	8006e3e <_malloc_r+0x26>
 8006e34:	230c      	movs	r3, #12
 8006e36:	6033      	str	r3, [r6, #0]
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f14 <_malloc_r+0xfc>
 8006e42:	f000 f869 	bl	8006f18 <__malloc_lock>
 8006e46:	f8d8 3000 	ldr.w	r3, [r8]
 8006e4a:	461c      	mov	r4, r3
 8006e4c:	bb44      	cbnz	r4, 8006ea0 <_malloc_r+0x88>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff ffbf 	bl	8006dd4 <sbrk_aligned>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	4604      	mov	r4, r0
 8006e5a:	d158      	bne.n	8006f0e <_malloc_r+0xf6>
 8006e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e60:	4627      	mov	r7, r4
 8006e62:	2f00      	cmp	r7, #0
 8006e64:	d143      	bne.n	8006eee <_malloc_r+0xd6>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d04b      	beq.n	8006f02 <_malloc_r+0xea>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	eb04 0903 	add.w	r9, r4, r3
 8006e74:	f000 fde0 	bl	8007a38 <_sbrk_r>
 8006e78:	4581      	cmp	r9, r0
 8006e7a:	d142      	bne.n	8006f02 <_malloc_r+0xea>
 8006e7c:	6821      	ldr	r1, [r4, #0]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	1a6d      	subs	r5, r5, r1
 8006e82:	4629      	mov	r1, r5
 8006e84:	f7ff ffa6 	bl	8006dd4 <sbrk_aligned>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d03a      	beq.n	8006f02 <_malloc_r+0xea>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	442b      	add	r3, r5
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	f8d8 3000 	ldr.w	r3, [r8]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	bb62      	cbnz	r2, 8006ef4 <_malloc_r+0xdc>
 8006e9a:	f8c8 7000 	str.w	r7, [r8]
 8006e9e:	e00f      	b.n	8006ec0 <_malloc_r+0xa8>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	1b52      	subs	r2, r2, r5
 8006ea4:	d420      	bmi.n	8006ee8 <_malloc_r+0xd0>
 8006ea6:	2a0b      	cmp	r2, #11
 8006ea8:	d917      	bls.n	8006eda <_malloc_r+0xc2>
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	6025      	str	r5, [r4, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	6059      	strne	r1, [r3, #4]
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	bf08      	it	eq
 8006eb8:	f8c8 1000 	streq.w	r1, [r8]
 8006ebc:	5162      	str	r2, [r4, r5]
 8006ebe:	604b      	str	r3, [r1, #4]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 f82f 	bl	8006f24 <__malloc_unlock>
 8006ec6:	f104 000b 	add.w	r0, r4, #11
 8006eca:	1d23      	adds	r3, r4, #4
 8006ecc:	f020 0007 	bic.w	r0, r0, #7
 8006ed0:	1ac2      	subs	r2, r0, r3
 8006ed2:	bf1c      	itt	ne
 8006ed4:	1a1b      	subne	r3, r3, r0
 8006ed6:	50a3      	strne	r3, [r4, r2]
 8006ed8:	e7af      	b.n	8006e3a <_malloc_r+0x22>
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	bf0c      	ite	eq
 8006ee0:	f8c8 2000 	streq.w	r2, [r8]
 8006ee4:	605a      	strne	r2, [r3, #4]
 8006ee6:	e7eb      	b.n	8006ec0 <_malloc_r+0xa8>
 8006ee8:	4623      	mov	r3, r4
 8006eea:	6864      	ldr	r4, [r4, #4]
 8006eec:	e7ae      	b.n	8006e4c <_malloc_r+0x34>
 8006eee:	463c      	mov	r4, r7
 8006ef0:	687f      	ldr	r7, [r7, #4]
 8006ef2:	e7b6      	b.n	8006e62 <_malloc_r+0x4a>
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d1fb      	bne.n	8006ef4 <_malloc_r+0xdc>
 8006efc:	2300      	movs	r3, #0
 8006efe:	6053      	str	r3, [r2, #4]
 8006f00:	e7de      	b.n	8006ec0 <_malloc_r+0xa8>
 8006f02:	230c      	movs	r3, #12
 8006f04:	4630      	mov	r0, r6
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	f000 f80c 	bl	8006f24 <__malloc_unlock>
 8006f0c:	e794      	b.n	8006e38 <_malloc_r+0x20>
 8006f0e:	6005      	str	r5, [r0, #0]
 8006f10:	e7d6      	b.n	8006ec0 <_malloc_r+0xa8>
 8006f12:	bf00      	nop
 8006f14:	200004e8 	.word	0x200004e8

08006f18 <__malloc_lock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	@ (8006f20 <__malloc_lock+0x8>)
 8006f1a:	f7ff bf0e 	b.w	8006d3a <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200004e0 	.word	0x200004e0

08006f24 <__malloc_unlock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	@ (8006f2c <__malloc_unlock+0x8>)
 8006f26:	f7ff bf09 	b.w	8006d3c <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200004e0 	.word	0x200004e0

08006f30 <__ssputs_r>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	461f      	mov	r7, r3
 8006f36:	688e      	ldr	r6, [r1, #8]
 8006f38:	4682      	mov	sl, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	42be      	cmp	r6, r7
 8006f3e:	4690      	mov	r8, r2
 8006f40:	680b      	ldr	r3, [r1, #0]
 8006f42:	d82d      	bhi.n	8006fa0 <__ssputs_r+0x70>
 8006f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f4c:	d026      	beq.n	8006f9c <__ssputs_r+0x6c>
 8006f4e:	6965      	ldr	r5, [r4, #20]
 8006f50:	6909      	ldr	r1, [r1, #16]
 8006f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f56:	eba3 0901 	sub.w	r9, r3, r1
 8006f5a:	1c7b      	adds	r3, r7, #1
 8006f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f60:	444b      	add	r3, r9
 8006f62:	106d      	asrs	r5, r5, #1
 8006f64:	429d      	cmp	r5, r3
 8006f66:	bf38      	it	cc
 8006f68:	461d      	movcc	r5, r3
 8006f6a:	0553      	lsls	r3, r2, #21
 8006f6c:	d527      	bpl.n	8006fbe <__ssputs_r+0x8e>
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7ff ff52 	bl	8006e18 <_malloc_r>
 8006f74:	4606      	mov	r6, r0
 8006f76:	b360      	cbz	r0, 8006fd2 <__ssputs_r+0xa2>
 8006f78:	464a      	mov	r2, r9
 8006f7a:	6921      	ldr	r1, [r4, #16]
 8006f7c:	f000 fd7a 	bl	8007a74 <memcpy>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	6126      	str	r6, [r4, #16]
 8006f8e:	444e      	add	r6, r9
 8006f90:	6165      	str	r5, [r4, #20]
 8006f92:	eba5 0509 	sub.w	r5, r5, r9
 8006f96:	6026      	str	r6, [r4, #0]
 8006f98:	463e      	mov	r6, r7
 8006f9a:	60a5      	str	r5, [r4, #8]
 8006f9c:	42be      	cmp	r6, r7
 8006f9e:	d900      	bls.n	8006fa2 <__ssputs_r+0x72>
 8006fa0:	463e      	mov	r6, r7
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	f000 fd2c 	bl	8007a04 <memmove>
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	2000      	movs	r0, #0
 8006fb0:	1b9b      	subs	r3, r3, r6
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	4433      	add	r3, r6
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	f000 fd65 	bl	8007a8e <_realloc_r>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d1e0      	bne.n	8006f8c <__ssputs_r+0x5c>
 8006fca:	6921      	ldr	r1, [r4, #16]
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f7ff feb7 	bl	8006d40 <_free_r>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	f8ca 3000 	str.w	r3, [sl]
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	e7e9      	b.n	8006fba <__ssputs_r+0x8a>
	...

08006fe8 <_svfiprintf_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4698      	mov	r8, r3
 8006fee:	898b      	ldrh	r3, [r1, #12]
 8006ff0:	b09d      	sub	sp, #116	@ 0x74
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	061b      	lsls	r3, r3, #24
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	d510      	bpl.n	800701e <_svfiprintf_r+0x36>
 8006ffc:	690b      	ldr	r3, [r1, #16]
 8006ffe:	b973      	cbnz	r3, 800701e <_svfiprintf_r+0x36>
 8007000:	2140      	movs	r1, #64	@ 0x40
 8007002:	f7ff ff09 	bl	8006e18 <_malloc_r>
 8007006:	6028      	str	r0, [r5, #0]
 8007008:	6128      	str	r0, [r5, #16]
 800700a:	b930      	cbnz	r0, 800701a <_svfiprintf_r+0x32>
 800700c:	230c      	movs	r3, #12
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	b01d      	add	sp, #116	@ 0x74
 8007016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701a:	2340      	movs	r3, #64	@ 0x40
 800701c:	616b      	str	r3, [r5, #20]
 800701e:	2300      	movs	r3, #0
 8007020:	f8cd 800c 	str.w	r8, [sp, #12]
 8007024:	f04f 0901 	mov.w	r9, #1
 8007028:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80071cc <_svfiprintf_r+0x1e4>
 800702c:	9309      	str	r3, [sp, #36]	@ 0x24
 800702e:	2320      	movs	r3, #32
 8007030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007034:	2330      	movs	r3, #48	@ 0x30
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800703a:	4623      	mov	r3, r4
 800703c:	469a      	mov	sl, r3
 800703e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007042:	b10a      	cbz	r2, 8007048 <_svfiprintf_r+0x60>
 8007044:	2a25      	cmp	r2, #37	@ 0x25
 8007046:	d1f9      	bne.n	800703c <_svfiprintf_r+0x54>
 8007048:	ebba 0b04 	subs.w	fp, sl, r4
 800704c:	d00b      	beq.n	8007066 <_svfiprintf_r+0x7e>
 800704e:	465b      	mov	r3, fp
 8007050:	4622      	mov	r2, r4
 8007052:	4629      	mov	r1, r5
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff ff6b 	bl	8006f30 <__ssputs_r>
 800705a:	3001      	adds	r0, #1
 800705c:	f000 80a7 	beq.w	80071ae <_svfiprintf_r+0x1c6>
 8007060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007062:	445a      	add	r2, fp
 8007064:	9209      	str	r2, [sp, #36]	@ 0x24
 8007066:	f89a 3000 	ldrb.w	r3, [sl]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 809f 	beq.w	80071ae <_svfiprintf_r+0x1c6>
 8007070:	2300      	movs	r3, #0
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	f10a 0a01 	add.w	sl, sl, #1
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007082:	931a      	str	r3, [sp, #104]	@ 0x68
 8007084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007088:	4654      	mov	r4, sl
 800708a:	2205      	movs	r2, #5
 800708c:	484f      	ldr	r0, [pc, #316]	@ (80071cc <_svfiprintf_r+0x1e4>)
 800708e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007092:	f000 fce1 	bl	8007a58 <memchr>
 8007096:	9a04      	ldr	r2, [sp, #16]
 8007098:	b9d8      	cbnz	r0, 80070d2 <_svfiprintf_r+0xea>
 800709a:	06d0      	lsls	r0, r2, #27
 800709c:	bf44      	itt	mi
 800709e:	2320      	movmi	r3, #32
 80070a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070a4:	0711      	lsls	r1, r2, #28
 80070a6:	bf44      	itt	mi
 80070a8:	232b      	movmi	r3, #43	@ 0x2b
 80070aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ae:	f89a 3000 	ldrb.w	r3, [sl]
 80070b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b4:	d015      	beq.n	80070e2 <_svfiprintf_r+0xfa>
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	4654      	mov	r4, sl
 80070ba:	2000      	movs	r0, #0
 80070bc:	f04f 0c0a 	mov.w	ip, #10
 80070c0:	4621      	mov	r1, r4
 80070c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c6:	3b30      	subs	r3, #48	@ 0x30
 80070c8:	2b09      	cmp	r3, #9
 80070ca:	d94b      	bls.n	8007164 <_svfiprintf_r+0x17c>
 80070cc:	b1b0      	cbz	r0, 80070fc <_svfiprintf_r+0x114>
 80070ce:	9207      	str	r2, [sp, #28]
 80070d0:	e014      	b.n	80070fc <_svfiprintf_r+0x114>
 80070d2:	eba0 0308 	sub.w	r3, r0, r8
 80070d6:	46a2      	mov	sl, r4
 80070d8:	fa09 f303 	lsl.w	r3, r9, r3
 80070dc:	4313      	orrs	r3, r2
 80070de:	9304      	str	r3, [sp, #16]
 80070e0:	e7d2      	b.n	8007088 <_svfiprintf_r+0xa0>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	1d19      	adds	r1, r3, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	9103      	str	r1, [sp, #12]
 80070ec:	bfbb      	ittet	lt
 80070ee:	425b      	neglt	r3, r3
 80070f0:	f042 0202 	orrlt.w	r2, r2, #2
 80070f4:	9307      	strge	r3, [sp, #28]
 80070f6:	9307      	strlt	r3, [sp, #28]
 80070f8:	bfb8      	it	lt
 80070fa:	9204      	strlt	r2, [sp, #16]
 80070fc:	7823      	ldrb	r3, [r4, #0]
 80070fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007100:	d10a      	bne.n	8007118 <_svfiprintf_r+0x130>
 8007102:	7863      	ldrb	r3, [r4, #1]
 8007104:	2b2a      	cmp	r3, #42	@ 0x2a
 8007106:	d132      	bne.n	800716e <_svfiprintf_r+0x186>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	3402      	adds	r4, #2
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071dc <_svfiprintf_r+0x1f4>
 800711c:	2203      	movs	r2, #3
 800711e:	7821      	ldrb	r1, [r4, #0]
 8007120:	4650      	mov	r0, sl
 8007122:	f000 fc99 	bl	8007a58 <memchr>
 8007126:	b138      	cbz	r0, 8007138 <_svfiprintf_r+0x150>
 8007128:	eba0 000a 	sub.w	r0, r0, sl
 800712c:	2240      	movs	r2, #64	@ 0x40
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	3401      	adds	r4, #1
 8007132:	4082      	lsls	r2, r0
 8007134:	4313      	orrs	r3, r2
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713c:	2206      	movs	r2, #6
 800713e:	4824      	ldr	r0, [pc, #144]	@ (80071d0 <_svfiprintf_r+0x1e8>)
 8007140:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007144:	f000 fc88 	bl	8007a58 <memchr>
 8007148:	2800      	cmp	r0, #0
 800714a:	d036      	beq.n	80071ba <_svfiprintf_r+0x1d2>
 800714c:	4b21      	ldr	r3, [pc, #132]	@ (80071d4 <_svfiprintf_r+0x1ec>)
 800714e:	bb1b      	cbnz	r3, 8007198 <_svfiprintf_r+0x1b0>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	3307      	adds	r3, #7
 8007154:	f023 0307 	bic.w	r3, r3, #7
 8007158:	3308      	adds	r3, #8
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715e:	4433      	add	r3, r6
 8007160:	9309      	str	r3, [sp, #36]	@ 0x24
 8007162:	e76a      	b.n	800703a <_svfiprintf_r+0x52>
 8007164:	fb0c 3202 	mla	r2, ip, r2, r3
 8007168:	460c      	mov	r4, r1
 800716a:	2001      	movs	r0, #1
 800716c:	e7a8      	b.n	80070c0 <_svfiprintf_r+0xd8>
 800716e:	2300      	movs	r3, #0
 8007170:	3401      	adds	r4, #1
 8007172:	f04f 0c0a 	mov.w	ip, #10
 8007176:	4619      	mov	r1, r3
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	4620      	mov	r0, r4
 800717c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007180:	3a30      	subs	r2, #48	@ 0x30
 8007182:	2a09      	cmp	r2, #9
 8007184:	d903      	bls.n	800718e <_svfiprintf_r+0x1a6>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0c6      	beq.n	8007118 <_svfiprintf_r+0x130>
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	e7c4      	b.n	8007118 <_svfiprintf_r+0x130>
 800718e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007192:	4604      	mov	r4, r0
 8007194:	2301      	movs	r3, #1
 8007196:	e7f0      	b.n	800717a <_svfiprintf_r+0x192>
 8007198:	ab03      	add	r3, sp, #12
 800719a:	462a      	mov	r2, r5
 800719c:	a904      	add	r1, sp, #16
 800719e:	4638      	mov	r0, r7
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <_svfiprintf_r+0x1f0>)
 80071a4:	f3af 8000 	nop.w
 80071a8:	1c42      	adds	r2, r0, #1
 80071aa:	4606      	mov	r6, r0
 80071ac:	d1d6      	bne.n	800715c <_svfiprintf_r+0x174>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	065b      	lsls	r3, r3, #25
 80071b2:	f53f af2d 	bmi.w	8007010 <_svfiprintf_r+0x28>
 80071b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b8:	e72c      	b.n	8007014 <_svfiprintf_r+0x2c>
 80071ba:	ab03      	add	r3, sp, #12
 80071bc:	462a      	mov	r2, r5
 80071be:	a904      	add	r1, sp, #16
 80071c0:	4638      	mov	r0, r7
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4b04      	ldr	r3, [pc, #16]	@ (80071d8 <_svfiprintf_r+0x1f0>)
 80071c6:	f000 f9bf 	bl	8007548 <_printf_i>
 80071ca:	e7ed      	b.n	80071a8 <_svfiprintf_r+0x1c0>
 80071cc:	08008d4c 	.word	0x08008d4c
 80071d0:	08008d56 	.word	0x08008d56
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f31 	.word	0x08006f31
 80071dc:	08008d52 	.word	0x08008d52

080071e0 <__sfputc_r>:
 80071e0:	6893      	ldr	r3, [r2, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	b410      	push	{r4}
 80071e8:	6093      	str	r3, [r2, #8]
 80071ea:	da08      	bge.n	80071fe <__sfputc_r+0x1e>
 80071ec:	6994      	ldr	r4, [r2, #24]
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	db01      	blt.n	80071f6 <__sfputc_r+0x16>
 80071f2:	290a      	cmp	r1, #10
 80071f4:	d103      	bne.n	80071fe <__sfputc_r+0x1e>
 80071f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fa:	f000 bb6f 	b.w	80078dc <__swbuf_r>
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	1c58      	adds	r0, r3, #1
 8007202:	6010      	str	r0, [r2, #0]
 8007204:	4608      	mov	r0, r1
 8007206:	7019      	strb	r1, [r3, #0]
 8007208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720c:	4770      	bx	lr

0800720e <__sfputs_r>:
 800720e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	4614      	mov	r4, r2
 8007216:	18d5      	adds	r5, r2, r3
 8007218:	42ac      	cmp	r4, r5
 800721a:	d101      	bne.n	8007220 <__sfputs_r+0x12>
 800721c:	2000      	movs	r0, #0
 800721e:	e007      	b.n	8007230 <__sfputs_r+0x22>
 8007220:	463a      	mov	r2, r7
 8007222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ffda 	bl	80071e0 <__sfputc_r>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d1f3      	bne.n	8007218 <__sfputs_r+0xa>
 8007230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007234 <_vfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	460d      	mov	r5, r1
 800723a:	b09d      	sub	sp, #116	@ 0x74
 800723c:	4614      	mov	r4, r2
 800723e:	4698      	mov	r8, r3
 8007240:	4606      	mov	r6, r0
 8007242:	b118      	cbz	r0, 800724c <_vfiprintf_r+0x18>
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b90b      	cbnz	r3, 800724c <_vfiprintf_r+0x18>
 8007248:	f7ff fc50 	bl	8006aec <__sinit>
 800724c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800724e:	07d9      	lsls	r1, r3, #31
 8007250:	d405      	bmi.n	800725e <_vfiprintf_r+0x2a>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d402      	bmi.n	800725e <_vfiprintf_r+0x2a>
 8007258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725a:	f7ff fd6e 	bl	8006d3a <__retarget_lock_acquire_recursive>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	071b      	lsls	r3, r3, #28
 8007262:	d501      	bpl.n	8007268 <_vfiprintf_r+0x34>
 8007264:	692b      	ldr	r3, [r5, #16]
 8007266:	b99b      	cbnz	r3, 8007290 <_vfiprintf_r+0x5c>
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f000 fb74 	bl	8007958 <__swsetup_r>
 8007270:	b170      	cbz	r0, 8007290 <_vfiprintf_r+0x5c>
 8007272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007274:	07dc      	lsls	r4, r3, #31
 8007276:	d504      	bpl.n	8007282 <_vfiprintf_r+0x4e>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	b01d      	add	sp, #116	@ 0x74
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	0598      	lsls	r0, r3, #22
 8007286:	d4f7      	bmi.n	8007278 <_vfiprintf_r+0x44>
 8007288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800728a:	f7ff fd57 	bl	8006d3c <__retarget_lock_release_recursive>
 800728e:	e7f3      	b.n	8007278 <_vfiprintf_r+0x44>
 8007290:	2300      	movs	r3, #0
 8007292:	f8cd 800c 	str.w	r8, [sp, #12]
 8007296:	f04f 0901 	mov.w	r9, #1
 800729a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8007450 <_vfiprintf_r+0x21c>
 800729e:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a0:	2320      	movs	r3, #32
 80072a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072a6:	2330      	movs	r3, #48	@ 0x30
 80072a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ac:	4623      	mov	r3, r4
 80072ae:	469a      	mov	sl, r3
 80072b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b4:	b10a      	cbz	r2, 80072ba <_vfiprintf_r+0x86>
 80072b6:	2a25      	cmp	r2, #37	@ 0x25
 80072b8:	d1f9      	bne.n	80072ae <_vfiprintf_r+0x7a>
 80072ba:	ebba 0b04 	subs.w	fp, sl, r4
 80072be:	d00b      	beq.n	80072d8 <_vfiprintf_r+0xa4>
 80072c0:	465b      	mov	r3, fp
 80072c2:	4622      	mov	r2, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ffa1 	bl	800720e <__sfputs_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	f000 80a7 	beq.w	8007420 <_vfiprintf_r+0x1ec>
 80072d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d4:	445a      	add	r2, fp
 80072d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d8:	f89a 3000 	ldrb.w	r3, [sl]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 809f 	beq.w	8007420 <_vfiprintf_r+0x1ec>
 80072e2:	2300      	movs	r3, #0
 80072e4:	f04f 32ff 	mov.w	r2, #4294967295
 80072e8:	f10a 0a01 	add.w	sl, sl, #1
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fa:	4654      	mov	r4, sl
 80072fc:	2205      	movs	r2, #5
 80072fe:	4854      	ldr	r0, [pc, #336]	@ (8007450 <_vfiprintf_r+0x21c>)
 8007300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007304:	f000 fba8 	bl	8007a58 <memchr>
 8007308:	9a04      	ldr	r2, [sp, #16]
 800730a:	b9d8      	cbnz	r0, 8007344 <_vfiprintf_r+0x110>
 800730c:	06d1      	lsls	r1, r2, #27
 800730e:	bf44      	itt	mi
 8007310:	2320      	movmi	r3, #32
 8007312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007316:	0713      	lsls	r3, r2, #28
 8007318:	bf44      	itt	mi
 800731a:	232b      	movmi	r3, #43	@ 0x2b
 800731c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007320:	f89a 3000 	ldrb.w	r3, [sl]
 8007324:	2b2a      	cmp	r3, #42	@ 0x2a
 8007326:	d015      	beq.n	8007354 <_vfiprintf_r+0x120>
 8007328:	9a07      	ldr	r2, [sp, #28]
 800732a:	4654      	mov	r4, sl
 800732c:	2000      	movs	r0, #0
 800732e:	f04f 0c0a 	mov.w	ip, #10
 8007332:	4621      	mov	r1, r4
 8007334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007338:	3b30      	subs	r3, #48	@ 0x30
 800733a:	2b09      	cmp	r3, #9
 800733c:	d94b      	bls.n	80073d6 <_vfiprintf_r+0x1a2>
 800733e:	b1b0      	cbz	r0, 800736e <_vfiprintf_r+0x13a>
 8007340:	9207      	str	r2, [sp, #28]
 8007342:	e014      	b.n	800736e <_vfiprintf_r+0x13a>
 8007344:	eba0 0308 	sub.w	r3, r0, r8
 8007348:	46a2      	mov	sl, r4
 800734a:	fa09 f303 	lsl.w	r3, r9, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	e7d2      	b.n	80072fa <_vfiprintf_r+0xc6>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	1d19      	adds	r1, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	9103      	str	r1, [sp, #12]
 800735e:	bfbb      	ittet	lt
 8007360:	425b      	neglt	r3, r3
 8007362:	f042 0202 	orrlt.w	r2, r2, #2
 8007366:	9307      	strge	r3, [sp, #28]
 8007368:	9307      	strlt	r3, [sp, #28]
 800736a:	bfb8      	it	lt
 800736c:	9204      	strlt	r2, [sp, #16]
 800736e:	7823      	ldrb	r3, [r4, #0]
 8007370:	2b2e      	cmp	r3, #46	@ 0x2e
 8007372:	d10a      	bne.n	800738a <_vfiprintf_r+0x156>
 8007374:	7863      	ldrb	r3, [r4, #1]
 8007376:	2b2a      	cmp	r3, #42	@ 0x2a
 8007378:	d132      	bne.n	80073e0 <_vfiprintf_r+0x1ac>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	3402      	adds	r4, #2
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007386:	9203      	str	r2, [sp, #12]
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007460 <_vfiprintf_r+0x22c>
 800738e:	2203      	movs	r2, #3
 8007390:	7821      	ldrb	r1, [r4, #0]
 8007392:	4650      	mov	r0, sl
 8007394:	f000 fb60 	bl	8007a58 <memchr>
 8007398:	b138      	cbz	r0, 80073aa <_vfiprintf_r+0x176>
 800739a:	eba0 000a 	sub.w	r0, r0, sl
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	9b04      	ldr	r3, [sp, #16]
 80073a2:	3401      	adds	r4, #1
 80073a4:	4082      	lsls	r2, r0
 80073a6:	4313      	orrs	r3, r2
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ae:	2206      	movs	r2, #6
 80073b0:	4828      	ldr	r0, [pc, #160]	@ (8007454 <_vfiprintf_r+0x220>)
 80073b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073b6:	f000 fb4f 	bl	8007a58 <memchr>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d03f      	beq.n	800743e <_vfiprintf_r+0x20a>
 80073be:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <_vfiprintf_r+0x224>)
 80073c0:	bb1b      	cbnz	r3, 800740a <_vfiprintf_r+0x1d6>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	3307      	adds	r3, #7
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	3308      	adds	r3, #8
 80073cc:	9303      	str	r3, [sp, #12]
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	443b      	add	r3, r7
 80073d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d4:	e76a      	b.n	80072ac <_vfiprintf_r+0x78>
 80073d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073da:	460c      	mov	r4, r1
 80073dc:	2001      	movs	r0, #1
 80073de:	e7a8      	b.n	8007332 <_vfiprintf_r+0xfe>
 80073e0:	2300      	movs	r3, #0
 80073e2:	3401      	adds	r4, #1
 80073e4:	f04f 0c0a 	mov.w	ip, #10
 80073e8:	4619      	mov	r1, r3
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	4620      	mov	r0, r4
 80073ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f2:	3a30      	subs	r2, #48	@ 0x30
 80073f4:	2a09      	cmp	r2, #9
 80073f6:	d903      	bls.n	8007400 <_vfiprintf_r+0x1cc>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c6      	beq.n	800738a <_vfiprintf_r+0x156>
 80073fc:	9105      	str	r1, [sp, #20]
 80073fe:	e7c4      	b.n	800738a <_vfiprintf_r+0x156>
 8007400:	fb0c 2101 	mla	r1, ip, r1, r2
 8007404:	4604      	mov	r4, r0
 8007406:	2301      	movs	r3, #1
 8007408:	e7f0      	b.n	80073ec <_vfiprintf_r+0x1b8>
 800740a:	ab03      	add	r3, sp, #12
 800740c:	462a      	mov	r2, r5
 800740e:	a904      	add	r1, sp, #16
 8007410:	4630      	mov	r0, r6
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	4b11      	ldr	r3, [pc, #68]	@ (800745c <_vfiprintf_r+0x228>)
 8007416:	f3af 8000 	nop.w
 800741a:	4607      	mov	r7, r0
 800741c:	1c78      	adds	r0, r7, #1
 800741e:	d1d6      	bne.n	80073ce <_vfiprintf_r+0x19a>
 8007420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007422:	07d9      	lsls	r1, r3, #31
 8007424:	d405      	bmi.n	8007432 <_vfiprintf_r+0x1fe>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	059a      	lsls	r2, r3, #22
 800742a:	d402      	bmi.n	8007432 <_vfiprintf_r+0x1fe>
 800742c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800742e:	f7ff fc85 	bl	8006d3c <__retarget_lock_release_recursive>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	065b      	lsls	r3, r3, #25
 8007436:	f53f af1f 	bmi.w	8007278 <_vfiprintf_r+0x44>
 800743a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800743c:	e71e      	b.n	800727c <_vfiprintf_r+0x48>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	462a      	mov	r2, r5
 8007442:	a904      	add	r1, sp, #16
 8007444:	4630      	mov	r0, r6
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4b04      	ldr	r3, [pc, #16]	@ (800745c <_vfiprintf_r+0x228>)
 800744a:	f000 f87d 	bl	8007548 <_printf_i>
 800744e:	e7e4      	b.n	800741a <_vfiprintf_r+0x1e6>
 8007450:	08008d4c 	.word	0x08008d4c
 8007454:	08008d56 	.word	0x08008d56
 8007458:	00000000 	.word	0x00000000
 800745c:	0800720f 	.word	0x0800720f
 8007460:	08008d52 	.word	0x08008d52

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	4607      	mov	r7, r0
 8007470:	690b      	ldr	r3, [r1, #16]
 8007472:	460c      	mov	r4, r1
 8007474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007478:	4293      	cmp	r3, r2
 800747a:	bfb8      	it	lt
 800747c:	4613      	movlt	r3, r2
 800747e:	6033      	str	r3, [r6, #0]
 8007480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc2b      	bgt.n	8007504 <_printf_common+0xa0>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d430      	bmi.n	800751e <_printf_common+0xba>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d023      	beq.n	8007512 <_printf_common+0xae>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	341a      	adds	r4, #26
 80074ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80074d2:	f003 0306 	and.w	r3, r3, #6
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf0a      	itet	eq
 80074da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80074de:	2500      	movne	r5, #0
 80074e0:	6833      	ldreq	r3, [r6, #0]
 80074e2:	f04f 0600 	mov.w	r6, #0
 80074e6:	bf08      	it	eq
 80074e8:	1aed      	subeq	r5, r5, r3
 80074ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80074ee:	bf08      	it	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bfc4      	itt	gt
 80074f8:	1a9b      	subgt	r3, r3, r2
 80074fa:	18ed      	addgt	r5, r5, r3
 80074fc:	42b5      	cmp	r5, r6
 80074fe:	d11a      	bne.n	8007536 <_printf_common+0xd2>
 8007500:	2000      	movs	r0, #0
 8007502:	e008      	b.n	8007516 <_printf_common+0xb2>
 8007504:	2301      	movs	r3, #1
 8007506:	4652      	mov	r2, sl
 8007508:	4641      	mov	r1, r8
 800750a:	4638      	mov	r0, r7
 800750c:	47c8      	blx	r9
 800750e:	3001      	adds	r0, #1
 8007510:	d103      	bne.n	800751a <_printf_common+0xb6>
 8007512:	f04f 30ff 	mov.w	r0, #4294967295
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	3501      	adds	r5, #1
 800751c:	e7c1      	b.n	80074a2 <_printf_common+0x3e>
 800751e:	18e1      	adds	r1, r4, r3
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	2030      	movs	r0, #48	@ 0x30
 8007524:	3302      	adds	r3, #2
 8007526:	4422      	add	r2, r4
 8007528:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800752c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007534:	e7c2      	b.n	80074bc <_printf_common+0x58>
 8007536:	2301      	movs	r3, #1
 8007538:	4622      	mov	r2, r4
 800753a:	4641      	mov	r1, r8
 800753c:	4638      	mov	r0, r7
 800753e:	47c8      	blx	r9
 8007540:	3001      	adds	r0, #1
 8007542:	d0e6      	beq.n	8007512 <_printf_common+0xae>
 8007544:	3601      	adds	r6, #1
 8007546:	e7d9      	b.n	80074fc <_printf_common+0x98>

08007548 <_printf_i>:
 8007548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	7e0f      	ldrb	r7, [r1, #24]
 800754e:	4691      	mov	r9, r2
 8007550:	4680      	mov	r8, r0
 8007552:	460c      	mov	r4, r1
 8007554:	2f78      	cmp	r7, #120	@ 0x78
 8007556:	469a      	mov	sl, r3
 8007558:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800755a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800755e:	d807      	bhi.n	8007570 <_printf_i+0x28>
 8007560:	2f62      	cmp	r7, #98	@ 0x62
 8007562:	d80a      	bhi.n	800757a <_printf_i+0x32>
 8007564:	2f00      	cmp	r7, #0
 8007566:	f000 80d1 	beq.w	800770c <_printf_i+0x1c4>
 800756a:	2f58      	cmp	r7, #88	@ 0x58
 800756c:	f000 80b8 	beq.w	80076e0 <_printf_i+0x198>
 8007570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007578:	e03a      	b.n	80075f0 <_printf_i+0xa8>
 800757a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800757e:	2b15      	cmp	r3, #21
 8007580:	d8f6      	bhi.n	8007570 <_printf_i+0x28>
 8007582:	a101      	add	r1, pc, #4	@ (adr r1, 8007588 <_printf_i+0x40>)
 8007584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075f5 	.word	0x080075f5
 8007590:	08007571 	.word	0x08007571
 8007594:	08007571 	.word	0x08007571
 8007598:	08007571 	.word	0x08007571
 800759c:	08007571 	.word	0x08007571
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	08007571 	.word	0x08007571
 80075a8:	08007571 	.word	0x08007571
 80075ac:	08007571 	.word	0x08007571
 80075b0:	08007571 	.word	0x08007571
 80075b4:	080076f3 	.word	0x080076f3
 80075b8:	0800761f 	.word	0x0800761f
 80075bc:	080076ad 	.word	0x080076ad
 80075c0:	08007571 	.word	0x08007571
 80075c4:	08007571 	.word	0x08007571
 80075c8:	08007715 	.word	0x08007715
 80075cc:	08007571 	.word	0x08007571
 80075d0:	0800761f 	.word	0x0800761f
 80075d4:	08007571 	.word	0x08007571
 80075d8:	08007571 	.word	0x08007571
 80075dc:	080076b5 	.word	0x080076b5
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	1d1a      	adds	r2, r3, #4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6032      	str	r2, [r6, #0]
 80075e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075f0:	2301      	movs	r3, #1
 80075f2:	e09c      	b.n	800772e <_printf_i+0x1e6>
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	6031      	str	r1, [r6, #0]
 80075fc:	0606      	lsls	r6, r0, #24
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0xbc>
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	e003      	b.n	800760c <_printf_i+0xc4>
 8007604:	0645      	lsls	r5, r0, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0xb8>
 8007608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800760c:	2d00      	cmp	r5, #0
 800760e:	da03      	bge.n	8007618 <_printf_i+0xd0>
 8007610:	232d      	movs	r3, #45	@ 0x2d
 8007612:	426d      	negs	r5, r5
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007618:	4858      	ldr	r0, [pc, #352]	@ (800777c <_printf_i+0x234>)
 800761a:	230a      	movs	r3, #10
 800761c:	e011      	b.n	8007642 <_printf_i+0xfa>
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	0608      	lsls	r0, r1, #24
 8007624:	f853 5b04 	ldr.w	r5, [r3], #4
 8007628:	d402      	bmi.n	8007630 <_printf_i+0xe8>
 800762a:	0649      	lsls	r1, r1, #25
 800762c:	bf48      	it	mi
 800762e:	b2ad      	uxthmi	r5, r5
 8007630:	2f6f      	cmp	r7, #111	@ 0x6f
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	4851      	ldr	r0, [pc, #324]	@ (800777c <_printf_i+0x234>)
 8007636:	bf14      	ite	ne
 8007638:	230a      	movne	r3, #10
 800763a:	2308      	moveq	r3, #8
 800763c:	2100      	movs	r1, #0
 800763e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007642:	6866      	ldr	r6, [r4, #4]
 8007644:	2e00      	cmp	r6, #0
 8007646:	60a6      	str	r6, [r4, #8]
 8007648:	db05      	blt.n	8007656 <_printf_i+0x10e>
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	432e      	orrs	r6, r5
 800764e:	f021 0104 	bic.w	r1, r1, #4
 8007652:	6021      	str	r1, [r4, #0]
 8007654:	d04b      	beq.n	80076ee <_printf_i+0x1a6>
 8007656:	4616      	mov	r6, r2
 8007658:	fbb5 f1f3 	udiv	r1, r5, r3
 800765c:	fb03 5711 	mls	r7, r3, r1, r5
 8007660:	5dc7      	ldrb	r7, [r0, r7]
 8007662:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007666:	462f      	mov	r7, r5
 8007668:	460d      	mov	r5, r1
 800766a:	42bb      	cmp	r3, r7
 800766c:	d9f4      	bls.n	8007658 <_printf_i+0x110>
 800766e:	2b08      	cmp	r3, #8
 8007670:	d10b      	bne.n	800768a <_printf_i+0x142>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	07df      	lsls	r7, r3, #31
 8007676:	d508      	bpl.n	800768a <_printf_i+0x142>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	6861      	ldr	r1, [r4, #4]
 800767c:	4299      	cmp	r1, r3
 800767e:	bfde      	ittt	le
 8007680:	2330      	movle	r3, #48	@ 0x30
 8007682:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007686:	f106 36ff 	addle.w	r6, r6, #4294967295
 800768a:	1b92      	subs	r2, r2, r6
 800768c:	6122      	str	r2, [r4, #16]
 800768e:	464b      	mov	r3, r9
 8007690:	aa03      	add	r2, sp, #12
 8007692:	4621      	mov	r1, r4
 8007694:	4640      	mov	r0, r8
 8007696:	f8cd a000 	str.w	sl, [sp]
 800769a:	f7ff fee3 	bl	8007464 <_printf_common>
 800769e:	3001      	adds	r0, #1
 80076a0:	d14a      	bne.n	8007738 <_printf_i+0x1f0>
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	b004      	add	sp, #16
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	f043 0320 	orr.w	r3, r3, #32
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	2778      	movs	r7, #120	@ 0x78
 80076b6:	4832      	ldr	r0, [pc, #200]	@ (8007780 <_printf_i+0x238>)
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076be:	061f      	lsls	r7, r3, #24
 80076c0:	6831      	ldr	r1, [r6, #0]
 80076c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80076c6:	d402      	bmi.n	80076ce <_printf_i+0x186>
 80076c8:	065f      	lsls	r7, r3, #25
 80076ca:	bf48      	it	mi
 80076cc:	b2ad      	uxthmi	r5, r5
 80076ce:	6031      	str	r1, [r6, #0]
 80076d0:	07d9      	lsls	r1, r3, #31
 80076d2:	bf44      	itt	mi
 80076d4:	f043 0320 	orrmi.w	r3, r3, #32
 80076d8:	6023      	strmi	r3, [r4, #0]
 80076da:	b11d      	cbz	r5, 80076e4 <_printf_i+0x19c>
 80076dc:	2310      	movs	r3, #16
 80076de:	e7ad      	b.n	800763c <_printf_i+0xf4>
 80076e0:	4826      	ldr	r0, [pc, #152]	@ (800777c <_printf_i+0x234>)
 80076e2:	e7e9      	b.n	80076b8 <_printf_i+0x170>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	f023 0320 	bic.w	r3, r3, #32
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	e7f6      	b.n	80076dc <_printf_i+0x194>
 80076ee:	4616      	mov	r6, r2
 80076f0:	e7bd      	b.n	800766e <_printf_i+0x126>
 80076f2:	6833      	ldr	r3, [r6, #0]
 80076f4:	6825      	ldr	r5, [r4, #0]
 80076f6:	1d18      	adds	r0, r3, #4
 80076f8:	6961      	ldr	r1, [r4, #20]
 80076fa:	6030      	str	r0, [r6, #0]
 80076fc:	062e      	lsls	r6, r5, #24
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	d501      	bpl.n	8007706 <_printf_i+0x1be>
 8007702:	6019      	str	r1, [r3, #0]
 8007704:	e002      	b.n	800770c <_printf_i+0x1c4>
 8007706:	0668      	lsls	r0, r5, #25
 8007708:	d5fb      	bpl.n	8007702 <_printf_i+0x1ba>
 800770a:	8019      	strh	r1, [r3, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	4616      	mov	r6, r2
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	e7bc      	b.n	800768e <_printf_i+0x146>
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	2100      	movs	r1, #0
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	6032      	str	r2, [r6, #0]
 800771c:	681e      	ldr	r6, [r3, #0]
 800771e:	6862      	ldr	r2, [r4, #4]
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f999 	bl	8007a58 <memchr>
 8007726:	b108      	cbz	r0, 800772c <_printf_i+0x1e4>
 8007728:	1b80      	subs	r0, r0, r6
 800772a:	6060      	str	r0, [r4, #4]
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	2300      	movs	r3, #0
 8007732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007736:	e7aa      	b.n	800768e <_printf_i+0x146>
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	4632      	mov	r2, r6
 800773c:	4649      	mov	r1, r9
 800773e:	4640      	mov	r0, r8
 8007740:	47d0      	blx	sl
 8007742:	3001      	adds	r0, #1
 8007744:	d0ad      	beq.n	80076a2 <_printf_i+0x15a>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	079b      	lsls	r3, r3, #30
 800774a:	d413      	bmi.n	8007774 <_printf_i+0x22c>
 800774c:	68e0      	ldr	r0, [r4, #12]
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	4298      	cmp	r0, r3
 8007752:	bfb8      	it	lt
 8007754:	4618      	movlt	r0, r3
 8007756:	e7a6      	b.n	80076a6 <_printf_i+0x15e>
 8007758:	2301      	movs	r3, #1
 800775a:	4632      	mov	r2, r6
 800775c:	4649      	mov	r1, r9
 800775e:	4640      	mov	r0, r8
 8007760:	47d0      	blx	sl
 8007762:	3001      	adds	r0, #1
 8007764:	d09d      	beq.n	80076a2 <_printf_i+0x15a>
 8007766:	3501      	adds	r5, #1
 8007768:	68e3      	ldr	r3, [r4, #12]
 800776a:	9903      	ldr	r1, [sp, #12]
 800776c:	1a5b      	subs	r3, r3, r1
 800776e:	42ab      	cmp	r3, r5
 8007770:	dcf2      	bgt.n	8007758 <_printf_i+0x210>
 8007772:	e7eb      	b.n	800774c <_printf_i+0x204>
 8007774:	2500      	movs	r5, #0
 8007776:	f104 0619 	add.w	r6, r4, #25
 800777a:	e7f5      	b.n	8007768 <_printf_i+0x220>
 800777c:	08008d5d 	.word	0x08008d5d
 8007780:	08008d6e 	.word	0x08008d6e

08007784 <__sflush_r>:
 8007784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	0716      	lsls	r6, r2, #28
 800778e:	4605      	mov	r5, r0
 8007790:	460c      	mov	r4, r1
 8007792:	d454      	bmi.n	800783e <__sflush_r+0xba>
 8007794:	684b      	ldr	r3, [r1, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc02      	bgt.n	80077a0 <__sflush_r+0x1c>
 800779a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd48      	ble.n	8007832 <__sflush_r+0xae>
 80077a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d045      	beq.n	8007832 <__sflush_r+0xae>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077ac:	682f      	ldr	r7, [r5, #0]
 80077ae:	6a21      	ldr	r1, [r4, #32]
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	d030      	beq.n	8007816 <__sflush_r+0x92>
 80077b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	0759      	lsls	r1, r3, #29
 80077ba:	d505      	bpl.n	80077c8 <__sflush_r+0x44>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077c2:	b10b      	cbz	r3, 80077c8 <__sflush_r+0x44>
 80077c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077cc:	6a21      	ldr	r1, [r4, #32]
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b0      	blx	r6
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	d106      	bne.n	80077e6 <__sflush_r+0x62>
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	291d      	cmp	r1, #29
 80077dc:	d82b      	bhi.n	8007836 <__sflush_r+0xb2>
 80077de:	4a2a      	ldr	r2, [pc, #168]	@ (8007888 <__sflush_r+0x104>)
 80077e0:	40ca      	lsrs	r2, r1
 80077e2:	07d6      	lsls	r6, r2, #31
 80077e4:	d527      	bpl.n	8007836 <__sflush_r+0xb2>
 80077e6:	2200      	movs	r2, #0
 80077e8:	04d9      	lsls	r1, r3, #19
 80077ea:	6062      	str	r2, [r4, #4]
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	d504      	bpl.n	80077fc <__sflush_r+0x78>
 80077f2:	1c42      	adds	r2, r0, #1
 80077f4:	d101      	bne.n	80077fa <__sflush_r+0x76>
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	b903      	cbnz	r3, 80077fc <__sflush_r+0x78>
 80077fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80077fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fe:	602f      	str	r7, [r5, #0]
 8007800:	b1b9      	cbz	r1, 8007832 <__sflush_r+0xae>
 8007802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007806:	4299      	cmp	r1, r3
 8007808:	d002      	beq.n	8007810 <__sflush_r+0x8c>
 800780a:	4628      	mov	r0, r5
 800780c:	f7ff fa98 	bl	8006d40 <_free_r>
 8007810:	2300      	movs	r3, #0
 8007812:	6363      	str	r3, [r4, #52]	@ 0x34
 8007814:	e00d      	b.n	8007832 <__sflush_r+0xae>
 8007816:	2301      	movs	r3, #1
 8007818:	4628      	mov	r0, r5
 800781a:	47b0      	blx	r6
 800781c:	4602      	mov	r2, r0
 800781e:	1c50      	adds	r0, r2, #1
 8007820:	d1c9      	bne.n	80077b6 <__sflush_r+0x32>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0c6      	beq.n	80077b6 <__sflush_r+0x32>
 8007828:	2b1d      	cmp	r3, #29
 800782a:	d001      	beq.n	8007830 <__sflush_r+0xac>
 800782c:	2b16      	cmp	r3, #22
 800782e:	d11d      	bne.n	800786c <__sflush_r+0xe8>
 8007830:	602f      	str	r7, [r5, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	e021      	b.n	800787a <__sflush_r+0xf6>
 8007836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783a:	b21b      	sxth	r3, r3
 800783c:	e01a      	b.n	8007874 <__sflush_r+0xf0>
 800783e:	690f      	ldr	r7, [r1, #16]
 8007840:	2f00      	cmp	r7, #0
 8007842:	d0f6      	beq.n	8007832 <__sflush_r+0xae>
 8007844:	0793      	lsls	r3, r2, #30
 8007846:	680e      	ldr	r6, [r1, #0]
 8007848:	600f      	str	r7, [r1, #0]
 800784a:	bf0c      	ite	eq
 800784c:	694b      	ldreq	r3, [r1, #20]
 800784e:	2300      	movne	r3, #0
 8007850:	eba6 0807 	sub.w	r8, r6, r7
 8007854:	608b      	str	r3, [r1, #8]
 8007856:	f1b8 0f00 	cmp.w	r8, #0
 800785a:	ddea      	ble.n	8007832 <__sflush_r+0xae>
 800785c:	4643      	mov	r3, r8
 800785e:	463a      	mov	r2, r7
 8007860:	6a21      	ldr	r1, [r4, #32]
 8007862:	4628      	mov	r0, r5
 8007864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007866:	47b0      	blx	r6
 8007868:	2800      	cmp	r0, #0
 800786a:	dc08      	bgt.n	800787e <__sflush_r+0xfa>
 800786c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787e:	4407      	add	r7, r0
 8007880:	eba8 0800 	sub.w	r8, r8, r0
 8007884:	e7e7      	b.n	8007856 <__sflush_r+0xd2>
 8007886:	bf00      	nop
 8007888:	20400001 	.word	0x20400001

0800788c <_fflush_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b913      	cbnz	r3, 800789c <_fflush_r+0x10>
 8007896:	2500      	movs	r5, #0
 8007898:	4628      	mov	r0, r5
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	b118      	cbz	r0, 80078a6 <_fflush_r+0x1a>
 800789e:	6a03      	ldr	r3, [r0, #32]
 80078a0:	b90b      	cbnz	r3, 80078a6 <_fflush_r+0x1a>
 80078a2:	f7ff f923 	bl	8006aec <__sinit>
 80078a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f3      	beq.n	8007896 <_fflush_r+0xa>
 80078ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078b0:	07d0      	lsls	r0, r2, #31
 80078b2:	d404      	bmi.n	80078be <_fflush_r+0x32>
 80078b4:	0599      	lsls	r1, r3, #22
 80078b6:	d402      	bmi.n	80078be <_fflush_r+0x32>
 80078b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ba:	f7ff fa3e 	bl	8006d3a <__retarget_lock_acquire_recursive>
 80078be:	4628      	mov	r0, r5
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7ff ff5f 	bl	8007784 <__sflush_r>
 80078c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c8:	4605      	mov	r5, r0
 80078ca:	07da      	lsls	r2, r3, #31
 80078cc:	d4e4      	bmi.n	8007898 <_fflush_r+0xc>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	059b      	lsls	r3, r3, #22
 80078d2:	d4e1      	bmi.n	8007898 <_fflush_r+0xc>
 80078d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d6:	f7ff fa31 	bl	8006d3c <__retarget_lock_release_recursive>
 80078da:	e7dd      	b.n	8007898 <_fflush_r+0xc>

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6a03      	ldr	r3, [r0, #32]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f7ff f8ff 	bl	8006aec <__sinit>
 80078ee:	69a3      	ldr	r3, [r4, #24]
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	071a      	lsls	r2, r3, #28
 80078f6:	d501      	bpl.n	80078fc <__swbuf_r+0x20>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	b943      	cbnz	r3, 800790e <__swbuf_r+0x32>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f82a 	bl	8007958 <__swsetup_r>
 8007904:	b118      	cbz	r0, 800790e <__swbuf_r+0x32>
 8007906:	f04f 37ff 	mov.w	r7, #4294967295
 800790a:	4638      	mov	r0, r7
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	b2f6      	uxtb	r6, r6
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	4637      	mov	r7, r6
 8007916:	1a98      	subs	r0, r3, r2
 8007918:	6963      	ldr	r3, [r4, #20]
 800791a:	4283      	cmp	r3, r0
 800791c:	dc05      	bgt.n	800792a <__swbuf_r+0x4e>
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f7ff ffb3 	bl	800788c <_fflush_r>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1ed      	bne.n	8007906 <__swbuf_r+0x2a>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	3b01      	subs	r3, #1
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	701e      	strb	r6, [r3, #0]
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	6962      	ldr	r2, [r4, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d004      	beq.n	800794a <__swbuf_r+0x6e>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	07db      	lsls	r3, r3, #31
 8007944:	d5e1      	bpl.n	800790a <__swbuf_r+0x2e>
 8007946:	2e0a      	cmp	r6, #10
 8007948:	d1df      	bne.n	800790a <__swbuf_r+0x2e>
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f7ff ff9d 	bl	800788c <_fflush_r>
 8007952:	2800      	cmp	r0, #0
 8007954:	d0d9      	beq.n	800790a <__swbuf_r+0x2e>
 8007956:	e7d6      	b.n	8007906 <__swbuf_r+0x2a>

08007958 <__swsetup_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4b29      	ldr	r3, [pc, #164]	@ (8007a00 <__swsetup_r+0xa8>)
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	b118      	cbz	r0, 800796c <__swsetup_r+0x14>
 8007964:	6a03      	ldr	r3, [r0, #32]
 8007966:	b90b      	cbnz	r3, 800796c <__swsetup_r+0x14>
 8007968:	f7ff f8c0 	bl	8006aec <__sinit>
 800796c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007970:	0719      	lsls	r1, r3, #28
 8007972:	d422      	bmi.n	80079ba <__swsetup_r+0x62>
 8007974:	06da      	lsls	r2, r3, #27
 8007976:	d407      	bmi.n	8007988 <__swsetup_r+0x30>
 8007978:	2209      	movs	r2, #9
 800797a:	602a      	str	r2, [r5, #0]
 800797c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	e033      	b.n	80079f0 <__swsetup_r+0x98>
 8007988:	0758      	lsls	r0, r3, #29
 800798a:	d512      	bpl.n	80079b2 <__swsetup_r+0x5a>
 800798c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798e:	b141      	cbz	r1, 80079a2 <__swsetup_r+0x4a>
 8007990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007994:	4299      	cmp	r1, r3
 8007996:	d002      	beq.n	800799e <__swsetup_r+0x46>
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff f9d1 	bl	8006d40 <_free_r>
 800799e:	2300      	movs	r3, #0
 80079a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	2300      	movs	r3, #0
 80079ac:	6063      	str	r3, [r4, #4]
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	b94b      	cbnz	r3, 80079d2 <__swsetup_r+0x7a>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c8:	d003      	beq.n	80079d2 <__swsetup_r+0x7a>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 f8b1 	bl	8007b34 <__smakebuf_r>
 80079d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d6:	f013 0201 	ands.w	r2, r3, #1
 80079da:	d00a      	beq.n	80079f2 <__swsetup_r+0x9a>
 80079dc:	2200      	movs	r2, #0
 80079de:	60a2      	str	r2, [r4, #8]
 80079e0:	6962      	ldr	r2, [r4, #20]
 80079e2:	4252      	negs	r2, r2
 80079e4:	61a2      	str	r2, [r4, #24]
 80079e6:	6922      	ldr	r2, [r4, #16]
 80079e8:	b942      	cbnz	r2, 80079fc <__swsetup_r+0xa4>
 80079ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079ee:	d1c5      	bne.n	800797c <__swsetup_r+0x24>
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	0799      	lsls	r1, r3, #30
 80079f4:	bf58      	it	pl
 80079f6:	6962      	ldrpl	r2, [r4, #20]
 80079f8:	60a2      	str	r2, [r4, #8]
 80079fa:	e7f4      	b.n	80079e6 <__swsetup_r+0x8e>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7f7      	b.n	80079f0 <__swsetup_r+0x98>
 8007a00:	20000040 	.word	0x20000040

08007a04 <memmove>:
 8007a04:	4288      	cmp	r0, r1
 8007a06:	b510      	push	{r4, lr}
 8007a08:	eb01 0402 	add.w	r4, r1, r2
 8007a0c:	d902      	bls.n	8007a14 <memmove+0x10>
 8007a0e:	4284      	cmp	r4, r0
 8007a10:	4623      	mov	r3, r4
 8007a12:	d807      	bhi.n	8007a24 <memmove+0x20>
 8007a14:	1e43      	subs	r3, r0, #1
 8007a16:	42a1      	cmp	r1, r4
 8007a18:	d008      	beq.n	8007a2c <memmove+0x28>
 8007a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a22:	e7f8      	b.n	8007a16 <memmove+0x12>
 8007a24:	4402      	add	r2, r0
 8007a26:	4601      	mov	r1, r0
 8007a28:	428a      	cmp	r2, r1
 8007a2a:	d100      	bne.n	8007a2e <memmove+0x2a>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a36:	e7f7      	b.n	8007a28 <memmove+0x24>

08007a38 <_sbrk_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4d05      	ldr	r5, [pc, #20]	@ (8007a54 <_sbrk_r+0x1c>)
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7f9 ff5c 	bl	8001900 <_sbrk>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_sbrk_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_sbrk_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	200004dc 	.word	0x200004dc

08007a58 <memchr>:
 8007a58:	b2c9      	uxtb	r1, r1
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4402      	add	r2, r0
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	4293      	cmp	r3, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	d101      	bne.n	8007a6a <memchr+0x12>
 8007a66:	2000      	movs	r0, #0
 8007a68:	e003      	b.n	8007a72 <memchr+0x1a>
 8007a6a:	7804      	ldrb	r4, [r0, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	428c      	cmp	r4, r1
 8007a70:	d1f6      	bne.n	8007a60 <memchr+0x8>
 8007a72:	bd10      	pop	{r4, pc}

08007a74 <memcpy>:
 8007a74:	440a      	add	r2, r1
 8007a76:	1e43      	subs	r3, r0, #1
 8007a78:	4291      	cmp	r1, r2
 8007a7a:	d100      	bne.n	8007a7e <memcpy+0xa>
 8007a7c:	4770      	bx	lr
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a84:	4291      	cmp	r1, r2
 8007a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8a:	d1f9      	bne.n	8007a80 <memcpy+0xc>
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <_realloc_r>:
 8007a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	4607      	mov	r7, r0
 8007a94:	4614      	mov	r4, r2
 8007a96:	460d      	mov	r5, r1
 8007a98:	b921      	cbnz	r1, 8007aa4 <_realloc_r+0x16>
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	f7ff b9ba 	b.w	8006e18 <_malloc_r>
 8007aa4:	b92a      	cbnz	r2, 8007ab2 <_realloc_r+0x24>
 8007aa6:	4625      	mov	r5, r4
 8007aa8:	f7ff f94a 	bl	8006d40 <_free_r>
 8007aac:	4628      	mov	r0, r5
 8007aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab2:	f000 f89d 	bl	8007bf0 <_malloc_usable_size_r>
 8007ab6:	4284      	cmp	r4, r0
 8007ab8:	4606      	mov	r6, r0
 8007aba:	d802      	bhi.n	8007ac2 <_realloc_r+0x34>
 8007abc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ac0:	d8f4      	bhi.n	8007aac <_realloc_r+0x1e>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff f9a7 	bl	8006e18 <_malloc_r>
 8007aca:	4680      	mov	r8, r0
 8007acc:	b908      	cbnz	r0, 8007ad2 <_realloc_r+0x44>
 8007ace:	4645      	mov	r5, r8
 8007ad0:	e7ec      	b.n	8007aac <_realloc_r+0x1e>
 8007ad2:	42b4      	cmp	r4, r6
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	bf28      	it	cs
 8007ada:	4632      	movcs	r2, r6
 8007adc:	f7ff ffca 	bl	8007a74 <memcpy>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7ff f92c 	bl	8006d40 <_free_r>
 8007ae8:	e7f1      	b.n	8007ace <_realloc_r+0x40>

08007aea <__swhatbuf_r>:
 8007aea:	b570      	push	{r4, r5, r6, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	b096      	sub	sp, #88	@ 0x58
 8007af4:	4615      	mov	r5, r2
 8007af6:	2900      	cmp	r1, #0
 8007af8:	461e      	mov	r6, r3
 8007afa:	da0c      	bge.n	8007b16 <__swhatbuf_r+0x2c>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	2100      	movs	r1, #0
 8007b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b04:	bf14      	ite	ne
 8007b06:	2340      	movne	r3, #64	@ 0x40
 8007b08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	6031      	str	r1, [r6, #0]
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	b016      	add	sp, #88	@ 0x58
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	466a      	mov	r2, sp
 8007b18:	f000 f848 	bl	8007bac <_fstat_r>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dbed      	blt.n	8007afc <__swhatbuf_r+0x12>
 8007b20:	9901      	ldr	r1, [sp, #4]
 8007b22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b2a:	4259      	negs	r1, r3
 8007b2c:	4159      	adcs	r1, r3
 8007b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b32:	e7eb      	b.n	8007b0c <__swhatbuf_r+0x22>

08007b34 <__smakebuf_r>:
 8007b34:	898b      	ldrh	r3, [r1, #12]
 8007b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b38:	079d      	lsls	r5, r3, #30
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	d507      	bpl.n	8007b50 <__smakebuf_r+0x1c>
 8007b40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	6163      	str	r3, [r4, #20]
 8007b4c:	b003      	add	sp, #12
 8007b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b50:	ab01      	add	r3, sp, #4
 8007b52:	466a      	mov	r2, sp
 8007b54:	f7ff ffc9 	bl	8007aea <__swhatbuf_r>
 8007b58:	9f00      	ldr	r7, [sp, #0]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7ff f95a 	bl	8006e18 <_malloc_r>
 8007b64:	b948      	cbnz	r0, 8007b7a <__smakebuf_r+0x46>
 8007b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6a:	059a      	lsls	r2, r3, #22
 8007b6c:	d4ee      	bmi.n	8007b4c <__smakebuf_r+0x18>
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	f043 0302 	orr.w	r3, r3, #2
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	e7e2      	b.n	8007b40 <__smakebuf_r+0xc>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	6020      	str	r0, [r4, #0]
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	9b01      	ldr	r3, [sp, #4]
 8007b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b8a:	b15b      	cbz	r3, 8007ba4 <__smakebuf_r+0x70>
 8007b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b90:	4630      	mov	r0, r6
 8007b92:	f000 f81d 	bl	8007bd0 <_isatty_r>
 8007b96:	b128      	cbz	r0, 8007ba4 <__smakebuf_r+0x70>
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	431d      	orrs	r5, r3
 8007ba8:	81a5      	strh	r5, [r4, #12]
 8007baa:	e7cf      	b.n	8007b4c <__smakebuf_r+0x18>

08007bac <_fstat_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4d06      	ldr	r5, [pc, #24]	@ (8007bcc <_fstat_r+0x20>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7f9 fe78 	bl	80018ae <_fstat>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_fstat_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_fstat_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	200004dc 	.word	0x200004dc

08007bd0 <_isatty_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4d05      	ldr	r5, [pc, #20]	@ (8007bec <_isatty_r+0x1c>)
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7f9 fe77 	bl	80018ce <_isatty>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_isatty_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_isatty_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200004dc 	.word	0x200004dc

08007bf0 <_malloc_usable_size_r>:
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f18      	subs	r0, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfbc      	itt	lt
 8007bfa:	580b      	ldrlt	r3, [r1, r0]
 8007bfc:	18c0      	addlt	r0, r0, r3
 8007bfe:	4770      	bx	lr

08007c00 <sin>:
 8007c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c02:	ec53 2b10 	vmov	r2, r3, d0
 8007c06:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c0a:	4825      	ldr	r0, [pc, #148]	@ (8007ca0 <sin+0xa0>)
 8007c0c:	4281      	cmp	r1, r0
 8007c0e:	d807      	bhi.n	8007c20 <sin+0x20>
 8007c10:	2000      	movs	r0, #0
 8007c12:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007c98 <sin+0x98>
 8007c16:	b005      	add	sp, #20
 8007c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c1c:	f000 b90c 	b.w	8007e38 <__kernel_sin>
 8007c20:	4820      	ldr	r0, [pc, #128]	@ (8007ca4 <sin+0xa4>)
 8007c22:	4281      	cmp	r1, r0
 8007c24:	d908      	bls.n	8007c38 <sin+0x38>
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f7f8 fb09 	bl	8000240 <__aeabi_dsub>
 8007c2e:	ec41 0b10 	vmov	d0, r0, r1
 8007c32:	b005      	add	sp, #20
 8007c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c38:	4668      	mov	r0, sp
 8007c3a:	f000 f9b9 	bl	8007fb0 <__ieee754_rem_pio2>
 8007c3e:	f000 0003 	and.w	r0, r0, #3
 8007c42:	2801      	cmp	r0, #1
 8007c44:	d00c      	beq.n	8007c60 <sin+0x60>
 8007c46:	2802      	cmp	r0, #2
 8007c48:	d011      	beq.n	8007c6e <sin+0x6e>
 8007c4a:	b9e8      	cbnz	r0, 8007c88 <sin+0x88>
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c52:	ed9d 0b00 	vldr	d0, [sp]
 8007c56:	f000 f8ef 	bl	8007e38 <__kernel_sin>
 8007c5a:	ec51 0b10 	vmov	r0, r1, d0
 8007c5e:	e7e6      	b.n	8007c2e <sin+0x2e>
 8007c60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c64:	ed9d 0b00 	vldr	d0, [sp]
 8007c68:	f000 f81e 	bl	8007ca8 <__kernel_cos>
 8007c6c:	e7f5      	b.n	8007c5a <sin+0x5a>
 8007c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c72:	ed9d 0b00 	vldr	d0, [sp]
 8007c76:	2001      	movs	r0, #1
 8007c78:	f000 f8de 	bl	8007e38 <__kernel_sin>
 8007c7c:	ec53 2b10 	vmov	r2, r3, d0
 8007c80:	4610      	mov	r0, r2
 8007c82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007c86:	e7d2      	b.n	8007c2e <sin+0x2e>
 8007c88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c8c:	ed9d 0b00 	vldr	d0, [sp]
 8007c90:	f000 f80a 	bl	8007ca8 <__kernel_cos>
 8007c94:	e7f2      	b.n	8007c7c <sin+0x7c>
 8007c96:	bf00      	nop
	...
 8007ca0:	3fe921fb 	.word	0x3fe921fb
 8007ca4:	7fefffff 	.word	0x7fefffff

08007ca8 <__kernel_cos>:
 8007ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	ec57 6b10 	vmov	r6, r7, d0
 8007cb0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007cb4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007cb8:	ed8d 1b00 	vstr	d1, [sp]
 8007cbc:	d206      	bcs.n	8007ccc <__kernel_cos+0x24>
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 ff0f 	bl	8000ae4 <__aeabi_d2iz>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f000 8088 	beq.w	8007ddc <__kernel_cos+0x134>
 8007ccc:	4632      	mov	r2, r6
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 fc6c 	bl	80005b0 <__aeabi_dmul>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460d      	mov	r5, r1
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4b50      	ldr	r3, [pc, #320]	@ (8007e20 <__kernel_cos+0x178>)
 8007ce0:	f7f8 fc66 	bl	80005b0 <__aeabi_dmul>
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	468b      	mov	fp, r1
 8007ce8:	4620      	mov	r0, r4
 8007cea:	4629      	mov	r1, r5
 8007cec:	a33e      	add	r3, pc, #248	@ (adr r3, 8007de8 <__kernel_cos+0x140>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fc5d 	bl	80005b0 <__aeabi_dmul>
 8007cf6:	a33e      	add	r3, pc, #248	@ (adr r3, 8007df0 <__kernel_cos+0x148>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 faa2 	bl	8000244 <__adddf3>
 8007d00:	4622      	mov	r2, r4
 8007d02:	462b      	mov	r3, r5
 8007d04:	f7f8 fc54 	bl	80005b0 <__aeabi_dmul>
 8007d08:	a33b      	add	r3, pc, #236	@ (adr r3, 8007df8 <__kernel_cos+0x150>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f7f8 fa97 	bl	8000240 <__aeabi_dsub>
 8007d12:	4622      	mov	r2, r4
 8007d14:	462b      	mov	r3, r5
 8007d16:	f7f8 fc4b 	bl	80005b0 <__aeabi_dmul>
 8007d1a:	a339      	add	r3, pc, #228	@ (adr r3, 8007e00 <__kernel_cos+0x158>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f7f8 fa90 	bl	8000244 <__adddf3>
 8007d24:	4622      	mov	r2, r4
 8007d26:	462b      	mov	r3, r5
 8007d28:	f7f8 fc42 	bl	80005b0 <__aeabi_dmul>
 8007d2c:	a336      	add	r3, pc, #216	@ (adr r3, 8007e08 <__kernel_cos+0x160>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fa85 	bl	8000240 <__aeabi_dsub>
 8007d36:	4622      	mov	r2, r4
 8007d38:	462b      	mov	r3, r5
 8007d3a:	f7f8 fc39 	bl	80005b0 <__aeabi_dmul>
 8007d3e:	a334      	add	r3, pc, #208	@ (adr r3, 8007e10 <__kernel_cos+0x168>)
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 fa7e 	bl	8000244 <__adddf3>
 8007d48:	4622      	mov	r2, r4
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	f7f8 fc30 	bl	80005b0 <__aeabi_dmul>
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	f7f8 fc2c 	bl	80005b0 <__aeabi_dmul>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	4639      	mov	r1, r7
 8007d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d64:	f7f8 fc24 	bl	80005b0 <__aeabi_dmul>
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7f8 fa66 	bl	8000240 <__aeabi_dsub>
 8007d74:	4b2b      	ldr	r3, [pc, #172]	@ (8007e24 <__kernel_cos+0x17c>)
 8007d76:	4606      	mov	r6, r0
 8007d78:	460f      	mov	r7, r1
 8007d7a:	4598      	cmp	r8, r3
 8007d7c:	d810      	bhi.n	8007da0 <__kernel_cos+0xf8>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4650      	mov	r0, sl
 8007d84:	4659      	mov	r1, fp
 8007d86:	f7f8 fa5b 	bl	8000240 <__aeabi_dsub>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	2000      	movs	r0, #0
 8007d90:	4925      	ldr	r1, [pc, #148]	@ (8007e28 <__kernel_cos+0x180>)
 8007d92:	f7f8 fa55 	bl	8000240 <__aeabi_dsub>
 8007d96:	ec41 0b10 	vmov	d0, r0, r1
 8007d9a:	b003      	add	sp, #12
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	4b22      	ldr	r3, [pc, #136]	@ (8007e2c <__kernel_cos+0x184>)
 8007da2:	2400      	movs	r4, #0
 8007da4:	2000      	movs	r0, #0
 8007da6:	4920      	ldr	r1, [pc, #128]	@ (8007e28 <__kernel_cos+0x180>)
 8007da8:	4598      	cmp	r8, r3
 8007daa:	4622      	mov	r2, r4
 8007dac:	bf94      	ite	ls
 8007dae:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007db2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007e30 <__kernel_cos+0x188>)
 8007db4:	462b      	mov	r3, r5
 8007db6:	f7f8 fa43 	bl	8000240 <__aeabi_dsub>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	4650      	mov	r0, sl
 8007dc4:	4659      	mov	r1, fp
 8007dc6:	f7f8 fa3b 	bl	8000240 <__aeabi_dsub>
 8007dca:	4632      	mov	r2, r6
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f7f8 fa37 	bl	8000240 <__aeabi_dsub>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4649      	mov	r1, r9
 8007dda:	e7da      	b.n	8007d92 <__kernel_cos+0xea>
 8007ddc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007e18 <__kernel_cos+0x170>
 8007de0:	e7db      	b.n	8007d9a <__kernel_cos+0xf2>
 8007de2:	bf00      	nop
 8007de4:	f3af 8000 	nop.w
 8007de8:	be8838d4 	.word	0xbe8838d4
 8007dec:	bda8fae9 	.word	0xbda8fae9
 8007df0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007df4:	3e21ee9e 	.word	0x3e21ee9e
 8007df8:	809c52ad 	.word	0x809c52ad
 8007dfc:	3e927e4f 	.word	0x3e927e4f
 8007e00:	19cb1590 	.word	0x19cb1590
 8007e04:	3efa01a0 	.word	0x3efa01a0
 8007e08:	16c15177 	.word	0x16c15177
 8007e0c:	3f56c16c 	.word	0x3f56c16c
 8007e10:	5555554c 	.word	0x5555554c
 8007e14:	3fa55555 	.word	0x3fa55555
 8007e18:	00000000 	.word	0x00000000
 8007e1c:	3ff00000 	.word	0x3ff00000
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	3fd33332 	.word	0x3fd33332
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	3fe90000 	.word	0x3fe90000
 8007e30:	3fd20000 	.word	0x3fd20000
 8007e34:	00000000 	.word	0x00000000

08007e38 <__kernel_sin>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ec55 4b10 	vmov	r4, r5, d0
 8007e40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007e44:	b085      	sub	sp, #20
 8007e46:	4680      	mov	r8, r0
 8007e48:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007e4c:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007e50:	d205      	bcs.n	8007e5e <__kernel_sin+0x26>
 8007e52:	4620      	mov	r0, r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7f8 fe45 	bl	8000ae4 <__aeabi_d2iz>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d052      	beq.n	8007f04 <__kernel_sin+0xcc>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fba3 	bl	80005b0 <__aeabi_dmul>
 8007e6a:	4682      	mov	sl, r0
 8007e6c:	468b      	mov	fp, r1
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 fb9b 	bl	80005b0 <__aeabi_dmul>
 8007e7a:	a342      	add	r3, pc, #264	@ (adr r3, 8007f84 <__kernel_sin+0x14c>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	e9cd 0100 	strd	r0, r1, [sp]
 8007e84:	4650      	mov	r0, sl
 8007e86:	4659      	mov	r1, fp
 8007e88:	f7f8 fb92 	bl	80005b0 <__aeabi_dmul>
 8007e8c:	a33f      	add	r3, pc, #252	@ (adr r3, 8007f8c <__kernel_sin+0x154>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f9d5 	bl	8000240 <__aeabi_dsub>
 8007e96:	4652      	mov	r2, sl
 8007e98:	465b      	mov	r3, fp
 8007e9a:	f7f8 fb89 	bl	80005b0 <__aeabi_dmul>
 8007e9e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007f94 <__kernel_sin+0x15c>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f9ce 	bl	8000244 <__adddf3>
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	465b      	mov	r3, fp
 8007eac:	f7f8 fb80 	bl	80005b0 <__aeabi_dmul>
 8007eb0:	a33a      	add	r3, pc, #232	@ (adr r3, 8007f9c <__kernel_sin+0x164>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f9c3 	bl	8000240 <__aeabi_dsub>
 8007eba:	4652      	mov	r2, sl
 8007ebc:	465b      	mov	r3, fp
 8007ebe:	f7f8 fb77 	bl	80005b0 <__aeabi_dmul>
 8007ec2:	a338      	add	r3, pc, #224	@ (adr r3, 8007fa4 <__kernel_sin+0x16c>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f9bc 	bl	8000244 <__adddf3>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	d11b      	bne.n	8007f0e <__kernel_sin+0xd6>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4650      	mov	r0, sl
 8007edc:	4659      	mov	r1, fp
 8007ede:	f7f8 fb67 	bl	80005b0 <__aeabi_dmul>
 8007ee2:	a325      	add	r3, pc, #148	@ (adr r3, 8007f78 <__kernel_sin+0x140>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f9aa 	bl	8000240 <__aeabi_dsub>
 8007eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef0:	f7f8 fb5e 	bl	80005b0 <__aeabi_dmul>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 f9a2 	bl	8000244 <__adddf3>
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	ec45 4b10 	vmov	d0, r4, r5
 8007f08:	b005      	add	sp, #20
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4b1b      	ldr	r3, [pc, #108]	@ (8007f80 <__kernel_sin+0x148>)
 8007f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f16:	f7f8 fb4b 	bl	80005b0 <__aeabi_dmul>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	4632      	mov	r2, r6
 8007f20:	463b      	mov	r3, r7
 8007f22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f26:	f7f8 fb43 	bl	80005b0 <__aeabi_dmul>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4640      	mov	r0, r8
 8007f30:	4649      	mov	r1, r9
 8007f32:	f7f8 f985 	bl	8000240 <__aeabi_dsub>
 8007f36:	4652      	mov	r2, sl
 8007f38:	465b      	mov	r3, fp
 8007f3a:	f7f8 fb39 	bl	80005b0 <__aeabi_dmul>
 8007f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f42:	f7f8 f97d 	bl	8000240 <__aeabi_dsub>
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	a30b      	add	r3, pc, #44	@ (adr r3, 8007f78 <__kernel_sin+0x140>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f54:	f7f8 fb2c 	bl	80005b0 <__aeabi_dmul>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 f970 	bl	8000244 <__adddf3>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	f7f8 f968 	bl	8000240 <__aeabi_dsub>
 8007f70:	e7c6      	b.n	8007f00 <__kernel_sin+0xc8>
 8007f72:	bf00      	nop
 8007f74:	f3af 8000 	nop.w
 8007f78:	55555549 	.word	0x55555549
 8007f7c:	3fc55555 	.word	0x3fc55555
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	5acfd57c 	.word	0x5acfd57c
 8007f88:	3de5d93a 	.word	0x3de5d93a
 8007f8c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f90:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f94:	57b1fe7d 	.word	0x57b1fe7d
 8007f98:	3ec71de3 	.word	0x3ec71de3
 8007f9c:	19c161d5 	.word	0x19c161d5
 8007fa0:	3f2a01a0 	.word	0x3f2a01a0
 8007fa4:	1110f8a6 	.word	0x1110f8a6
 8007fa8:	3f811111 	.word	0x3f811111
 8007fac:	00000000 	.word	0x00000000

08007fb0 <__ieee754_rem_pio2>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	ec57 6b10 	vmov	r6, r7, d0
 8007fb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007fbc:	4bc4      	ldr	r3, [pc, #784]	@ (80082d0 <__ieee754_rem_pio2+0x320>)
 8007fbe:	b08d      	sub	sp, #52	@ 0x34
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4598      	cmp	r8, r3
 8007fc4:	9704      	str	r7, [sp, #16]
 8007fc6:	d807      	bhi.n	8007fd8 <__ieee754_rem_pio2+0x28>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	ed80 0b00 	vstr	d0, [r0]
 8007fd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007fd4:	2500      	movs	r5, #0
 8007fd6:	e028      	b.n	800802a <__ieee754_rem_pio2+0x7a>
 8007fd8:	4bbe      	ldr	r3, [pc, #760]	@ (80082d4 <__ieee754_rem_pio2+0x324>)
 8007fda:	4598      	cmp	r8, r3
 8007fdc:	d878      	bhi.n	80080d0 <__ieee754_rem_pio2+0x120>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4dbd      	ldr	r5, [pc, #756]	@ (80082d8 <__ieee754_rem_pio2+0x328>)
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8008298 <__ieee754_rem_pio2+0x2e8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	dd38      	ble.n	8008062 <__ieee754_rem_pio2+0xb2>
 8007ff0:	f7f8 f926 	bl	8000240 <__aeabi_dsub>
 8007ff4:	45a8      	cmp	r8, r5
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	d01a      	beq.n	8008032 <__ieee754_rem_pio2+0x82>
 8007ffc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80082a0 <__ieee754_rem_pio2+0x2f0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f91d 	bl	8000240 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 f915 	bl	8000240 <__aeabi_dsub>
 8008016:	a3a2      	add	r3, pc, #648	@ (adr r3, 80082a0 <__ieee754_rem_pio2+0x2f0>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	2501      	movs	r5, #1
 800801e:	f7f8 f90f 	bl	8000240 <__aeabi_dsub>
 8008022:	e9c4 8900 	strd	r8, r9, [r4]
 8008026:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800802a:	4628      	mov	r0, r5
 800802c:	b00d      	add	sp, #52	@ 0x34
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	a39d      	add	r3, pc, #628	@ (adr r3, 80082a8 <__ieee754_rem_pio2+0x2f8>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f902 	bl	8000240 <__aeabi_dsub>
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	a39b      	add	r3, pc, #620	@ (adr r3, 80082b0 <__ieee754_rem_pio2+0x300>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f8fb 	bl	8000240 <__aeabi_dsub>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f8f3 	bl	8000240 <__aeabi_dsub>
 800805a:	a395      	add	r3, pc, #596	@ (adr r3, 80082b0 <__ieee754_rem_pio2+0x300>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	e7dc      	b.n	800801c <__ieee754_rem_pio2+0x6c>
 8008062:	f7f8 f8ef 	bl	8000244 <__adddf3>
 8008066:	45a8      	cmp	r8, r5
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	d018      	beq.n	80080a0 <__ieee754_rem_pio2+0xf0>
 800806e:	a38c      	add	r3, pc, #560	@ (adr r3, 80082a0 <__ieee754_rem_pio2+0x2f0>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8e6 	bl	8000244 <__adddf3>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f8dc 	bl	8000240 <__aeabi_dsub>
 8008088:	a385      	add	r3, pc, #532	@ (adr r3, 80082a0 <__ieee754_rem_pio2+0x2f0>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f8d9 	bl	8000244 <__adddf3>
 8008092:	f04f 35ff 	mov.w	r5, #4294967295
 8008096:	e9c4 8900 	strd	r8, r9, [r4]
 800809a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800809e:	e7c4      	b.n	800802a <__ieee754_rem_pio2+0x7a>
 80080a0:	a381      	add	r3, pc, #516	@ (adr r3, 80082a8 <__ieee754_rem_pio2+0x2f8>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f7f8 f8cd 	bl	8000244 <__adddf3>
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	a380      	add	r3, pc, #512	@ (adr r3, 80082b0 <__ieee754_rem_pio2+0x300>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 f8c6 	bl	8000244 <__adddf3>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4680      	mov	r8, r0
 80080be:	4689      	mov	r9, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 f8bc 	bl	8000240 <__aeabi_dsub>
 80080c8:	a379      	add	r3, pc, #484	@ (adr r3, 80082b0 <__ieee754_rem_pio2+0x300>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e7de      	b.n	800808e <__ieee754_rem_pio2+0xde>
 80080d0:	4b82      	ldr	r3, [pc, #520]	@ (80082dc <__ieee754_rem_pio2+0x32c>)
 80080d2:	4598      	cmp	r8, r3
 80080d4:	f200 80d1 	bhi.w	800827a <__ieee754_rem_pio2+0x2ca>
 80080d8:	f000 f966 	bl	80083a8 <fabs>
 80080dc:	ec57 6b10 	vmov	r6, r7, d0
 80080e0:	a375      	add	r3, pc, #468	@ (adr r3, 80082b8 <__ieee754_rem_pio2+0x308>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 fa61 	bl	80005b0 <__aeabi_dmul>
 80080ee:	2200      	movs	r2, #0
 80080f0:	4b7b      	ldr	r3, [pc, #492]	@ (80082e0 <__ieee754_rem_pio2+0x330>)
 80080f2:	f7f8 f8a7 	bl	8000244 <__adddf3>
 80080f6:	f7f8 fcf5 	bl	8000ae4 <__aeabi_d2iz>
 80080fa:	4605      	mov	r5, r0
 80080fc:	f7f8 f9ee 	bl	80004dc <__aeabi_i2d>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008108:	a363      	add	r3, pc, #396	@ (adr r3, 8008298 <__ieee754_rem_pio2+0x2e8>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 fa4f 	bl	80005b0 <__aeabi_dmul>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 f891 	bl	8000240 <__aeabi_dsub>
 800811e:	4682      	mov	sl, r0
 8008120:	468b      	mov	fp, r1
 8008122:	a35f      	add	r3, pc, #380	@ (adr r3, 80082a0 <__ieee754_rem_pio2+0x2f0>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800812c:	f7f8 fa40 	bl	80005b0 <__aeabi_dmul>
 8008130:	2d1f      	cmp	r5, #31
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	dc0c      	bgt.n	8008152 <__ieee754_rem_pio2+0x1a2>
 8008138:	1e6a      	subs	r2, r5, #1
 800813a:	4b6a      	ldr	r3, [pc, #424]	@ (80082e4 <__ieee754_rem_pio2+0x334>)
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	4543      	cmp	r3, r8
 8008142:	d006      	beq.n	8008152 <__ieee754_rem_pio2+0x1a2>
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	4650      	mov	r0, sl
 800814a:	4659      	mov	r1, fp
 800814c:	f7f8 f878 	bl	8000240 <__aeabi_dsub>
 8008150:	e00e      	b.n	8008170 <__ieee754_rem_pio2+0x1c0>
 8008152:	463b      	mov	r3, r7
 8008154:	4632      	mov	r2, r6
 8008156:	4650      	mov	r0, sl
 8008158:	4659      	mov	r1, fp
 800815a:	f7f8 f871 	bl	8000240 <__aeabi_dsub>
 800815e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008168:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800816c:	2b10      	cmp	r3, #16
 800816e:	dc02      	bgt.n	8008176 <__ieee754_rem_pio2+0x1c6>
 8008170:	e9c4 0100 	strd	r0, r1, [r4]
 8008174:	e039      	b.n	80081ea <__ieee754_rem_pio2+0x23a>
 8008176:	a34c      	add	r3, pc, #304	@ (adr r3, 80082a8 <__ieee754_rem_pio2+0x2f8>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008180:	f7f8 fa16 	bl	80005b0 <__aeabi_dmul>
 8008184:	4606      	mov	r6, r0
 8008186:	460f      	mov	r7, r1
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	f7f8 f856 	bl	8000240 <__aeabi_dsub>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4680      	mov	r8, r0
 800819a:	4689      	mov	r9, r1
 800819c:	4650      	mov	r0, sl
 800819e:	4659      	mov	r1, fp
 80081a0:	f7f8 f84e 	bl	8000240 <__aeabi_dsub>
 80081a4:	4632      	mov	r2, r6
 80081a6:	463b      	mov	r3, r7
 80081a8:	f7f8 f84a 	bl	8000240 <__aeabi_dsub>
 80081ac:	4606      	mov	r6, r0
 80081ae:	460f      	mov	r7, r1
 80081b0:	a33f      	add	r3, pc, #252	@ (adr r3, 80082b0 <__ieee754_rem_pio2+0x300>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	f7f8 f9f9 	bl	80005b0 <__aeabi_dmul>
 80081be:	4632      	mov	r2, r6
 80081c0:	463b      	mov	r3, r7
 80081c2:	f7f8 f83d 	bl	8000240 <__aeabi_dsub>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 f835 	bl	8000240 <__aeabi_dsub>
 80081d6:	9a05      	ldr	r2, [sp, #20]
 80081d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b31      	cmp	r3, #49	@ 0x31
 80081e0:	dc20      	bgt.n	8008224 <__ieee754_rem_pio2+0x274>
 80081e2:	46c2      	mov	sl, r8
 80081e4:	46cb      	mov	fp, r9
 80081e6:	e9c4 0100 	strd	r0, r1, [r4]
 80081ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	4642      	mov	r2, r8
 80081f4:	464b      	mov	r3, r9
 80081f6:	f7f8 f823 	bl	8000240 <__aeabi_dsub>
 80081fa:	463b      	mov	r3, r7
 80081fc:	4632      	mov	r2, r6
 80081fe:	f7f8 f81f 	bl	8000240 <__aeabi_dsub>
 8008202:	9b04      	ldr	r3, [sp, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800820a:	f6bf af0e 	bge.w	800802a <__ieee754_rem_pio2+0x7a>
 800820e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008212:	f8c4 8000 	str.w	r8, [r4]
 8008216:	60a0      	str	r0, [r4, #8]
 8008218:	6063      	str	r3, [r4, #4]
 800821a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800821e:	60e3      	str	r3, [r4, #12]
 8008220:	426d      	negs	r5, r5
 8008222:	e702      	b.n	800802a <__ieee754_rem_pio2+0x7a>
 8008224:	a326      	add	r3, pc, #152	@ (adr r3, 80082c0 <__ieee754_rem_pio2+0x310>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822e:	f7f8 f9bf 	bl	80005b0 <__aeabi_dmul>
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	f7f7 ffff 	bl	8000240 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4682      	mov	sl, r0
 8008248:	468b      	mov	fp, r1
 800824a:	4640      	mov	r0, r8
 800824c:	4649      	mov	r1, r9
 800824e:	f7f7 fff7 	bl	8000240 <__aeabi_dsub>
 8008252:	4632      	mov	r2, r6
 8008254:	463b      	mov	r3, r7
 8008256:	f7f7 fff3 	bl	8000240 <__aeabi_dsub>
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	a31a      	add	r3, pc, #104	@ (adr r3, 80082c8 <__ieee754_rem_pio2+0x318>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008268:	f7f8 f9a2 	bl	80005b0 <__aeabi_dmul>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	f7f7 ffe6 	bl	8000240 <__aeabi_dsub>
 8008274:	4606      	mov	r6, r0
 8008276:	460f      	mov	r7, r1
 8008278:	e764      	b.n	8008144 <__ieee754_rem_pio2+0x194>
 800827a:	4b1b      	ldr	r3, [pc, #108]	@ (80082e8 <__ieee754_rem_pio2+0x338>)
 800827c:	4598      	cmp	r8, r3
 800827e:	d935      	bls.n	80082ec <__ieee754_rem_pio2+0x33c>
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f7 ffda 	bl	8000240 <__aeabi_dsub>
 800828c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008290:	e9c4 0100 	strd	r0, r1, [r4]
 8008294:	e69e      	b.n	8007fd4 <__ieee754_rem_pio2+0x24>
 8008296:	bf00      	nop
 8008298:	54400000 	.word	0x54400000
 800829c:	3ff921fb 	.word	0x3ff921fb
 80082a0:	1a626331 	.word	0x1a626331
 80082a4:	3dd0b461 	.word	0x3dd0b461
 80082a8:	1a600000 	.word	0x1a600000
 80082ac:	3dd0b461 	.word	0x3dd0b461
 80082b0:	2e037073 	.word	0x2e037073
 80082b4:	3ba3198a 	.word	0x3ba3198a
 80082b8:	6dc9c883 	.word	0x6dc9c883
 80082bc:	3fe45f30 	.word	0x3fe45f30
 80082c0:	2e000000 	.word	0x2e000000
 80082c4:	3ba3198a 	.word	0x3ba3198a
 80082c8:	252049c1 	.word	0x252049c1
 80082cc:	397b839a 	.word	0x397b839a
 80082d0:	3fe921fb 	.word	0x3fe921fb
 80082d4:	4002d97b 	.word	0x4002d97b
 80082d8:	3ff921fb 	.word	0x3ff921fb
 80082dc:	413921fb 	.word	0x413921fb
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	08008d80 	.word	0x08008d80
 80082e8:	7fefffff 	.word	0x7fefffff
 80082ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80082f0:	4630      	mov	r0, r6
 80082f2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80082f6:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80082fa:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80082fe:	f04f 0803 	mov.w	r8, #3
 8008302:	460f      	mov	r7, r1
 8008304:	f7f8 fbee 	bl	8000ae4 <__aeabi_d2iz>
 8008308:	f7f8 f8e8 	bl	80004dc <__aeabi_i2d>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008318:	f7f7 ff92 	bl	8000240 <__aeabi_dsub>
 800831c:	2200      	movs	r2, #0
 800831e:	4b20      	ldr	r3, [pc, #128]	@ (80083a0 <__ieee754_rem_pio2+0x3f0>)
 8008320:	f7f8 f946 	bl	80005b0 <__aeabi_dmul>
 8008324:	460f      	mov	r7, r1
 8008326:	4606      	mov	r6, r0
 8008328:	f7f8 fbdc 	bl	8000ae4 <__aeabi_d2iz>
 800832c:	f7f8 f8d6 	bl	80004dc <__aeabi_i2d>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	2600      	movs	r6, #0
 800833a:	2700      	movs	r7, #0
 800833c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008340:	f7f7 ff7e 	bl	8000240 <__aeabi_dsub>
 8008344:	2200      	movs	r2, #0
 8008346:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <__ieee754_rem_pio2+0x3f0>)
 8008348:	f7f8 f932 	bl	80005b0 <__aeabi_dmul>
 800834c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	46c2      	mov	sl, r8
 8008356:	f108 38ff 	add.w	r8, r8, #4294967295
 800835a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800835e:	f7f8 fb8f 	bl	8000a80 <__aeabi_dcmpeq>
 8008362:	2800      	cmp	r0, #0
 8008364:	d1f4      	bne.n	8008350 <__ieee754_rem_pio2+0x3a0>
 8008366:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <__ieee754_rem_pio2+0x3f4>)
 8008368:	462a      	mov	r2, r5
 800836a:	4621      	mov	r1, r4
 800836c:	a806      	add	r0, sp, #24
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	2302      	movs	r3, #2
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	4653      	mov	r3, sl
 8008376:	f000 f81f 	bl	80083b8 <__kernel_rem_pio2>
 800837a:	9b04      	ldr	r3, [sp, #16]
 800837c:	4605      	mov	r5, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	f6bf ae53 	bge.w	800802a <__ieee754_rem_pio2+0x7a>
 8008384:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800838c:	e9c4 2300 	strd	r2, r3, [r4]
 8008390:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008398:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800839c:	e740      	b.n	8008220 <__ieee754_rem_pio2+0x270>
 800839e:	bf00      	nop
 80083a0:	41700000 	.word	0x41700000
 80083a4:	08008e00 	.word	0x08008e00

080083a8 <fabs>:
 80083a8:	ec51 0b10 	vmov	r0, r1, d0
 80083ac:	4602      	mov	r2, r0
 80083ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80083b2:	ec43 2b10 	vmov	d0, r2, r3
 80083b6:	4770      	bx	lr

080083b8 <__kernel_rem_pio2>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	ed2d 8b02 	vpush	{d8}
 80083c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80083c4:	f112 0f14 	cmn.w	r2, #20
 80083c8:	f04f 0500 	mov.w	r5, #0
 80083cc:	9306      	str	r3, [sp, #24]
 80083ce:	bfa8      	it	ge
 80083d0:	1ed4      	subge	r4, r2, #3
 80083d2:	4bc3      	ldr	r3, [pc, #780]	@ (80086e0 <__kernel_rem_pio2+0x328>)
 80083d4:	bfb8      	it	lt
 80083d6:	2400      	movlt	r4, #0
 80083d8:	9104      	str	r1, [sp, #16]
 80083da:	ae20      	add	r6, sp, #128	@ 0x80
 80083dc:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80083de:	9008      	str	r0, [sp, #32]
 80083e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80083ec:	9305      	str	r3, [sp, #20]
 80083ee:	bfa4      	itt	ge
 80083f0:	2318      	movge	r3, #24
 80083f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80083f6:	f06f 0317 	mvn.w	r3, #23
 80083fa:	fb04 3303 	mla	r3, r4, r3, r3
 80083fe:	eb03 0b02 	add.w	fp, r3, r2
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	9a05      	ldr	r2, [sp, #20]
 8008406:	eb03 0802 	add.w	r8, r3, r2
 800840a:	1aa7      	subs	r7, r4, r2
 800840c:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800840e:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 80086d0 <__kernel_rem_pio2+0x318>
 8008412:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008416:	4545      	cmp	r5, r8
 8008418:	dd12      	ble.n	8008440 <__kernel_rem_pio2+0x88>
 800841a:	aa20      	add	r2, sp, #128	@ 0x80
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008422:	2700      	movs	r7, #0
 8008424:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008428:	9b00      	ldr	r3, [sp, #0]
 800842a:	429f      	cmp	r7, r3
 800842c:	dc2e      	bgt.n	800848c <__kernel_rem_pio2+0xd4>
 800842e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008432:	46a8      	mov	r8, r5
 8008434:	2600      	movs	r6, #0
 8008436:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 80086d0 <__kernel_rem_pio2+0x318>
 800843a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800843e:	e01b      	b.n	8008478 <__kernel_rem_pio2+0xc0>
 8008440:	42ef      	cmn	r7, r5
 8008442:	d407      	bmi.n	8008454 <__kernel_rem_pio2+0x9c>
 8008444:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008448:	f7f8 f848 	bl	80004dc <__aeabi_i2d>
 800844c:	3501      	adds	r5, #1
 800844e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008452:	e7e0      	b.n	8008416 <__kernel_rem_pio2+0x5e>
 8008454:	ec51 0b18 	vmov	r0, r1, d8
 8008458:	e7f8      	b.n	800844c <__kernel_rem_pio2+0x94>
 800845a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800845e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008462:	3601      	adds	r6, #1
 8008464:	f7f8 f8a4 	bl	80005b0 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008470:	f7f7 fee8 	bl	8000244 <__adddf3>
 8008474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008478:	9b05      	ldr	r3, [sp, #20]
 800847a:	429e      	cmp	r6, r3
 800847c:	dded      	ble.n	800845a <__kernel_rem_pio2+0xa2>
 800847e:	3701      	adds	r7, #1
 8008480:	3508      	adds	r5, #8
 8008482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008486:	ecaa 7b02 	vstmia	sl!, {d7}
 800848a:	e7cd      	b.n	8008428 <__kernel_rem_pio2+0x70>
 800848c:	9b00      	ldr	r3, [sp, #0]
 800848e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008490:	f8dd 8000 	ldr.w	r8, [sp]
 8008494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008498:	930a      	str	r3, [sp, #40]	@ 0x28
 800849a:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800849c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80084a6:	ac0c      	add	r4, sp, #48	@ 0x30
 80084a8:	46c2      	mov	sl, r8
 80084aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ac:	ab98      	add	r3, sp, #608	@ 0x260
 80084ae:	46a1      	mov	r9, r4
 80084b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084b4:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80084b8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80084ba:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80084be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084c2:	f1ba 0f00 	cmp.w	sl, #0
 80084c6:	dc77      	bgt.n	80085b8 <__kernel_rem_pio2+0x200>
 80084c8:	4658      	mov	r0, fp
 80084ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80084ce:	f000 fac3 	bl	8008a58 <scalbn>
 80084d2:	2200      	movs	r2, #0
 80084d4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80084d8:	ec57 6b10 	vmov	r6, r7, d0
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 f866 	bl	80005b0 <__aeabi_dmul>
 80084e4:	ec41 0b10 	vmov	d0, r0, r1
 80084e8:	f000 fb32 	bl	8008b50 <floor>
 80084ec:	2200      	movs	r2, #0
 80084ee:	4b7d      	ldr	r3, [pc, #500]	@ (80086e4 <__kernel_rem_pio2+0x32c>)
 80084f0:	ec51 0b10 	vmov	r0, r1, d0
 80084f4:	f7f8 f85c 	bl	80005b0 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f7 fe9e 	bl	8000240 <__aeabi_dsub>
 8008504:	460f      	mov	r7, r1
 8008506:	4606      	mov	r6, r0
 8008508:	f7f8 faec 	bl	8000ae4 <__aeabi_d2iz>
 800850c:	9002      	str	r0, [sp, #8]
 800850e:	f7f7 ffe5 	bl	80004dc <__aeabi_i2d>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 fe91 	bl	8000240 <__aeabi_dsub>
 800851e:	f1bb 0f00 	cmp.w	fp, #0
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	dd6c      	ble.n	8008602 <__kernel_rem_pio2+0x24a>
 8008528:	f108 31ff 	add.w	r1, r8, #4294967295
 800852c:	ab0c      	add	r3, sp, #48	@ 0x30
 800852e:	f1cb 0018 	rsb	r0, fp, #24
 8008532:	9d02      	ldr	r5, [sp, #8]
 8008534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008538:	fa43 f200 	asr.w	r2, r3, r0
 800853c:	4415      	add	r5, r2
 800853e:	4082      	lsls	r2, r0
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	aa0c      	add	r2, sp, #48	@ 0x30
 8008544:	9502      	str	r5, [sp, #8]
 8008546:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800854a:	f1cb 0217 	rsb	r2, fp, #23
 800854e:	fa43 f902 	asr.w	r9, r3, r2
 8008552:	f1b9 0f00 	cmp.w	r9, #0
 8008556:	dd64      	ble.n	8008622 <__kernel_rem_pio2+0x26a>
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008560:	3301      	adds	r3, #1
 8008562:	4615      	mov	r5, r2
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	4590      	cmp	r8, r2
 8008568:	f300 80a1 	bgt.w	80086ae <__kernel_rem_pio2+0x2f6>
 800856c:	f1bb 0f00 	cmp.w	fp, #0
 8008570:	dd07      	ble.n	8008582 <__kernel_rem_pio2+0x1ca>
 8008572:	f1bb 0f01 	cmp.w	fp, #1
 8008576:	f000 80c1 	beq.w	80086fc <__kernel_rem_pio2+0x344>
 800857a:	f1bb 0f02 	cmp.w	fp, #2
 800857e:	f000 80c8 	beq.w	8008712 <__kernel_rem_pio2+0x35a>
 8008582:	f1b9 0f02 	cmp.w	r9, #2
 8008586:	d14c      	bne.n	8008622 <__kernel_rem_pio2+0x26a>
 8008588:	4632      	mov	r2, r6
 800858a:	463b      	mov	r3, r7
 800858c:	2000      	movs	r0, #0
 800858e:	4956      	ldr	r1, [pc, #344]	@ (80086e8 <__kernel_rem_pio2+0x330>)
 8008590:	f7f7 fe56 	bl	8000240 <__aeabi_dsub>
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	2d00      	cmp	r5, #0
 800859a:	d042      	beq.n	8008622 <__kernel_rem_pio2+0x26a>
 800859c:	4658      	mov	r0, fp
 800859e:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 80086d8 <__kernel_rem_pio2+0x320>
 80085a2:	f000 fa59 	bl	8008a58 <scalbn>
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	ec53 2b10 	vmov	r2, r3, d0
 80085ae:	f7f7 fe47 	bl	8000240 <__aeabi_dsub>
 80085b2:	4606      	mov	r6, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	e034      	b.n	8008622 <__kernel_rem_pio2+0x26a>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b4c      	ldr	r3, [pc, #304]	@ (80086ec <__kernel_rem_pio2+0x334>)
 80085bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c4:	f7f7 fff4 	bl	80005b0 <__aeabi_dmul>
 80085c8:	f7f8 fa8c 	bl	8000ae4 <__aeabi_d2iz>
 80085cc:	f7f7 ff86 	bl	80004dc <__aeabi_i2d>
 80085d0:	2200      	movs	r2, #0
 80085d2:	4b47      	ldr	r3, [pc, #284]	@ (80086f0 <__kernel_rem_pio2+0x338>)
 80085d4:	4606      	mov	r6, r0
 80085d6:	460f      	mov	r7, r1
 80085d8:	f7f7 ffea 	bl	80005b0 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e4:	f7f7 fe2c 	bl	8000240 <__aeabi_dsub>
 80085e8:	f7f8 fa7c 	bl	8000ae4 <__aeabi_d2iz>
 80085ec:	4639      	mov	r1, r7
 80085ee:	f849 0b04 	str.w	r0, [r9], #4
 80085f2:	4630      	mov	r0, r6
 80085f4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80085f8:	f7f7 fe24 	bl	8000244 <__adddf3>
 80085fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008600:	e75f      	b.n	80084c2 <__kernel_rem_pio2+0x10a>
 8008602:	d107      	bne.n	8008614 <__kernel_rem_pio2+0x25c>
 8008604:	f108 33ff 	add.w	r3, r8, #4294967295
 8008608:	aa0c      	add	r2, sp, #48	@ 0x30
 800860a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800860e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008612:	e79e      	b.n	8008552 <__kernel_rem_pio2+0x19a>
 8008614:	2200      	movs	r2, #0
 8008616:	4b37      	ldr	r3, [pc, #220]	@ (80086f4 <__kernel_rem_pio2+0x33c>)
 8008618:	f7f8 fa50 	bl	8000abc <__aeabi_dcmpge>
 800861c:	2800      	cmp	r0, #0
 800861e:	d143      	bne.n	80086a8 <__kernel_rem_pio2+0x2f0>
 8008620:	4681      	mov	r9, r0
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4630      	mov	r0, r6
 8008628:	4639      	mov	r1, r7
 800862a:	f7f8 fa29 	bl	8000a80 <__aeabi_dcmpeq>
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 80c1 	beq.w	80087b6 <__kernel_rem_pio2+0x3fe>
 8008634:	f108 33ff 	add.w	r3, r8, #4294967295
 8008638:	2200      	movs	r2, #0
 800863a:	9900      	ldr	r1, [sp, #0]
 800863c:	428b      	cmp	r3, r1
 800863e:	da70      	bge.n	8008722 <__kernel_rem_pio2+0x36a>
 8008640:	2a00      	cmp	r2, #0
 8008642:	f000 808b 	beq.w	800875c <__kernel_rem_pio2+0x3a4>
 8008646:	f108 38ff 	add.w	r8, r8, #4294967295
 800864a:	ab0c      	add	r3, sp, #48	@ 0x30
 800864c:	f1ab 0b18 	sub.w	fp, fp, #24
 8008650:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0f6      	beq.n	8008646 <__kernel_rem_pio2+0x28e>
 8008658:	4658      	mov	r0, fp
 800865a:	4646      	mov	r6, r8
 800865c:	f04f 0a00 	mov.w	sl, #0
 8008660:	f8df b088 	ldr.w	fp, [pc, #136]	@ 80086ec <__kernel_rem_pio2+0x334>
 8008664:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80086d8 <__kernel_rem_pio2+0x320>
 8008668:	f000 f9f6 	bl	8008a58 <scalbn>
 800866c:	f108 0301 	add.w	r3, r8, #1
 8008670:	00da      	lsls	r2, r3, #3
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008676:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800867a:	ec55 4b10 	vmov	r4, r5, d0
 800867e:	2e00      	cmp	r6, #0
 8008680:	f280 80d1 	bge.w	8008826 <__kernel_rem_pio2+0x46e>
 8008684:	4644      	mov	r4, r8
 8008686:	2c00      	cmp	r4, #0
 8008688:	f2c0 80ff 	blt.w	800888a <__kernel_rem_pio2+0x4d2>
 800868c:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <__kernel_rem_pio2+0x340>)
 800868e:	f04f 0a00 	mov.w	sl, #0
 8008692:	f04f 0b00 	mov.w	fp, #0
 8008696:	2600      	movs	r6, #0
 8008698:	461f      	mov	r7, r3
 800869a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800869c:	eba8 0504 	sub.w	r5, r8, r4
 80086a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086a4:	9306      	str	r3, [sp, #24]
 80086a6:	e0e4      	b.n	8008872 <__kernel_rem_pio2+0x4ba>
 80086a8:	f04f 0902 	mov.w	r9, #2
 80086ac:	e754      	b.n	8008558 <__kernel_rem_pio2+0x1a0>
 80086ae:	f854 3b04 	ldr.w	r3, [r4], #4
 80086b2:	b945      	cbnz	r5, 80086c6 <__kernel_rem_pio2+0x30e>
 80086b4:	b123      	cbz	r3, 80086c0 <__kernel_rem_pio2+0x308>
 80086b6:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80086ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80086be:	2301      	movs	r3, #1
 80086c0:	3201      	adds	r2, #1
 80086c2:	461d      	mov	r5, r3
 80086c4:	e74f      	b.n	8008566 <__kernel_rem_pio2+0x1ae>
 80086c6:	1acb      	subs	r3, r1, r3
 80086c8:	e7f7      	b.n	80086ba <__kernel_rem_pio2+0x302>
 80086ca:	bf00      	nop
 80086cc:	f3af 8000 	nop.w
	...
 80086dc:	3ff00000 	.word	0x3ff00000
 80086e0:	08008f48 	.word	0x08008f48
 80086e4:	40200000 	.word	0x40200000
 80086e8:	3ff00000 	.word	0x3ff00000
 80086ec:	3e700000 	.word	0x3e700000
 80086f0:	41700000 	.word	0x41700000
 80086f4:	3fe00000 	.word	0x3fe00000
 80086f8:	08008f08 	.word	0x08008f08
 80086fc:	f108 32ff 	add.w	r2, r8, #4294967295
 8008700:	ab0c      	add	r3, sp, #48	@ 0x30
 8008702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008706:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800870a:	a90c      	add	r1, sp, #48	@ 0x30
 800870c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008710:	e737      	b.n	8008582 <__kernel_rem_pio2+0x1ca>
 8008712:	f108 32ff 	add.w	r2, r8, #4294967295
 8008716:	ab0c      	add	r3, sp, #48	@ 0x30
 8008718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008720:	e7f3      	b.n	800870a <__kernel_rem_pio2+0x352>
 8008722:	a90c      	add	r1, sp, #48	@ 0x30
 8008724:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008728:	3b01      	subs	r3, #1
 800872a:	430a      	orrs	r2, r1
 800872c:	e785      	b.n	800863a <__kernel_rem_pio2+0x282>
 800872e:	3401      	adds	r4, #1
 8008730:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008734:	2a00      	cmp	r2, #0
 8008736:	d0fa      	beq.n	800872e <__kernel_rem_pio2+0x376>
 8008738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800873a:	aa20      	add	r2, sp, #128	@ 0x80
 800873c:	f108 0701 	add.w	r7, r8, #1
 8008740:	4444      	add	r4, r8
 8008742:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008746:	eb0d 0503 	add.w	r5, sp, r3
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	4443      	add	r3, r8
 800874e:	3d98      	subs	r5, #152	@ 0x98
 8008750:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008754:	42bc      	cmp	r4, r7
 8008756:	da04      	bge.n	8008762 <__kernel_rem_pio2+0x3aa>
 8008758:	46a0      	mov	r8, r4
 800875a:	e6a2      	b.n	80084a2 <__kernel_rem_pio2+0xea>
 800875c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800875e:	2401      	movs	r4, #1
 8008760:	e7e6      	b.n	8008730 <__kernel_rem_pio2+0x378>
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	f04f 0800 	mov.w	r8, #0
 8008768:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800876c:	f7f7 feb6 	bl	80004dc <__aeabi_i2d>
 8008770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008774:	ed9f 7bb4 	vldr	d7, [pc, #720]	@ 8008a48 <__kernel_rem_pio2+0x690>
 8008778:	e8e6 0102 	strd	r0, r1, [r6], #8
 800877c:	46b2      	mov	sl, r6
 800877e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4598      	cmp	r8, r3
 8008786:	dd05      	ble.n	8008794 <__kernel_rem_pio2+0x3dc>
 8008788:	3701      	adds	r7, #1
 800878a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800878e:	eca5 7b02 	vstmia	r5!, {d7}
 8008792:	e7df      	b.n	8008754 <__kernel_rem_pio2+0x39c>
 8008794:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008798:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800879c:	f7f7 ff08 	bl	80005b0 <__aeabi_dmul>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ac:	f7f7 fd4a 	bl	8000244 <__adddf3>
 80087b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b4:	e7e5      	b.n	8008782 <__kernel_rem_pio2+0x3ca>
 80087b6:	f1cb 0000 	rsb	r0, fp, #0
 80087ba:	ec47 6b10 	vmov	d0, r6, r7
 80087be:	f000 f94b 	bl	8008a58 <scalbn>
 80087c2:	2200      	movs	r2, #0
 80087c4:	4ba2      	ldr	r3, [pc, #648]	@ (8008a50 <__kernel_rem_pio2+0x698>)
 80087c6:	ec55 4b10 	vmov	r4, r5, d0
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f8 f975 	bl	8000abc <__aeabi_dcmpge>
 80087d2:	b300      	cbz	r0, 8008816 <__kernel_rem_pio2+0x45e>
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b9f      	ldr	r3, [pc, #636]	@ (8008a54 <__kernel_rem_pio2+0x69c>)
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fee8 	bl	80005b0 <__aeabi_dmul>
 80087e0:	f10b 0b18 	add.w	fp, fp, #24
 80087e4:	f7f8 f97e 	bl	8000ae4 <__aeabi_d2iz>
 80087e8:	4606      	mov	r6, r0
 80087ea:	f7f7 fe77 	bl	80004dc <__aeabi_i2d>
 80087ee:	2200      	movs	r2, #0
 80087f0:	4b97      	ldr	r3, [pc, #604]	@ (8008a50 <__kernel_rem_pio2+0x698>)
 80087f2:	f7f7 fedd 	bl	80005b0 <__aeabi_dmul>
 80087f6:	460b      	mov	r3, r1
 80087f8:	4602      	mov	r2, r0
 80087fa:	4629      	mov	r1, r5
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f7 fd1f 	bl	8000240 <__aeabi_dsub>
 8008802:	f7f8 f96f 	bl	8000ae4 <__aeabi_d2iz>
 8008806:	ab0c      	add	r3, sp, #48	@ 0x30
 8008808:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800880c:	f108 0801 	add.w	r8, r8, #1
 8008810:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008814:	e720      	b.n	8008658 <__kernel_rem_pio2+0x2a0>
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f8 f963 	bl	8000ae4 <__aeabi_d2iz>
 800881e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008820:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008824:	e718      	b.n	8008658 <__kernel_rem_pio2+0x2a0>
 8008826:	ab0c      	add	r3, sp, #48	@ 0x30
 8008828:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800882c:	3e01      	subs	r6, #1
 800882e:	f7f7 fe55 	bl	80004dc <__aeabi_i2d>
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f7f7 febb 	bl	80005b0 <__aeabi_dmul>
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008842:	4620      	mov	r0, r4
 8008844:	4629      	mov	r1, r5
 8008846:	f7f7 feb3 	bl	80005b0 <__aeabi_dmul>
 800884a:	4604      	mov	r4, r0
 800884c:	460d      	mov	r5, r1
 800884e:	e716      	b.n	800867e <__kernel_rem_pio2+0x2c6>
 8008850:	9906      	ldr	r1, [sp, #24]
 8008852:	3601      	adds	r6, #1
 8008854:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008858:	9106      	str	r1, [sp, #24]
 800885a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800885e:	f7f7 fea7 	bl	80005b0 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4650      	mov	r0, sl
 8008868:	4659      	mov	r1, fp
 800886a:	f7f7 fceb 	bl	8000244 <__adddf3>
 800886e:	4682      	mov	sl, r0
 8008870:	468b      	mov	fp, r1
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	429e      	cmp	r6, r3
 8008876:	dc01      	bgt.n	800887c <__kernel_rem_pio2+0x4c4>
 8008878:	42ae      	cmp	r6, r5
 800887a:	dde9      	ble.n	8008850 <__kernel_rem_pio2+0x498>
 800887c:	ab48      	add	r3, sp, #288	@ 0x120
 800887e:	3c01      	subs	r4, #1
 8008880:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008884:	e9c5 ab00 	strd	sl, fp, [r5]
 8008888:	e6fd      	b.n	8008686 <__kernel_rem_pio2+0x2ce>
 800888a:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800888c:	2b02      	cmp	r3, #2
 800888e:	dc0b      	bgt.n	80088a8 <__kernel_rem_pio2+0x4f0>
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc35      	bgt.n	8008900 <__kernel_rem_pio2+0x548>
 8008894:	d059      	beq.n	800894a <__kernel_rem_pio2+0x592>
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	f003 0007 	and.w	r0, r3, #7
 800889c:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80088a0:	ecbd 8b02 	vpop	{d8}
 80088a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a8:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d1f3      	bne.n	8008896 <__kernel_rem_pio2+0x4de>
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	46c2      	mov	sl, r8
 80088b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088b6:	eb0d 0403 	add.w	r4, sp, r3
 80088ba:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80088be:	4625      	mov	r5, r4
 80088c0:	f1ba 0f00 	cmp.w	sl, #0
 80088c4:	dc69      	bgt.n	800899a <__kernel_rem_pio2+0x5e2>
 80088c6:	4645      	mov	r5, r8
 80088c8:	2d01      	cmp	r5, #1
 80088ca:	f300 8087 	bgt.w	80089dc <__kernel_rem_pio2+0x624>
 80088ce:	9c05      	ldr	r4, [sp, #20]
 80088d0:	ab48      	add	r3, sp, #288	@ 0x120
 80088d2:	2000      	movs	r0, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	441c      	add	r4, r3
 80088d8:	f1b8 0f01 	cmp.w	r8, #1
 80088dc:	f300 809c 	bgt.w	8008a18 <__kernel_rem_pio2+0x660>
 80088e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80088e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80088e8:	f1b9 0f00 	cmp.w	r9, #0
 80088ec:	f040 809b 	bne.w	8008a26 <__kernel_rem_pio2+0x66e>
 80088f0:	9b04      	ldr	r3, [sp, #16]
 80088f2:	e9c3 5600 	strd	r5, r6, [r3]
 80088f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80088fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80088fe:	e7ca      	b.n	8008896 <__kernel_rem_pio2+0x4de>
 8008900:	9d05      	ldr	r5, [sp, #20]
 8008902:	ab48      	add	r3, sp, #288	@ 0x120
 8008904:	4644      	mov	r4, r8
 8008906:	2000      	movs	r0, #0
 8008908:	441d      	add	r5, r3
 800890a:	2100      	movs	r1, #0
 800890c:	2c00      	cmp	r4, #0
 800890e:	da35      	bge.n	800897c <__kernel_rem_pio2+0x5c4>
 8008910:	f1b9 0f00 	cmp.w	r9, #0
 8008914:	d038      	beq.n	8008988 <__kernel_rem_pio2+0x5d0>
 8008916:	4602      	mov	r2, r0
 8008918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800891c:	9c04      	ldr	r4, [sp, #16]
 800891e:	ad4a      	add	r5, sp, #296	@ 0x128
 8008920:	e9c4 2300 	strd	r2, r3, [r4]
 8008924:	2401      	movs	r4, #1
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800892e:	f7f7 fc87 	bl	8000240 <__aeabi_dsub>
 8008932:	45a0      	cmp	r8, r4
 8008934:	da2b      	bge.n	800898e <__kernel_rem_pio2+0x5d6>
 8008936:	f1b9 0f00 	cmp.w	r9, #0
 800893a:	d002      	beq.n	8008942 <__kernel_rem_pio2+0x58a>
 800893c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008940:	4619      	mov	r1, r3
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008948:	e7a5      	b.n	8008896 <__kernel_rem_pio2+0x4de>
 800894a:	9c05      	ldr	r4, [sp, #20]
 800894c:	ab48      	add	r3, sp, #288	@ 0x120
 800894e:	2000      	movs	r0, #0
 8008950:	2100      	movs	r1, #0
 8008952:	441c      	add	r4, r3
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	da09      	bge.n	800896e <__kernel_rem_pio2+0x5b6>
 800895a:	f1b9 0f00 	cmp.w	r9, #0
 800895e:	d002      	beq.n	8008966 <__kernel_rem_pio2+0x5ae>
 8008960:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008964:	4619      	mov	r1, r3
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	e9c3 0100 	strd	r0, r1, [r3]
 800896c:	e793      	b.n	8008896 <__kernel_rem_pio2+0x4de>
 800896e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008972:	f108 38ff 	add.w	r8, r8, #4294967295
 8008976:	f7f7 fc65 	bl	8000244 <__adddf3>
 800897a:	e7eb      	b.n	8008954 <__kernel_rem_pio2+0x59c>
 800897c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008980:	3c01      	subs	r4, #1
 8008982:	f7f7 fc5f 	bl	8000244 <__adddf3>
 8008986:	e7c1      	b.n	800890c <__kernel_rem_pio2+0x554>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	e7c6      	b.n	800891c <__kernel_rem_pio2+0x564>
 800898e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008992:	3401      	adds	r4, #1
 8008994:	f7f7 fc56 	bl	8000244 <__adddf3>
 8008998:	e7cb      	b.n	8008932 <__kernel_rem_pio2+0x57a>
 800899a:	ed35 7b02 	vldmdb	r5!, {d7}
 800899e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a2:	ed8d 7b00 	vstr	d7, [sp]
 80089a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80089aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ae:	ec53 2b17 	vmov	r2, r3, d7
 80089b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089b6:	f7f7 fc45 	bl	8000244 <__adddf3>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089c6:	f7f7 fc3b 	bl	8000240 <__aeabi_dsub>
 80089ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089ce:	f7f7 fc39 	bl	8000244 <__adddf3>
 80089d2:	e9c5 6700 	strd	r6, r7, [r5]
 80089d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80089da:	e771      	b.n	80088c0 <__kernel_rem_pio2+0x508>
 80089dc:	ed34 7b02 	vldmdb	r4!, {d7}
 80089e0:	3d01      	subs	r5, #1
 80089e2:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80089e6:	ec51 0b17 	vmov	r0, r1, d7
 80089ea:	4652      	mov	r2, sl
 80089ec:	465b      	mov	r3, fp
 80089ee:	ed8d 7b00 	vstr	d7, [sp]
 80089f2:	f7f7 fc27 	bl	8000244 <__adddf3>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a02:	f7f7 fc1d 	bl	8000240 <__aeabi_dsub>
 8008a06:	4652      	mov	r2, sl
 8008a08:	465b      	mov	r3, fp
 8008a0a:	f7f7 fc1b 	bl	8000244 <__adddf3>
 8008a0e:	e9c4 6700 	strd	r6, r7, [r4]
 8008a12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a16:	e757      	b.n	80088c8 <__kernel_rem_pio2+0x510>
 8008a18:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a20:	f7f7 fc10 	bl	8000244 <__adddf3>
 8008a24:	e758      	b.n	80088d8 <__kernel_rem_pio2+0x520>
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8008a2c:	9a04      	ldr	r2, [sp, #16]
 8008a2e:	601d      	str	r5, [r3, #0]
 8008a30:	605c      	str	r4, [r3, #4]
 8008a32:	609f      	str	r7, [r3, #8]
 8008a34:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8008a38:	6110      	str	r0, [r2, #16]
 8008a3a:	60d3      	str	r3, [r2, #12]
 8008a3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a40:	6153      	str	r3, [r2, #20]
 8008a42:	e728      	b.n	8008896 <__kernel_rem_pio2+0x4de>
 8008a44:	f3af 8000 	nop.w
	...
 8008a50:	41700000 	.word	0x41700000
 8008a54:	3e700000 	.word	0x3e700000

08008a58 <scalbn>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	ec55 4b10 	vmov	r4, r5, d0
 8008a5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008a62:	4606      	mov	r6, r0
 8008a64:	462b      	mov	r3, r5
 8008a66:	b991      	cbnz	r1, 8008a8e <scalbn+0x36>
 8008a68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008a6c:	4323      	orrs	r3, r4
 8008a6e:	d03b      	beq.n	8008ae8 <scalbn+0x90>
 8008a70:	4b33      	ldr	r3, [pc, #204]	@ (8008b40 <scalbn+0xe8>)
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	2200      	movs	r2, #0
 8008a78:	f7f7 fd9a 	bl	80005b0 <__aeabi_dmul>
 8008a7c:	4b31      	ldr	r3, [pc, #196]	@ (8008b44 <scalbn+0xec>)
 8008a7e:	4604      	mov	r4, r0
 8008a80:	460d      	mov	r5, r1
 8008a82:	429e      	cmp	r6, r3
 8008a84:	da0f      	bge.n	8008aa6 <scalbn+0x4e>
 8008a86:	a326      	add	r3, pc, #152	@ (adr r3, 8008b20 <scalbn+0xc8>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e01e      	b.n	8008acc <scalbn+0x74>
 8008a8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008a92:	4291      	cmp	r1, r2
 8008a94:	d10b      	bne.n	8008aae <scalbn+0x56>
 8008a96:	4622      	mov	r2, r4
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f7 fbd2 	bl	8000244 <__adddf3>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	e020      	b.n	8008ae8 <scalbn+0x90>
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008aac:	3936      	subs	r1, #54	@ 0x36
 8008aae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008ab2:	4296      	cmp	r6, r2
 8008ab4:	dd0d      	ble.n	8008ad2 <scalbn+0x7a>
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008b28 <scalbn+0xd0>)
 8008aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008abe:	da02      	bge.n	8008ac6 <scalbn+0x6e>
 8008ac0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008b30 <scalbn+0xd8>)
 8008ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac6:	a318      	add	r3, pc, #96	@ (adr r3, 8008b28 <scalbn+0xd0>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fd70 	bl	80005b0 <__aeabi_dmul>
 8008ad0:	e7e6      	b.n	8008aa0 <scalbn+0x48>
 8008ad2:	1872      	adds	r2, r6, r1
 8008ad4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008ad8:	428a      	cmp	r2, r1
 8008ada:	dcec      	bgt.n	8008ab6 <scalbn+0x5e>
 8008adc:	2a00      	cmp	r2, #0
 8008ade:	dd06      	ble.n	8008aee <scalbn+0x96>
 8008ae0:	f36f 531e 	bfc	r3, #20, #11
 8008ae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ae8:	ec45 4b10 	vmov	d0, r4, r5
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008af2:	da08      	bge.n	8008b06 <scalbn+0xae>
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008b20 <scalbn+0xc8>)
 8008af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afc:	dac3      	bge.n	8008a86 <scalbn+0x2e>
 8008afe:	a10e      	add	r1, pc, #56	@ (adr r1, 8008b38 <scalbn+0xe0>)
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	e7bf      	b.n	8008a86 <scalbn+0x2e>
 8008b06:	3236      	adds	r2, #54	@ 0x36
 8008b08:	f36f 531e 	bfc	r3, #20, #11
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b12:	2200      	movs	r2, #0
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <scalbn+0xf0>)
 8008b16:	4629      	mov	r1, r5
 8008b18:	e7d8      	b.n	8008acc <scalbn+0x74>
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w
 8008b20:	c2f8f359 	.word	0xc2f8f359
 8008b24:	01a56e1f 	.word	0x01a56e1f
 8008b28:	8800759c 	.word	0x8800759c
 8008b2c:	7e37e43c 	.word	0x7e37e43c
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	fe37e43c 	.word	0xfe37e43c
 8008b38:	c2f8f359 	.word	0xc2f8f359
 8008b3c:	81a56e1f 	.word	0x81a56e1f
 8008b40:	43500000 	.word	0x43500000
 8008b44:	ffff3cb0 	.word	0xffff3cb0
 8008b48:	3c900000 	.word	0x3c900000
 8008b4c:	00000000 	.word	0x00000000

08008b50 <floor>:
 8008b50:	ec51 0b10 	vmov	r0, r1, d0
 8008b54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008b60:	460c      	mov	r4, r1
 8008b62:	4605      	mov	r5, r0
 8008b64:	4680      	mov	r8, r0
 8008b66:	2e13      	cmp	r6, #19
 8008b68:	dc35      	bgt.n	8008bd6 <floor+0x86>
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	da17      	bge.n	8008b9e <floor+0x4e>
 8008b6e:	a334      	add	r3, pc, #208	@ (adr r3, 8008c40 <floor+0xf0>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fb66 	bl	8000244 <__adddf3>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f7f7 ffa8 	bl	8000ad0 <__aeabi_dcmpgt>
 8008b80:	b150      	cbz	r0, 8008b98 <floor+0x48>
 8008b82:	2c00      	cmp	r4, #0
 8008b84:	da56      	bge.n	8008c34 <floor+0xe4>
 8008b86:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008b8a:	432c      	orrs	r4, r5
 8008b8c:	2500      	movs	r5, #0
 8008b8e:	42ac      	cmp	r4, r5
 8008b90:	4c2d      	ldr	r4, [pc, #180]	@ (8008c48 <floor+0xf8>)
 8008b92:	bf08      	it	eq
 8008b94:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	e024      	b.n	8008be8 <floor+0x98>
 8008b9e:	4f2b      	ldr	r7, [pc, #172]	@ (8008c4c <floor+0xfc>)
 8008ba0:	4137      	asrs	r7, r6
 8008ba2:	ea01 0307 	and.w	r3, r1, r7
 8008ba6:	4303      	orrs	r3, r0
 8008ba8:	d01e      	beq.n	8008be8 <floor+0x98>
 8008baa:	a325      	add	r3, pc, #148	@ (adr r3, 8008c40 <floor+0xf0>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb48 	bl	8000244 <__adddf3>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f7f7 ff8a 	bl	8000ad0 <__aeabi_dcmpgt>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d0eb      	beq.n	8008b98 <floor+0x48>
 8008bc0:	2c00      	cmp	r4, #0
 8008bc2:	f04f 0500 	mov.w	r5, #0
 8008bc6:	bfbe      	ittt	lt
 8008bc8:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008bcc:	4133      	asrlt	r3, r6
 8008bce:	18e4      	addlt	r4, r4, r3
 8008bd0:	ea24 0407 	bic.w	r4, r4, r7
 8008bd4:	e7e0      	b.n	8008b98 <floor+0x48>
 8008bd6:	2e33      	cmp	r6, #51	@ 0x33
 8008bd8:	dd0a      	ble.n	8008bf0 <floor+0xa0>
 8008bda:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008bde:	d103      	bne.n	8008be8 <floor+0x98>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	f7f7 fb2e 	bl	8000244 <__adddf3>
 8008be8:	ec41 0b10 	vmov	d0, r0, r1
 8008bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf0:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8008bf8:	40df      	lsrs	r7, r3
 8008bfa:	4207      	tst	r7, r0
 8008bfc:	d0f4      	beq.n	8008be8 <floor+0x98>
 8008bfe:	a310      	add	r3, pc, #64	@ (adr r3, 8008c40 <floor+0xf0>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fb1e 	bl	8000244 <__adddf3>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f7f7 ff60 	bl	8000ad0 <__aeabi_dcmpgt>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d0c1      	beq.n	8008b98 <floor+0x48>
 8008c14:	2c00      	cmp	r4, #0
 8008c16:	da0a      	bge.n	8008c2e <floor+0xde>
 8008c18:	2e14      	cmp	r6, #20
 8008c1a:	d101      	bne.n	8008c20 <floor+0xd0>
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	e006      	b.n	8008c2e <floor+0xde>
 8008c20:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008c24:	2301      	movs	r3, #1
 8008c26:	40b3      	lsls	r3, r6
 8008c28:	441d      	add	r5, r3
 8008c2a:	4545      	cmp	r5, r8
 8008c2c:	d3f6      	bcc.n	8008c1c <floor+0xcc>
 8008c2e:	ea25 0507 	bic.w	r5, r5, r7
 8008c32:	e7b1      	b.n	8008b98 <floor+0x48>
 8008c34:	2500      	movs	r5, #0
 8008c36:	462c      	mov	r4, r5
 8008c38:	e7ae      	b.n	8008b98 <floor+0x48>
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w
 8008c40:	8800759c 	.word	0x8800759c
 8008c44:	7e37e43c 	.word	0x7e37e43c
 8008c48:	bff00000 	.word	0xbff00000
 8008c4c:	000fffff 	.word	0x000fffff

08008c50 <_init>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	bf00      	nop
 8008c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c56:	bc08      	pop	{r3}
 8008c58:	469e      	mov	lr, r3
 8008c5a:	4770      	bx	lr

08008c5c <_fini>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr
